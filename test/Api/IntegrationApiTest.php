<?php
/**
 * IntegrationApiTest
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace TalonOne\Client\Test;

use PHPUnit\Framework\TestCase;

/**
 * IntegrationApiTest Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IntegrationApiTest extends TestCase
{

    /**
     * @var \TalonOne\Client\Api\IntegrationApi
     */
    protected $apiInstance;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        // Configure Host, API key, & API key prefix for integration authentication
        $config = \TalonOne\Client\Configuration::getDefaultConfiguration()
            ->setHost('http://host.docker.internal:9000')
            ->setApiKeyPrefix('Authorization', 'ApiKey-v1')
            // ->setApiKey('Authorization', 'a821571383beb621dac20c6b773fc8c986ca1e2dc665fbd6ad6a4c5743526f91')
            ->setApiKey('Authorization', 'f10e9ee8463785b1aa0f40fa64bfed336253bddf2f3b55d76cb65055e638fdc9');

        $this->apiInstance = new \TalonOne\Client\Api\IntegrationApi(
            // If you want use custom http client, pass your client which implements `GuzzleHttp\ClientInterface`.
            // This is optional, `GuzzleHttp\Client` will be used as default.
            // new GuzzleHttp\Client(),
            null,
            $config
        );
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for createCouponReservation
     *
     * Create a new coupon reservation.
     *
     */
    public function testCreateCouponReservation()
    {
    }

    /**
     * Test case for createReferral
     *
     * Create a referral code for an advocate.
     *
     */
    public function testCreateReferral()
    {
    }

    /**
     * Test case for deleteCouponReservation
     *
     * Delete coupon reservations.
     *
     */
    public function testDeleteCouponReservation()
    {
    }

    /**
     * Test case for deleteCustomerData
     *
     * Delete the personal data of a customer.
     *
     */
    public function testDeleteCustomerData()
    {
    }

    /**
     * Test case for getCustomerInventory
     *
     * Get an inventory of all data associated with a specific customer profile.
     *
     */
    public function testGetCustomerInventory()
    {
        try {
            $integration_id = 'example_prof_id'; // string | The unique identifier for this profile
            $profile = True; // bool | optional flag to decide if you would like customer profile information in the response
            $referrals = False; // bool | optional flag to decide if you would like referral information in the response
            $coupons = False; // bool | optional flag to decide if you would like coupon information in the response
            $loyalty = True; // bool | optional flag to decide if you would like loyalty information in the response
            
            $inventory = $this->apiInstance->getCustomerInventory($integration_id, $profile, $referrals, $coupons, $loyalty);
            print_r($inventory);
        } catch (Exception $e) {
            echo 'Exception when calling IntegrationApi->getCustomerInventory: ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for getReservedCustomers
     *
     * Get the users that have this coupon reserved.
     *
     */
    public function testGetReservedCustomers()
    {
    }

    /**
     * Test case for trackEvent
     *
     * Track an Event.
     *
     */
    public function testTrackEvent()
    {
    }

    /**
     * Test case for updateCustomerProfile
     *
     * Update a Customer Profile V1.
     *
     */
    public function testUpdateCustomerProfile()
    {
        try {
            $profile_integration_id = 'any_given_integration_id'; // string | The unique identifier for this profile
            $body = new \TalonOne\Client\Model\NewCustomerProfile([
                'attributes' => [
                    'Name' => 'Thomas Shelby',
                    'Email' => 'thomas@shelby.co.uk'
                ]
            ]);
            
            $result = $this->apiInstance->updateCustomerProfile($profile_integration_id, $body);
            print_r($result);
        } catch (Exception $e) {
            echo 'Exception when calling IntegrationApi->updateCustomerProfile: ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for updateCustomerProfileAudiences
     *
     * Update a Customer Profile Audiences.
     *
     */
    public function testUpdateCustomerProfileAudiences()
    {
    }

    /**
     * Test case for updateCustomerProfileV2
     *
     * Update a Customer Profile.
     *
     */
    public function testUpdateCustomerProfileV2()
    {
        try {
            $customer_profile_id = 'customer_profile_v2_id_example';
            $body = new \TalonOne\Client\Model\CustomerProfileIntegrationRequestV2([
                'attributes' => [
                    'Name' => 'Grace Burgess',
                ],
                'responseContent' => [
                    \TalonOne\Client\Model\CustomerProfileIntegrationRequestV2::RESPONSE_CONTENT_CUSTOMER_PROFILE,
                    \TalonOne\Client\Model\CustomerProfileIntegrationRequestV2::RESPONSE_CONTENT_LOYALTY
                ]
            ]);
            $runRuleEngine = True;
            $dry = null;

            $result = $this->apiInstance->updateCustomerProfileV2($customer_profile_id, $body, $runRuleEngine, $dry);
            print_r($result);
        } catch (Exception $e) {
            echo 'Exception when calling IntegrationApi->updateCustomerProfileV2: ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for updateCustomerProfilesV2
     *
     * Update multiple Customer Profiles.
     *
     */
    public function testUpdateCustomerProfilesV2()
    {
    }

    /**
     * Test case for updateCustomerSession
     *
     * Update a Customer Session V1.
     *
     */
    public function testUpdateCustomerSession()
    {
        $customer_session_id = 'customer_session_id_example_2'; // string | The unique identifier for this session
        $body = new \TalonOne\Client\Model\NewCustomerSession([
            'profileId' => 'example_prof_id',
            'state' => \TalonOne\Client\Model\NewCustomerSession::STATE_OPEN,
            'total' => 3.14
        ]);
        try {
            
            $result = $this->apiInstance->updateCustomerSession($customer_session_id, $body, false);
            print_r($result);
        } catch (Exception $e) {
            echo 'Exception when calling IntegrationApi->updateCustomerSession: ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for updateCustomerSessionV2
     *
     * Update a Customer Session.
     *
     */
    public function testUpdateCustomerSessionV2()
    {
        $customer_session_id = 'customer_session_id_example'; // string | The unique identifier for this session
        $customer_session = new \TalonOne\Client\Model\NewCustomerSessionV2([
            'profileId' => 'example_prof_id',
            'couponCodes' => [
                'Cool-Summer!'
            ],
            'cartItems' => [
                new \TalonOne\Client\Model\CartItem([
                    'name' => 'Hawaiian Pizza',
                    'sku' => 'piz-hw-001',
                    'quantity' => 1,
                    'price' => 5.85
                ])
            ]
        ]);
        $body = new \TalonOne\Client\Model\IntegrationRequest([
            'customerSession' => $customer_session,
            // Optional list of requested information to be present on the response.
            // See lib/Model/IntegrationRequest.php#getResponseContentAllowableValues for full list 
            'responseContent' => [
                \TalonOne\Client\Model\IntegrationRequest::RESPONSE_CONTENT_RULE_FAILURE_REASONS,
                \TalonOne\Client\Model\IntegrationRequest::RESPONSE_CONTENT_COUPONS
            ]
        ]);
        
        try {
            
            $integration_state = $this->apiInstance->updateCustomerSessionV2($customer_session_id, $body);
            print_r($integration_state);

            // Parsing the returned effects list, please consult https://developers.talon.one/Integration-API/handling-effects-v2 for the full list of effects and their corresponding properties
            foreach ($integration_state->getEffects() as $effect) {
                if ("addLoyaltyPoints" == $effect->getEffectType()) {
                    // Initiating right props instance according to the effect type
                    $props = new \TalonOne\Client\Model\AddLoyaltyPointsEffectProps((array) $effect->getProps());
                   
                    // Access the specific effect's properties
                    echo $props->getName(), ':: ', $props->getRecipientIntegrationId(), ' just earned ',  $props->getValue(), ' points', PHP_EOL;
                }
                if ("acceptCoupon" == $effect->getEffectType()) {
                  // Initiating right props instance according to the effect type
                  $props = new \TalonOne\Client\Model\AcceptCouponEffectProps((array) $effect->getProps());
                  // work with AcceptCouponEffectProps' properties
                  // ...
                }
                if ("rejectCoupon" == $effect->getEffectType()) {
                  // Initiating right props instance according to the effect type
                  $props = new \TalonOne\Client\Model\RejectCouponEffectProps((array) $effect->getProps());
                  echo $props->getValue(), ':: ', $props->getRejectionReason(), PHP_EOL;
                }
            }
        } catch (Exception $e) {
            echo 'Exception when calling IntegrationApi->updateCustomerSessionV2: ', $e->getMessage(), PHP_EOL;
        }
    }
}
