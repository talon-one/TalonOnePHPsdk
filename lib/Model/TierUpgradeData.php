<?php
/**
 * TierUpgradeData
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * TierUpgradeData Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TierUpgradeData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TierUpgradeData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customerProfileID' => 'string',
        'loyaltyProgramID' => 'int',
        'subledgerID' => 'string',
        'currentTier' => 'string',
        'currentPoints' => 'float',
        'oldTier' => 'string',
        'pointsRequiredToTheNextTier' => 'float',
        'nextTier' => 'string',
        'tierExpirationDate' => '\DateTime',
        'timestampOfTierChange' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'customerProfileID' => null,
        'loyaltyProgramID' => 'int64',
        'subledgerID' => null,
        'currentTier' => null,
        'currentPoints' => null,
        'oldTier' => null,
        'pointsRequiredToTheNextTier' => null,
        'nextTier' => null,
        'tierExpirationDate' => 'date-time',
        'timestampOfTierChange' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customerProfileID' => 'CustomerProfileID',
        'loyaltyProgramID' => 'LoyaltyProgramID',
        'subledgerID' => 'SubledgerID',
        'currentTier' => 'CurrentTier',
        'currentPoints' => 'CurrentPoints',
        'oldTier' => 'OldTier',
        'pointsRequiredToTheNextTier' => 'PointsRequiredToTheNextTier',
        'nextTier' => 'NextTier',
        'tierExpirationDate' => 'TierExpirationDate',
        'timestampOfTierChange' => 'TimestampOfTierChange'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customerProfileID' => 'setCustomerProfileID',
        'loyaltyProgramID' => 'setLoyaltyProgramID',
        'subledgerID' => 'setSubledgerID',
        'currentTier' => 'setCurrentTier',
        'currentPoints' => 'setCurrentPoints',
        'oldTier' => 'setOldTier',
        'pointsRequiredToTheNextTier' => 'setPointsRequiredToTheNextTier',
        'nextTier' => 'setNextTier',
        'tierExpirationDate' => 'setTierExpirationDate',
        'timestampOfTierChange' => 'setTimestampOfTierChange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customerProfileID' => 'getCustomerProfileID',
        'loyaltyProgramID' => 'getLoyaltyProgramID',
        'subledgerID' => 'getSubledgerID',
        'currentTier' => 'getCurrentTier',
        'currentPoints' => 'getCurrentPoints',
        'oldTier' => 'getOldTier',
        'pointsRequiredToTheNextTier' => 'getPointsRequiredToTheNextTier',
        'nextTier' => 'getNextTier',
        'tierExpirationDate' => 'getTierExpirationDate',
        'timestampOfTierChange' => 'getTimestampOfTierChange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customerProfileID'] = isset($data['customerProfileID']) ? $data['customerProfileID'] : null;
        $this->container['loyaltyProgramID'] = isset($data['loyaltyProgramID']) ? $data['loyaltyProgramID'] : null;
        $this->container['subledgerID'] = isset($data['subledgerID']) ? $data['subledgerID'] : '';
        $this->container['currentTier'] = isset($data['currentTier']) ? $data['currentTier'] : null;
        $this->container['currentPoints'] = isset($data['currentPoints']) ? $data['currentPoints'] : null;
        $this->container['oldTier'] = isset($data['oldTier']) ? $data['oldTier'] : null;
        $this->container['pointsRequiredToTheNextTier'] = isset($data['pointsRequiredToTheNextTier']) ? $data['pointsRequiredToTheNextTier'] : null;
        $this->container['nextTier'] = isset($data['nextTier']) ? $data['nextTier'] : null;
        $this->container['tierExpirationDate'] = isset($data['tierExpirationDate']) ? $data['tierExpirationDate'] : null;
        $this->container['timestampOfTierChange'] = isset($data['timestampOfTierChange']) ? $data['timestampOfTierChange'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customerProfileID'] === null) {
            $invalidProperties[] = "'customerProfileID' can't be null";
        }
        if ($this->container['loyaltyProgramID'] === null) {
            $invalidProperties[] = "'loyaltyProgramID' can't be null";
        }
        if (($this->container['loyaltyProgramID'] < 1)) {
            $invalidProperties[] = "invalid value for 'loyaltyProgramID', must be bigger than or equal to 1.";
        }

        if ($this->container['subledgerID'] === null) {
            $invalidProperties[] = "'subledgerID' can't be null";
        }
        if ($this->container['currentTier'] === null) {
            $invalidProperties[] = "'currentTier' can't be null";
        }
        if ($this->container['currentPoints'] === null) {
            $invalidProperties[] = "'currentPoints' can't be null";
        }
        if ($this->container['tierExpirationDate'] === null) {
            $invalidProperties[] = "'tierExpirationDate' can't be null";
        }
        if ($this->container['timestampOfTierChange'] === null) {
            $invalidProperties[] = "'timestampOfTierChange' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customerProfileID
     *
     * @return string
     */
    public function getCustomerProfileID()
    {
        return $this->container['customerProfileID'];
    }

    /**
     * Sets customerProfileID
     *
     * @param string $customerProfileID The integration ID of the customer profile whose tier was upgraded.
     *
     * @return $this
     */
    public function setCustomerProfileID($customerProfileID)
    {
        $this->container['customerProfileID'] = $customerProfileID;

        return $this;
    }

    /**
     * Gets loyaltyProgramID
     *
     * @return int
     */
    public function getLoyaltyProgramID()
    {
        return $this->container['loyaltyProgramID'];
    }

    /**
     * Sets loyaltyProgramID
     *
     * @param int $loyaltyProgramID The ID of the loyalty program.
     *
     * @return $this
     */
    public function setLoyaltyProgramID($loyaltyProgramID)
    {

        if (($loyaltyProgramID < 1)) {
            throw new \InvalidArgumentException('invalid value for $loyaltyProgramID when calling TierUpgradeData., must be bigger than or equal to 1.');
        }

        $this->container['loyaltyProgramID'] = $loyaltyProgramID;

        return $this;
    }

    /**
     * Gets subledgerID
     *
     * @return string
     */
    public function getSubledgerID()
    {
        return $this->container['subledgerID'];
    }

    /**
     * Sets subledgerID
     *
     * @param string $subledgerID The ID of the subledger, when applicable. If this field is empty, the main ledger is used.
     *
     * @return $this
     */
    public function setSubledgerID($subledgerID)
    {
        $this->container['subledgerID'] = $subledgerID;

        return $this;
    }

    /**
     * Gets currentTier
     *
     * @return string
     */
    public function getCurrentTier()
    {
        return $this->container['currentTier'];
    }

    /**
     * Sets currentTier
     *
     * @param string $currentTier The name of the customer's current tier.
     *
     * @return $this
     */
    public function setCurrentTier($currentTier)
    {
        $this->container['currentTier'] = $currentTier;

        return $this;
    }

    /**
     * Gets currentPoints
     *
     * @return float
     */
    public function getCurrentPoints()
    {
        return $this->container['currentPoints'];
    }

    /**
     * Sets currentPoints
     *
     * @param float $currentPoints The number of points the customer had at the time of tier upgrade.
     *
     * @return $this
     */
    public function setCurrentPoints($currentPoints)
    {
        $this->container['currentPoints'] = $currentPoints;

        return $this;
    }

    /**
     * Gets oldTier
     *
     * @return string|null
     */
    public function getOldTier()
    {
        return $this->container['oldTier'];
    }

    /**
     * Sets oldTier
     *
     * @param string|null $oldTier The name of the customer's previous tier.
     *
     * @return $this
     */
    public function setOldTier($oldTier)
    {
        $this->container['oldTier'] = $oldTier;

        return $this;
    }

    /**
     * Gets pointsRequiredToTheNextTier
     *
     * @return float|null
     */
    public function getPointsRequiredToTheNextTier()
    {
        return $this->container['pointsRequiredToTheNextTier'];
    }

    /**
     * Sets pointsRequiredToTheNextTier
     *
     * @param float|null $pointsRequiredToTheNextTier The number of points needed for a customer to reach the next tier.
     *
     * @return $this
     */
    public function setPointsRequiredToTheNextTier($pointsRequiredToTheNextTier)
    {
        $this->container['pointsRequiredToTheNextTier'] = $pointsRequiredToTheNextTier;

        return $this;
    }

    /**
     * Gets nextTier
     *
     * @return string|null
     */
    public function getNextTier()
    {
        return $this->container['nextTier'];
    }

    /**
     * Sets nextTier
     *
     * @param string|null $nextTier The name of the customer's next tier.
     *
     * @return $this
     */
    public function setNextTier($nextTier)
    {
        $this->container['nextTier'] = $nextTier;

        return $this;
    }

    /**
     * Gets tierExpirationDate
     *
     * @return \DateTime
     */
    public function getTierExpirationDate()
    {
        return $this->container['tierExpirationDate'];
    }

    /**
     * Sets tierExpirationDate
     *
     * @param \DateTime $tierExpirationDate The exact date and time the tier expires.
     *
     * @return $this
     */
    public function setTierExpirationDate($tierExpirationDate)
    {
        $this->container['tierExpirationDate'] = $tierExpirationDate;

        return $this;
    }

    /**
     * Gets timestampOfTierChange
     *
     * @return \DateTime
     */
    public function getTimestampOfTierChange()
    {
        return $this->container['timestampOfTierChange'];
    }

    /**
     * Sets timestampOfTierChange
     *
     * @param \DateTime $timestampOfTierChange The exact date and time the tier was changed.
     *
     * @return $this
     */
    public function setTimestampOfTierChange($timestampOfTierChange)
    {
        $this->container['timestampOfTierChange'] = $timestampOfTierChange;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


