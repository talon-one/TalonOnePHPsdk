<?php
/**
 * CampaignAnalytics
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CampaignAnalytics Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignAnalytics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CampaignAnalytics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date' => '\DateTime',
        'campaign_revenue' => 'float',
        'total_campaign_revenue' => 'float',
        'campaign_refund' => 'float',
        'total_campaign_refund' => 'float',
        'campaign_discount_costs' => 'float',
        'total_campaign_discount_costs' => 'float',
        'campaign_refunded_discounts' => 'float',
        'total_campaign_refunded_discounts' => 'float',
        'campaign_free_items' => 'int',
        'total_campaign_free_items' => 'int',
        'coupon_redemptions' => 'int',
        'total_coupon_redemptions' => 'int',
        'coupon_rolledback_redemptions' => 'int',
        'total_coupon_rolledback_redemptions' => 'int',
        'referral_redemptions' => 'int',
        'total_referral_redemptions' => 'int',
        'coupons_created' => 'int',
        'total_coupons_created' => 'int',
        'referrals_created' => 'int',
        'total_referrals_created' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'date' => 'date-time',
        'campaign_revenue' => null,
        'total_campaign_revenue' => null,
        'campaign_refund' => null,
        'total_campaign_refund' => null,
        'campaign_discount_costs' => null,
        'total_campaign_discount_costs' => null,
        'campaign_refunded_discounts' => null,
        'total_campaign_refunded_discounts' => null,
        'campaign_free_items' => null,
        'total_campaign_free_items' => null,
        'coupon_redemptions' => null,
        'total_coupon_redemptions' => null,
        'coupon_rolledback_redemptions' => null,
        'total_coupon_rolledback_redemptions' => null,
        'referral_redemptions' => null,
        'total_referral_redemptions' => null,
        'coupons_created' => null,
        'total_coupons_created' => null,
        'referrals_created' => null,
        'total_referrals_created' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'campaign_revenue' => 'campaignRevenue',
        'total_campaign_revenue' => 'totalCampaignRevenue',
        'campaign_refund' => 'campaignRefund',
        'total_campaign_refund' => 'totalCampaignRefund',
        'campaign_discount_costs' => 'campaignDiscountCosts',
        'total_campaign_discount_costs' => 'totalCampaignDiscountCosts',
        'campaign_refunded_discounts' => 'campaignRefundedDiscounts',
        'total_campaign_refunded_discounts' => 'totalCampaignRefundedDiscounts',
        'campaign_free_items' => 'campaignFreeItems',
        'total_campaign_free_items' => 'totalCampaignFreeItems',
        'coupon_redemptions' => 'couponRedemptions',
        'total_coupon_redemptions' => 'totalCouponRedemptions',
        'coupon_rolledback_redemptions' => 'couponRolledbackRedemptions',
        'total_coupon_rolledback_redemptions' => 'totalCouponRolledbackRedemptions',
        'referral_redemptions' => 'referralRedemptions',
        'total_referral_redemptions' => 'totalReferralRedemptions',
        'coupons_created' => 'couponsCreated',
        'total_coupons_created' => 'totalCouponsCreated',
        'referrals_created' => 'referralsCreated',
        'total_referrals_created' => 'totalReferralsCreated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'campaign_revenue' => 'setCampaignRevenue',
        'total_campaign_revenue' => 'setTotalCampaignRevenue',
        'campaign_refund' => 'setCampaignRefund',
        'total_campaign_refund' => 'setTotalCampaignRefund',
        'campaign_discount_costs' => 'setCampaignDiscountCosts',
        'total_campaign_discount_costs' => 'setTotalCampaignDiscountCosts',
        'campaign_refunded_discounts' => 'setCampaignRefundedDiscounts',
        'total_campaign_refunded_discounts' => 'setTotalCampaignRefundedDiscounts',
        'campaign_free_items' => 'setCampaignFreeItems',
        'total_campaign_free_items' => 'setTotalCampaignFreeItems',
        'coupon_redemptions' => 'setCouponRedemptions',
        'total_coupon_redemptions' => 'setTotalCouponRedemptions',
        'coupon_rolledback_redemptions' => 'setCouponRolledbackRedemptions',
        'total_coupon_rolledback_redemptions' => 'setTotalCouponRolledbackRedemptions',
        'referral_redemptions' => 'setReferralRedemptions',
        'total_referral_redemptions' => 'setTotalReferralRedemptions',
        'coupons_created' => 'setCouponsCreated',
        'total_coupons_created' => 'setTotalCouponsCreated',
        'referrals_created' => 'setReferralsCreated',
        'total_referrals_created' => 'setTotalReferralsCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'campaign_revenue' => 'getCampaignRevenue',
        'total_campaign_revenue' => 'getTotalCampaignRevenue',
        'campaign_refund' => 'getCampaignRefund',
        'total_campaign_refund' => 'getTotalCampaignRefund',
        'campaign_discount_costs' => 'getCampaignDiscountCosts',
        'total_campaign_discount_costs' => 'getTotalCampaignDiscountCosts',
        'campaign_refunded_discounts' => 'getCampaignRefundedDiscounts',
        'total_campaign_refunded_discounts' => 'getTotalCampaignRefundedDiscounts',
        'campaign_free_items' => 'getCampaignFreeItems',
        'total_campaign_free_items' => 'getTotalCampaignFreeItems',
        'coupon_redemptions' => 'getCouponRedemptions',
        'total_coupon_redemptions' => 'getTotalCouponRedemptions',
        'coupon_rolledback_redemptions' => 'getCouponRolledbackRedemptions',
        'total_coupon_rolledback_redemptions' => 'getTotalCouponRolledbackRedemptions',
        'referral_redemptions' => 'getReferralRedemptions',
        'total_referral_redemptions' => 'getTotalReferralRedemptions',
        'coupons_created' => 'getCouponsCreated',
        'total_coupons_created' => 'getTotalCouponsCreated',
        'referrals_created' => 'getReferralsCreated',
        'total_referrals_created' => 'getTotalReferralsCreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['campaign_revenue'] = isset($data['campaign_revenue']) ? $data['campaign_revenue'] : null;
        $this->container['total_campaign_revenue'] = isset($data['total_campaign_revenue']) ? $data['total_campaign_revenue'] : null;
        $this->container['campaign_refund'] = isset($data['campaign_refund']) ? $data['campaign_refund'] : null;
        $this->container['total_campaign_refund'] = isset($data['total_campaign_refund']) ? $data['total_campaign_refund'] : null;
        $this->container['campaign_discount_costs'] = isset($data['campaign_discount_costs']) ? $data['campaign_discount_costs'] : null;
        $this->container['total_campaign_discount_costs'] = isset($data['total_campaign_discount_costs']) ? $data['total_campaign_discount_costs'] : null;
        $this->container['campaign_refunded_discounts'] = isset($data['campaign_refunded_discounts']) ? $data['campaign_refunded_discounts'] : null;
        $this->container['total_campaign_refunded_discounts'] = isset($data['total_campaign_refunded_discounts']) ? $data['total_campaign_refunded_discounts'] : null;
        $this->container['campaign_free_items'] = isset($data['campaign_free_items']) ? $data['campaign_free_items'] : null;
        $this->container['total_campaign_free_items'] = isset($data['total_campaign_free_items']) ? $data['total_campaign_free_items'] : null;
        $this->container['coupon_redemptions'] = isset($data['coupon_redemptions']) ? $data['coupon_redemptions'] : null;
        $this->container['total_coupon_redemptions'] = isset($data['total_coupon_redemptions']) ? $data['total_coupon_redemptions'] : null;
        $this->container['coupon_rolledback_redemptions'] = isset($data['coupon_rolledback_redemptions']) ? $data['coupon_rolledback_redemptions'] : null;
        $this->container['total_coupon_rolledback_redemptions'] = isset($data['total_coupon_rolledback_redemptions']) ? $data['total_coupon_rolledback_redemptions'] : null;
        $this->container['referral_redemptions'] = isset($data['referral_redemptions']) ? $data['referral_redemptions'] : null;
        $this->container['total_referral_redemptions'] = isset($data['total_referral_redemptions']) ? $data['total_referral_redemptions'] : null;
        $this->container['coupons_created'] = isset($data['coupons_created']) ? $data['coupons_created'] : null;
        $this->container['total_coupons_created'] = isset($data['total_coupons_created']) ? $data['total_coupons_created'] : null;
        $this->container['referrals_created'] = isset($data['referrals_created']) ? $data['referrals_created'] : null;
        $this->container['total_referrals_created'] = isset($data['total_referrals_created']) ? $data['total_referrals_created'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['campaign_revenue'] === null) {
            $invalidProperties[] = "'campaign_revenue' can't be null";
        }
        if ($this->container['total_campaign_revenue'] === null) {
            $invalidProperties[] = "'total_campaign_revenue' can't be null";
        }
        if ($this->container['campaign_refund'] === null) {
            $invalidProperties[] = "'campaign_refund' can't be null";
        }
        if ($this->container['total_campaign_refund'] === null) {
            $invalidProperties[] = "'total_campaign_refund' can't be null";
        }
        if ($this->container['campaign_discount_costs'] === null) {
            $invalidProperties[] = "'campaign_discount_costs' can't be null";
        }
        if ($this->container['total_campaign_discount_costs'] === null) {
            $invalidProperties[] = "'total_campaign_discount_costs' can't be null";
        }
        if ($this->container['campaign_refunded_discounts'] === null) {
            $invalidProperties[] = "'campaign_refunded_discounts' can't be null";
        }
        if ($this->container['total_campaign_refunded_discounts'] === null) {
            $invalidProperties[] = "'total_campaign_refunded_discounts' can't be null";
        }
        if ($this->container['campaign_free_items'] === null) {
            $invalidProperties[] = "'campaign_free_items' can't be null";
        }
        if ($this->container['total_campaign_free_items'] === null) {
            $invalidProperties[] = "'total_campaign_free_items' can't be null";
        }
        if ($this->container['coupon_redemptions'] === null) {
            $invalidProperties[] = "'coupon_redemptions' can't be null";
        }
        if ($this->container['total_coupon_redemptions'] === null) {
            $invalidProperties[] = "'total_coupon_redemptions' can't be null";
        }
        if ($this->container['coupon_rolledback_redemptions'] === null) {
            $invalidProperties[] = "'coupon_rolledback_redemptions' can't be null";
        }
        if ($this->container['total_coupon_rolledback_redemptions'] === null) {
            $invalidProperties[] = "'total_coupon_rolledback_redemptions' can't be null";
        }
        if ($this->container['referral_redemptions'] === null) {
            $invalidProperties[] = "'referral_redemptions' can't be null";
        }
        if ($this->container['total_referral_redemptions'] === null) {
            $invalidProperties[] = "'total_referral_redemptions' can't be null";
        }
        if ($this->container['coupons_created'] === null) {
            $invalidProperties[] = "'coupons_created' can't be null";
        }
        if ($this->container['total_coupons_created'] === null) {
            $invalidProperties[] = "'total_coupons_created' can't be null";
        }
        if ($this->container['referrals_created'] === null) {
            $invalidProperties[] = "'referrals_created' can't be null";
        }
        if ($this->container['total_referrals_created'] === null) {
            $invalidProperties[] = "'total_referrals_created' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets campaign_revenue
     *
     * @return float
     */
    public function getCampaignRevenue()
    {
        return $this->container['campaign_revenue'];
    }

    /**
     * Sets campaign_revenue
     *
     * @param float $campaign_revenue Amount of revenue in this campaign (for coupon or discount sessions).
     *
     * @return $this
     */
    public function setCampaignRevenue($campaign_revenue)
    {
        $this->container['campaign_revenue'] = $campaign_revenue;

        return $this;
    }

    /**
     * Gets total_campaign_revenue
     *
     * @return float
     */
    public function getTotalCampaignRevenue()
    {
        return $this->container['total_campaign_revenue'];
    }

    /**
     * Sets total_campaign_revenue
     *
     * @param float $total_campaign_revenue Amount of revenue in this campaign since it began (for coupon or discount sessions).
     *
     * @return $this
     */
    public function setTotalCampaignRevenue($total_campaign_revenue)
    {
        $this->container['total_campaign_revenue'] = $total_campaign_revenue;

        return $this;
    }

    /**
     * Gets campaign_refund
     *
     * @return float
     */
    public function getCampaignRefund()
    {
        return $this->container['campaign_refund'];
    }

    /**
     * Sets campaign_refund
     *
     * @param float $campaign_refund Amount of refunds in this campaign (for coupon or discount sessions).
     *
     * @return $this
     */
    public function setCampaignRefund($campaign_refund)
    {
        $this->container['campaign_refund'] = $campaign_refund;

        return $this;
    }

    /**
     * Gets total_campaign_refund
     *
     * @return float
     */
    public function getTotalCampaignRefund()
    {
        return $this->container['total_campaign_refund'];
    }

    /**
     * Sets total_campaign_refund
     *
     * @param float $total_campaign_refund Amount of refunds in this campaign since it began (for coupon or discount sessions).
     *
     * @return $this
     */
    public function setTotalCampaignRefund($total_campaign_refund)
    {
        $this->container['total_campaign_refund'] = $total_campaign_refund;

        return $this;
    }

    /**
     * Gets campaign_discount_costs
     *
     * @return float
     */
    public function getCampaignDiscountCosts()
    {
        return $this->container['campaign_discount_costs'];
    }

    /**
     * Sets campaign_discount_costs
     *
     * @param float $campaign_discount_costs Amount of cost caused by discounts given in the campaign.
     *
     * @return $this
     */
    public function setCampaignDiscountCosts($campaign_discount_costs)
    {
        $this->container['campaign_discount_costs'] = $campaign_discount_costs;

        return $this;
    }

    /**
     * Gets total_campaign_discount_costs
     *
     * @return float
     */
    public function getTotalCampaignDiscountCosts()
    {
        return $this->container['total_campaign_discount_costs'];
    }

    /**
     * Sets total_campaign_discount_costs
     *
     * @param float $total_campaign_discount_costs Amount of cost caused by discounts given in the campaign since it began.
     *
     * @return $this
     */
    public function setTotalCampaignDiscountCosts($total_campaign_discount_costs)
    {
        $this->container['total_campaign_discount_costs'] = $total_campaign_discount_costs;

        return $this;
    }

    /**
     * Gets campaign_refunded_discounts
     *
     * @return float
     */
    public function getCampaignRefundedDiscounts()
    {
        return $this->container['campaign_refunded_discounts'];
    }

    /**
     * Sets campaign_refunded_discounts
     *
     * @param float $campaign_refunded_discounts Amount of discounts rolledback due to refund in the campaign.
     *
     * @return $this
     */
    public function setCampaignRefundedDiscounts($campaign_refunded_discounts)
    {
        $this->container['campaign_refunded_discounts'] = $campaign_refunded_discounts;

        return $this;
    }

    /**
     * Gets total_campaign_refunded_discounts
     *
     * @return float
     */
    public function getTotalCampaignRefundedDiscounts()
    {
        return $this->container['total_campaign_refunded_discounts'];
    }

    /**
     * Sets total_campaign_refunded_discounts
     *
     * @param float $total_campaign_refunded_discounts Amount of discounts rolledback due to refund in the campaign since it began.
     *
     * @return $this
     */
    public function setTotalCampaignRefundedDiscounts($total_campaign_refunded_discounts)
    {
        $this->container['total_campaign_refunded_discounts'] = $total_campaign_refunded_discounts;

        return $this;
    }

    /**
     * Gets campaign_free_items
     *
     * @return int
     */
    public function getCampaignFreeItems()
    {
        return $this->container['campaign_free_items'];
    }

    /**
     * Sets campaign_free_items
     *
     * @param int $campaign_free_items Amount of free items given in the campaign.
     *
     * @return $this
     */
    public function setCampaignFreeItems($campaign_free_items)
    {
        $this->container['campaign_free_items'] = $campaign_free_items;

        return $this;
    }

    /**
     * Gets total_campaign_free_items
     *
     * @return int
     */
    public function getTotalCampaignFreeItems()
    {
        return $this->container['total_campaign_free_items'];
    }

    /**
     * Sets total_campaign_free_items
     *
     * @param int $total_campaign_free_items Amount of free items given in the campaign since it began.
     *
     * @return $this
     */
    public function setTotalCampaignFreeItems($total_campaign_free_items)
    {
        $this->container['total_campaign_free_items'] = $total_campaign_free_items;

        return $this;
    }

    /**
     * Gets coupon_redemptions
     *
     * @return int
     */
    public function getCouponRedemptions()
    {
        return $this->container['coupon_redemptions'];
    }

    /**
     * Sets coupon_redemptions
     *
     * @param int $coupon_redemptions Number of coupon redemptions in the campaign.
     *
     * @return $this
     */
    public function setCouponRedemptions($coupon_redemptions)
    {
        $this->container['coupon_redemptions'] = $coupon_redemptions;

        return $this;
    }

    /**
     * Gets total_coupon_redemptions
     *
     * @return int
     */
    public function getTotalCouponRedemptions()
    {
        return $this->container['total_coupon_redemptions'];
    }

    /**
     * Sets total_coupon_redemptions
     *
     * @param int $total_coupon_redemptions Number of coupon redemptions in the campaign since it began.
     *
     * @return $this
     */
    public function setTotalCouponRedemptions($total_coupon_redemptions)
    {
        $this->container['total_coupon_redemptions'] = $total_coupon_redemptions;

        return $this;
    }

    /**
     * Gets coupon_rolledback_redemptions
     *
     * @return int
     */
    public function getCouponRolledbackRedemptions()
    {
        return $this->container['coupon_rolledback_redemptions'];
    }

    /**
     * Sets coupon_rolledback_redemptions
     *
     * @param int $coupon_rolledback_redemptions Number of coupon redemptions that have been rolled back (due to canceling closed session) in the campaign.
     *
     * @return $this
     */
    public function setCouponRolledbackRedemptions($coupon_rolledback_redemptions)
    {
        $this->container['coupon_rolledback_redemptions'] = $coupon_rolledback_redemptions;

        return $this;
    }

    /**
     * Gets total_coupon_rolledback_redemptions
     *
     * @return int
     */
    public function getTotalCouponRolledbackRedemptions()
    {
        return $this->container['total_coupon_rolledback_redemptions'];
    }

    /**
     * Sets total_coupon_rolledback_redemptions
     *
     * @param int $total_coupon_rolledback_redemptions Number of coupon redemptions that have been rolled back (due to canceling closed session) in the campaign since it began.
     *
     * @return $this
     */
    public function setTotalCouponRolledbackRedemptions($total_coupon_rolledback_redemptions)
    {
        $this->container['total_coupon_rolledback_redemptions'] = $total_coupon_rolledback_redemptions;

        return $this;
    }

    /**
     * Gets referral_redemptions
     *
     * @return int
     */
    public function getReferralRedemptions()
    {
        return $this->container['referral_redemptions'];
    }

    /**
     * Sets referral_redemptions
     *
     * @param int $referral_redemptions Number of referral redemptions in the campaign.
     *
     * @return $this
     */
    public function setReferralRedemptions($referral_redemptions)
    {
        $this->container['referral_redemptions'] = $referral_redemptions;

        return $this;
    }

    /**
     * Gets total_referral_redemptions
     *
     * @return int
     */
    public function getTotalReferralRedemptions()
    {
        return $this->container['total_referral_redemptions'];
    }

    /**
     * Sets total_referral_redemptions
     *
     * @param int $total_referral_redemptions Number of referral redemptions in the campaign since it began.
     *
     * @return $this
     */
    public function setTotalReferralRedemptions($total_referral_redemptions)
    {
        $this->container['total_referral_redemptions'] = $total_referral_redemptions;

        return $this;
    }

    /**
     * Gets coupons_created
     *
     * @return int
     */
    public function getCouponsCreated()
    {
        return $this->container['coupons_created'];
    }

    /**
     * Sets coupons_created
     *
     * @param int $coupons_created Number of coupons created in the campaign by the rule engine.
     *
     * @return $this
     */
    public function setCouponsCreated($coupons_created)
    {
        $this->container['coupons_created'] = $coupons_created;

        return $this;
    }

    /**
     * Gets total_coupons_created
     *
     * @return int
     */
    public function getTotalCouponsCreated()
    {
        return $this->container['total_coupons_created'];
    }

    /**
     * Sets total_coupons_created
     *
     * @param int $total_coupons_created Number of coupons created in the campaign by the rule engine since it began.
     *
     * @return $this
     */
    public function setTotalCouponsCreated($total_coupons_created)
    {
        $this->container['total_coupons_created'] = $total_coupons_created;

        return $this;
    }

    /**
     * Gets referrals_created
     *
     * @return int
     */
    public function getReferralsCreated()
    {
        return $this->container['referrals_created'];
    }

    /**
     * Sets referrals_created
     *
     * @param int $referrals_created Number of referrals created in the campaign by the rule engine.
     *
     * @return $this
     */
    public function setReferralsCreated($referrals_created)
    {
        $this->container['referrals_created'] = $referrals_created;

        return $this;
    }

    /**
     * Gets total_referrals_created
     *
     * @return int
     */
    public function getTotalReferralsCreated()
    {
        return $this->container['total_referrals_created'];
    }

    /**
     * Sets total_referrals_created
     *
     * @param int $total_referrals_created Number of referrals created in the campaign by the rule engine since it began.
     *
     * @return $this
     */
    public function setTotalReferralsCreated($total_referrals_created)
    {
        $this->container['total_referrals_created'] = $total_referrals_created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


