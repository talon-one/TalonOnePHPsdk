<?php
/**
 * ModelReturn
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * ModelReturn Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModelReturn implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Return';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'applicationId' => 'int',
        'accountId' => 'int',
        'returnedCartItems' => '\TalonOne\Client\Model\ReturnedCartItem[]',
        'eventId' => 'int',
        'sessionId' => 'int',
        'sessionIntegrationId' => 'string',
        'profileId' => 'int',
        'profileIntegrationId' => 'string',
        'createdBy' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created' => 'date-time',
        'applicationId' => null,
        'accountId' => null,
        'returnedCartItems' => null,
        'eventId' => null,
        'sessionId' => null,
        'sessionIntegrationId' => null,
        'profileId' => null,
        'profileIntegrationId' => null,
        'createdBy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'applicationId' => 'applicationId',
        'accountId' => 'accountId',
        'returnedCartItems' => 'returnedCartItems',
        'eventId' => 'eventId',
        'sessionId' => 'sessionId',
        'sessionIntegrationId' => 'sessionIntegrationId',
        'profileId' => 'profileId',
        'profileIntegrationId' => 'profileIntegrationId',
        'createdBy' => 'createdBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'applicationId' => 'setApplicationId',
        'accountId' => 'setAccountId',
        'returnedCartItems' => 'setReturnedCartItems',
        'eventId' => 'setEventId',
        'sessionId' => 'setSessionId',
        'sessionIntegrationId' => 'setSessionIntegrationId',
        'profileId' => 'setProfileId',
        'profileIntegrationId' => 'setProfileIntegrationId',
        'createdBy' => 'setCreatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'applicationId' => 'getApplicationId',
        'accountId' => 'getAccountId',
        'returnedCartItems' => 'getReturnedCartItems',
        'eventId' => 'getEventId',
        'sessionId' => 'getSessionId',
        'sessionIntegrationId' => 'getSessionIntegrationId',
        'profileId' => 'getProfileId',
        'profileIntegrationId' => 'getProfileIntegrationId',
        'createdBy' => 'getCreatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['applicationId'] = isset($data['applicationId']) ? $data['applicationId'] : null;
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['returnedCartItems'] = isset($data['returnedCartItems']) ? $data['returnedCartItems'] : null;
        $this->container['eventId'] = isset($data['eventId']) ? $data['eventId'] : null;
        $this->container['sessionId'] = isset($data['sessionId']) ? $data['sessionId'] : null;
        $this->container['sessionIntegrationId'] = isset($data['sessionIntegrationId']) ? $data['sessionIntegrationId'] : null;
        $this->container['profileId'] = isset($data['profileId']) ? $data['profileId'] : null;
        $this->container['profileIntegrationId'] = isset($data['profileIntegrationId']) ? $data['profileIntegrationId'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['applicationId'] === null) {
            $invalidProperties[] = "'applicationId' can't be null";
        }
        if ($this->container['accountId'] === null) {
            $invalidProperties[] = "'accountId' can't be null";
        }
        if ($this->container['returnedCartItems'] === null) {
            $invalidProperties[] = "'returnedCartItems' can't be null";
        }
        if ($this->container['eventId'] === null) {
            $invalidProperties[] = "'eventId' can't be null";
        }
        if ($this->container['sessionId'] === null) {
            $invalidProperties[] = "'sessionId' can't be null";
        }
        if ($this->container['sessionIntegrationId'] === null) {
            $invalidProperties[] = "'sessionIntegrationId' can't be null";
        }
        if ((mb_strlen($this->container['sessionIntegrationId']) > 1000)) {
            $invalidProperties[] = "invalid value for 'sessionIntegrationId', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['profileIntegrationId']) && (mb_strlen($this->container['profileIntegrationId']) > 1000)) {
            $invalidProperties[] = "invalid value for 'profileIntegrationId', the character length must be smaller than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The exact moment this entity was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets applicationId
     *
     * @return int
     */
    public function getApplicationId()
    {
        return $this->container['applicationId'];
    }

    /**
     * Sets applicationId
     *
     * @param int $applicationId The ID of the application that owns this entity.
     *
     * @return $this
     */
    public function setApplicationId($applicationId)
    {
        $this->container['applicationId'] = $applicationId;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int $accountId The ID of the account that owns this entity.
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets returnedCartItems
     *
     * @return \TalonOne\Client\Model\ReturnedCartItem[]
     */
    public function getReturnedCartItems()
    {
        return $this->container['returnedCartItems'];
    }

    /**
     * Sets returnedCartItems
     *
     * @param \TalonOne\Client\Model\ReturnedCartItem[] $returnedCartItems List of cart items to be returned.
     *
     * @return $this
     */
    public function setReturnedCartItems($returnedCartItems)
    {
        $this->container['returnedCartItems'] = $returnedCartItems;

        return $this;
    }

    /**
     * Gets eventId
     *
     * @return int
     */
    public function getEventId()
    {
        return $this->container['eventId'];
    }

    /**
     * Sets eventId
     *
     * @param int $eventId The event ID of that was generated for this return.
     *
     * @return $this
     */
    public function setEventId($eventId)
    {
        $this->container['eventId'] = $eventId;

        return $this;
    }

    /**
     * Gets sessionId
     *
     * @return int
     */
    public function getSessionId()
    {
        return $this->container['sessionId'];
    }

    /**
     * Sets sessionId
     *
     * @param int $sessionId The internal ID of the session this return was requested on.
     *
     * @return $this
     */
    public function setSessionId($sessionId)
    {
        $this->container['sessionId'] = $sessionId;

        return $this;
    }

    /**
     * Gets sessionIntegrationId
     *
     * @return string
     */
    public function getSessionIntegrationId()
    {
        return $this->container['sessionIntegrationId'];
    }

    /**
     * Sets sessionIntegrationId
     *
     * @param string $sessionIntegrationId The integration ID of the session this return was requested on.
     *
     * @return $this
     */
    public function setSessionIntegrationId($sessionIntegrationId)
    {
        if ((mb_strlen($sessionIntegrationId) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $sessionIntegrationId when calling ModelReturn., must be smaller than or equal to 1000.');
        }

        $this->container['sessionIntegrationId'] = $sessionIntegrationId;

        return $this;
    }

    /**
     * Gets profileId
     *
     * @return int|null
     */
    public function getProfileId()
    {
        return $this->container['profileId'];
    }

    /**
     * Sets profileId
     *
     * @param int|null $profileId The internal ID of the profile this return was requested on.
     *
     * @return $this
     */
    public function setProfileId($profileId)
    {
        $this->container['profileId'] = $profileId;

        return $this;
    }

    /**
     * Gets profileIntegrationId
     *
     * @return string|null
     */
    public function getProfileIntegrationId()
    {
        return $this->container['profileIntegrationId'];
    }

    /**
     * Sets profileIntegrationId
     *
     * @param string|null $profileIntegrationId The integration ID of the profile this return was requested on.
     *
     * @return $this
     */
    public function setProfileIntegrationId($profileIntegrationId)
    {
        if (!is_null($profileIntegrationId) && (mb_strlen($profileIntegrationId) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $profileIntegrationId when calling ModelReturn., must be smaller than or equal to 1000.');
        }

        $this->container['profileIntegrationId'] = $profileIntegrationId;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return int|null
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param int|null $createdBy ID of the user who requested this return.
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


