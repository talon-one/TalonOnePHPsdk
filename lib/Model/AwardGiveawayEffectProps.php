<?php
/**
 * AwardGiveawayEffectProps
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * AwardGiveawayEffectProps Class Doc Comment
 *
 * @category Class
 * @description The properties specific to the \&quot;awardGiveaway\&quot; effect. This effect contains information on the giveaway item, and which profile it was awarded to.
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AwardGiveawayEffectProps implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AwardGiveawayEffectProps';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'poolId' => 'int',
        'poolName' => 'string',
        'recipientIntegrationId' => 'string',
        'giveawayId' => 'int',
        'code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'poolId' => null,
        'poolName' => null,
        'recipientIntegrationId' => null,
        'giveawayId' => null,
        'code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'poolId' => 'poolId',
        'poolName' => 'poolName',
        'recipientIntegrationId' => 'recipientIntegrationId',
        'giveawayId' => 'giveawayId',
        'code' => 'code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'poolId' => 'setPoolId',
        'poolName' => 'setPoolName',
        'recipientIntegrationId' => 'setRecipientIntegrationId',
        'giveawayId' => 'setGiveawayId',
        'code' => 'setCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'poolId' => 'getPoolId',
        'poolName' => 'getPoolName',
        'recipientIntegrationId' => 'getRecipientIntegrationId',
        'giveawayId' => 'getGiveawayId',
        'code' => 'getCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['poolId'] = isset($data['poolId']) ? $data['poolId'] : null;
        $this->container['poolName'] = isset($data['poolName']) ? $data['poolName'] : null;
        $this->container['recipientIntegrationId'] = isset($data['recipientIntegrationId']) ? $data['recipientIntegrationId'] : null;
        $this->container['giveawayId'] = isset($data['giveawayId']) ? $data['giveawayId'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['poolId'] === null) {
            $invalidProperties[] = "'poolId' can't be null";
        }
        if ($this->container['poolName'] === null) {
            $invalidProperties[] = "'poolName' can't be null";
        }
        if ($this->container['recipientIntegrationId'] === null) {
            $invalidProperties[] = "'recipientIntegrationId' can't be null";
        }
        if ((mb_strlen($this->container['recipientIntegrationId']) > 1000)) {
            $invalidProperties[] = "invalid value for 'recipientIntegrationId', the character length must be smaller than or equal to 1000.";
        }

        if ($this->container['giveawayId'] === null) {
            $invalidProperties[] = "'giveawayId' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets poolId
     *
     * @return int
     */
    public function getPoolId()
    {
        return $this->container['poolId'];
    }

    /**
     * Sets poolId
     *
     * @param int $poolId The ID of the giveaways pool the code was taken from.
     *
     * @return $this
     */
    public function setPoolId($poolId)
    {
        $this->container['poolId'] = $poolId;

        return $this;
    }

    /**
     * Gets poolName
     *
     * @return string
     */
    public function getPoolName()
    {
        return $this->container['poolName'];
    }

    /**
     * Sets poolName
     *
     * @param string $poolName The name of the giveaways pool the code was taken from.
     *
     * @return $this
     */
    public function setPoolName($poolName)
    {
        $this->container['poolName'] = $poolName;

        return $this;
    }

    /**
     * Gets recipientIntegrationId
     *
     * @return string
     */
    public function getRecipientIntegrationId()
    {
        return $this->container['recipientIntegrationId'];
    }

    /**
     * Sets recipientIntegrationId
     *
     * @param string $recipientIntegrationId The integration ID of the profile that was awarded the giveaway.
     *
     * @return $this
     */
    public function setRecipientIntegrationId($recipientIntegrationId)
    {
        if ((mb_strlen($recipientIntegrationId) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $recipientIntegrationId when calling AwardGiveawayEffectProps., must be smaller than or equal to 1000.');
        }

        $this->container['recipientIntegrationId'] = $recipientIntegrationId;

        return $this;
    }

    /**
     * Gets giveawayId
     *
     * @return int
     */
    public function getGiveawayId()
    {
        return $this->container['giveawayId'];
    }

    /**
     * Sets giveawayId
     *
     * @param int $giveawayId The internal ID for the giveaway that was awarded.
     *
     * @return $this
     */
    public function setGiveawayId($giveawayId)
    {
        $this->container['giveawayId'] = $giveawayId;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The giveaway code that was awarded.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


