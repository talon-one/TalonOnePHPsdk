<?php
/**
 * PriceDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * PriceDetail Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PriceDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PriceDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'price' => 'float',
        'adjustmentReferenceId' => 'string',
        'adjustmentEffectiveFrom' => '\DateTime',
        'adjustmentEffectiveUntil' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'price' => 'float',
        'adjustmentReferenceId' => 'uuid',
        'adjustmentEffectiveFrom' => 'date-time',
        'adjustmentEffectiveUntil' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'price' => 'price',
        'adjustmentReferenceId' => 'adjustmentReferenceId',
        'adjustmentEffectiveFrom' => 'adjustmentEffectiveFrom',
        'adjustmentEffectiveUntil' => 'adjustmentEffectiveUntil'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'price' => 'setPrice',
        'adjustmentReferenceId' => 'setAdjustmentReferenceId',
        'adjustmentEffectiveFrom' => 'setAdjustmentEffectiveFrom',
        'adjustmentEffectiveUntil' => 'setAdjustmentEffectiveUntil'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'price' => 'getPrice',
        'adjustmentReferenceId' => 'getAdjustmentReferenceId',
        'adjustmentEffectiveFrom' => 'getAdjustmentEffectiveFrom',
        'adjustmentEffectiveUntil' => 'getAdjustmentEffectiveUntil'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['adjustmentReferenceId'] = isset($data['adjustmentReferenceId']) ? $data['adjustmentReferenceId'] : null;
        $this->container['adjustmentEffectiveFrom'] = isset($data['adjustmentEffectiveFrom']) ? $data['adjustmentEffectiveFrom'] : null;
        $this->container['adjustmentEffectiveUntil'] = isset($data['adjustmentEffectiveUntil']) ? $data['adjustmentEffectiveUntil'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price The value of this price type.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets adjustmentReferenceId
     *
     * @return string|null
     */
    public function getAdjustmentReferenceId()
    {
        return $this->container['adjustmentReferenceId'];
    }

    /**
     * Sets adjustmentReferenceId
     *
     * @param string|null $adjustmentReferenceId The reference identifier of the selected price adjustment for this SKU.
     *
     * @return $this
     */
    public function setAdjustmentReferenceId($adjustmentReferenceId)
    {
        $this->container['adjustmentReferenceId'] = $adjustmentReferenceId;

        return $this;
    }

    /**
     * Gets adjustmentEffectiveFrom
     *
     * @return \DateTime|null
     */
    public function getAdjustmentEffectiveFrom()
    {
        return $this->container['adjustmentEffectiveFrom'];
    }

    /**
     * Sets adjustmentEffectiveFrom
     *
     * @param \DateTime|null $adjustmentEffectiveFrom The date and time from which the price adjustment is effective.
     *
     * @return $this
     */
    public function setAdjustmentEffectiveFrom($adjustmentEffectiveFrom)
    {
        $this->container['adjustmentEffectiveFrom'] = $adjustmentEffectiveFrom;

        return $this;
    }

    /**
     * Gets adjustmentEffectiveUntil
     *
     * @return \DateTime|null
     */
    public function getAdjustmentEffectiveUntil()
    {
        return $this->container['adjustmentEffectiveUntil'];
    }

    /**
     * Sets adjustmentEffectiveUntil
     *
     * @param \DateTime|null $adjustmentEffectiveUntil The date and time until which the price adjustment is effective.
     *
     * @return $this
     */
    public function setAdjustmentEffectiveUntil($adjustmentEffectiveUntil)
    {
        $this->container['adjustmentEffectiveUntil'] = $adjustmentEffectiveUntil;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


