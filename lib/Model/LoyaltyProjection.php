<?php
/**
 * LoyaltyProjection
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * LoyaltyProjection Class Doc Comment
 *
 * @category Class
 * @description Group of all loyalty points expected in the future.
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LoyaltyProjection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoyaltyProjection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'projections' => '\TalonOne\Client\Model\LoyaltyProjectionData[]',
        'totalExpiringPoints' => 'float',
        'totalActivatingPoints' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'projections' => null,
        'totalExpiringPoints' => null,
        'totalActivatingPoints' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'projections' => 'projections',
        'totalExpiringPoints' => 'totalExpiringPoints',
        'totalActivatingPoints' => 'totalActivatingPoints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'projections' => 'setProjections',
        'totalExpiringPoints' => 'setTotalExpiringPoints',
        'totalActivatingPoints' => 'setTotalActivatingPoints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'projections' => 'getProjections',
        'totalExpiringPoints' => 'getTotalExpiringPoints',
        'totalActivatingPoints' => 'getTotalActivatingPoints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['projections'] = isset($data['projections']) ? $data['projections'] : null;
        $this->container['totalExpiringPoints'] = isset($data['totalExpiringPoints']) ? $data['totalExpiringPoints'] : null;
        $this->container['totalActivatingPoints'] = isset($data['totalActivatingPoints']) ? $data['totalActivatingPoints'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['totalExpiringPoints'] === null) {
            $invalidProperties[] = "'totalExpiringPoints' can't be null";
        }
        if ($this->container['totalActivatingPoints'] === null) {
            $invalidProperties[] = "'totalActivatingPoints' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets projections
     *
     * @return \TalonOne\Client\Model\LoyaltyProjectionData[]|null
     */
    public function getProjections()
    {
        return $this->container['projections'];
    }

    /**
     * Sets projections
     *
     * @param \TalonOne\Client\Model\LoyaltyProjectionData[]|null $projections projections
     *
     * @return $this
     */
    public function setProjections($projections)
    {
        $this->container['projections'] = $projections;

        return $this;
    }

    /**
     * Gets totalExpiringPoints
     *
     * @return float
     */
    public function getTotalExpiringPoints()
    {
        return $this->container['totalExpiringPoints'];
    }

    /**
     * Sets totalExpiringPoints
     *
     * @param float $totalExpiringPoints Sum of points to be expired by the projection date set in the query parameter.
     *
     * @return $this
     */
    public function setTotalExpiringPoints($totalExpiringPoints)
    {
        $this->container['totalExpiringPoints'] = $totalExpiringPoints;

        return $this;
    }

    /**
     * Gets totalActivatingPoints
     *
     * @return float
     */
    public function getTotalActivatingPoints()
    {
        return $this->container['totalActivatingPoints'];
    }

    /**
     * Sets totalActivatingPoints
     *
     * @param float $totalActivatingPoints Sum of points to be active by the projection date set in the query parameter.
     *
     * @return $this
     */
    public function setTotalActivatingPoints($totalActivatingPoints)
    {
        $this->container['totalActivatingPoints'] = $totalActivatingPoints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


