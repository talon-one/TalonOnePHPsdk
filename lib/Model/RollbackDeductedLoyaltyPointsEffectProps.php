<?php
/**
 * RollbackDeductedLoyaltyPointsEffectProps
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * RollbackDeductedLoyaltyPointsEffectProps Class Doc Comment
 *
 * @category Class
 * @description The properties specific to the \&quot;rollbackDeductedLoyaltyPoints\&quot; effect. This effect is triggered whenever a previously closed session is cancelled and a deductLoyaltyPoints effect was revoked.
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RollbackDeductedLoyaltyPointsEffectProps implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RollbackDeductedLoyaltyPointsEffectProps';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'programId' => 'int',
        'subLedgerId' => 'string',
        'value' => 'float',
        'recipientIntegrationId' => 'string',
        'startDate' => '\DateTime',
        'expiryDate' => '\DateTime',
        'transactionUUID' => 'string',
        'cardIdentifier' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'programId' => null,
        'subLedgerId' => null,
        'value' => null,
        'recipientIntegrationId' => null,
        'startDate' => 'date-time',
        'expiryDate' => 'date-time',
        'transactionUUID' => null,
        'cardIdentifier' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'programId' => 'programId',
        'subLedgerId' => 'subLedgerId',
        'value' => 'value',
        'recipientIntegrationId' => 'recipientIntegrationId',
        'startDate' => 'startDate',
        'expiryDate' => 'expiryDate',
        'transactionUUID' => 'transactionUUID',
        'cardIdentifier' => 'cardIdentifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'programId' => 'setProgramId',
        'subLedgerId' => 'setSubLedgerId',
        'value' => 'setValue',
        'recipientIntegrationId' => 'setRecipientIntegrationId',
        'startDate' => 'setStartDate',
        'expiryDate' => 'setExpiryDate',
        'transactionUUID' => 'setTransactionUUID',
        'cardIdentifier' => 'setCardIdentifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'programId' => 'getProgramId',
        'subLedgerId' => 'getSubLedgerId',
        'value' => 'getValue',
        'recipientIntegrationId' => 'getRecipientIntegrationId',
        'startDate' => 'getStartDate',
        'expiryDate' => 'getExpiryDate',
        'transactionUUID' => 'getTransactionUUID',
        'cardIdentifier' => 'getCardIdentifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['programId'] = isset($data['programId']) ? $data['programId'] : null;
        $this->container['subLedgerId'] = isset($data['subLedgerId']) ? $data['subLedgerId'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['recipientIntegrationId'] = isset($data['recipientIntegrationId']) ? $data['recipientIntegrationId'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['expiryDate'] = isset($data['expiryDate']) ? $data['expiryDate'] : null;
        $this->container['transactionUUID'] = isset($data['transactionUUID']) ? $data['transactionUUID'] : null;
        $this->container['cardIdentifier'] = isset($data['cardIdentifier']) ? $data['cardIdentifier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['programId'] === null) {
            $invalidProperties[] = "'programId' can't be null";
        }
        if ($this->container['subLedgerId'] === null) {
            $invalidProperties[] = "'subLedgerId' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['recipientIntegrationId'] === null) {
            $invalidProperties[] = "'recipientIntegrationId' can't be null";
        }
        if ((mb_strlen($this->container['recipientIntegrationId']) > 1000)) {
            $invalidProperties[] = "invalid value for 'recipientIntegrationId', the character length must be smaller than or equal to 1000.";
        }

        if ($this->container['transactionUUID'] === null) {
            $invalidProperties[] = "'transactionUUID' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets programId
     *
     * @return int
     */
    public function getProgramId()
    {
        return $this->container['programId'];
    }

    /**
     * Sets programId
     *
     * @param int $programId The ID of the loyalty program where these points were reimbursed.
     *
     * @return $this
     */
    public function setProgramId($programId)
    {
        $this->container['programId'] = $programId;

        return $this;
    }

    /**
     * Gets subLedgerId
     *
     * @return string
     */
    public function getSubLedgerId()
    {
        return $this->container['subLedgerId'];
    }

    /**
     * Sets subLedgerId
     *
     * @param string $subLedgerId The ID of the subledger within the loyalty program where these points were reimbursed.
     *
     * @return $this
     */
    public function setSubLedgerId($subLedgerId)
    {
        $this->container['subLedgerId'] = $subLedgerId;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float $value The amount of reimbursed points that were added.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets recipientIntegrationId
     *
     * @return string
     */
    public function getRecipientIntegrationId()
    {
        return $this->container['recipientIntegrationId'];
    }

    /**
     * Sets recipientIntegrationId
     *
     * @param string $recipientIntegrationId The user for whom these points were reimbursed.
     *
     * @return $this
     */
    public function setRecipientIntegrationId($recipientIntegrationId)
    {
        if ((mb_strlen($recipientIntegrationId) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $recipientIntegrationId when calling RollbackDeductedLoyaltyPointsEffectProps., must be smaller than or equal to 1000.');
        }

        $this->container['recipientIntegrationId'] = $recipientIntegrationId;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate Date after which the reimbursed points will be valid.
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets expiryDate
     *
     * @return \DateTime|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiryDate'];
    }

    /**
     * Sets expiryDate
     *
     * @param \DateTime|null $expiryDate Date after which the reimbursed points will expire.
     *
     * @return $this
     */
    public function setExpiryDate($expiryDate)
    {
        $this->container['expiryDate'] = $expiryDate;

        return $this;
    }

    /**
     * Gets transactionUUID
     *
     * @return string
     */
    public function getTransactionUUID()
    {
        return $this->container['transactionUUID'];
    }

    /**
     * Sets transactionUUID
     *
     * @param string $transactionUUID The identifier of 'addition' entries added to the ledger as the `deductLoyaltyPoints` effect is rolled back.
     *
     * @return $this
     */
    public function setTransactionUUID($transactionUUID)
    {
        $this->container['transactionUUID'] = $transactionUUID;

        return $this;
    }

    /**
     * Gets cardIdentifier
     *
     * @return string|null
     */
    public function getCardIdentifier()
    {
        return $this->container['cardIdentifier'];
    }

    /**
     * Sets cardIdentifier
     *
     * @param string|null $cardIdentifier The card on which these points were added.
     *
     * @return $this
     */
    public function setCardIdentifier($cardIdentifier)
    {
        $this->container['cardIdentifier'] = $cardIdentifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


