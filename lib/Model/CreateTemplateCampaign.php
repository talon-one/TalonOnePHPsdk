<?php
/**
 * CreateTemplateCampaign
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * CreateTemplateCampaign Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CreateTemplateCampaign implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateTemplateCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'templateId' => 'int',
        'campaignAttributesOverrides' => 'object',
        'templateParamValues' => '\TalonOne\Client\Model\Binding[]',
        'limitOverrides' => '\TalonOne\Client\Model\LimitConfig[]',
        'campaignGroups' => 'int[]',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'templateId' => null,
        'campaignAttributesOverrides' => null,
        'templateParamValues' => null,
        'limitOverrides' => null,
        'campaignGroups' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'templateId' => 'templateId',
        'campaignAttributesOverrides' => 'campaignAttributesOverrides',
        'templateParamValues' => 'templateParamValues',
        'limitOverrides' => 'limitOverrides',
        'campaignGroups' => 'campaignGroups',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'templateId' => 'setTemplateId',
        'campaignAttributesOverrides' => 'setCampaignAttributesOverrides',
        'templateParamValues' => 'setTemplateParamValues',
        'limitOverrides' => 'setLimitOverrides',
        'campaignGroups' => 'setCampaignGroups',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'templateId' => 'getTemplateId',
        'campaignAttributesOverrides' => 'getCampaignAttributesOverrides',
        'templateParamValues' => 'getTemplateParamValues',
        'limitOverrides' => 'getLimitOverrides',
        'campaignGroups' => 'getCampaignGroups',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['templateId'] = isset($data['templateId']) ? $data['templateId'] : null;
        $this->container['campaignAttributesOverrides'] = isset($data['campaignAttributesOverrides']) ? $data['campaignAttributesOverrides'] : null;
        $this->container['templateParamValues'] = isset($data['templateParamValues']) ? $data['templateParamValues'] : null;
        $this->container['limitOverrides'] = isset($data['limitOverrides']) ? $data['limitOverrides'] : null;
        $this->container['campaignGroups'] = isset($data['campaignGroups']) ? $data['campaignGroups'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['templateId'] === null) {
            $invalidProperties[] = "'templateId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A user-facing name for this campaign.
     *
     * @return $this
     */
    public function setName($name)
    {

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateTemplateCampaign., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A detailed description of the campaign.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets templateId
     *
     * @return int
     */
    public function getTemplateId()
    {
        return $this->container['templateId'];
    }

    /**
     * Sets templateId
     *
     * @param int $templateId The ID of the Campaign Template which will be used in order to create the Campaign.
     *
     * @return $this
     */
    public function setTemplateId($templateId)
    {
        $this->container['templateId'] = $templateId;

        return $this;
    }

    /**
     * Gets campaignAttributesOverrides
     *
     * @return object|null
     */
    public function getCampaignAttributesOverrides()
    {
        return $this->container['campaignAttributesOverrides'];
    }

    /**
     * Sets campaignAttributesOverrides
     *
     * @param object|null $campaignAttributesOverrides Custom Campaign Attributes. If the Campaign Template defines the same values, they will be overridden.
     *
     * @return $this
     */
    public function setCampaignAttributesOverrides($campaignAttributesOverrides)
    {
        $this->container['campaignAttributesOverrides'] = $campaignAttributesOverrides;

        return $this;
    }

    /**
     * Gets templateParamValues
     *
     * @return \TalonOne\Client\Model\Binding[]|null
     */
    public function getTemplateParamValues()
    {
        return $this->container['templateParamValues'];
    }

    /**
     * Sets templateParamValues
     *
     * @param \TalonOne\Client\Model\Binding[]|null $templateParamValues Actual values to replace the template placeholder values in the Ruleset bindings. Values for all Template Parameters must be provided.
     *
     * @return $this
     */
    public function setTemplateParamValues($templateParamValues)
    {
        $this->container['templateParamValues'] = $templateParamValues;

        return $this;
    }

    /**
     * Gets limitOverrides
     *
     * @return \TalonOne\Client\Model\LimitConfig[]|null
     */
    public function getLimitOverrides()
    {
        return $this->container['limitOverrides'];
    }

    /**
     * Sets limitOverrides
     *
     * @param \TalonOne\Client\Model\LimitConfig[]|null $limitOverrides Limits for this Campaign. If the Campaign Template or Application define default values for the same limits, they will be overridden.
     *
     * @return $this
     */
    public function setLimitOverrides($limitOverrides)
    {
        $this->container['limitOverrides'] = $limitOverrides;

        return $this;
    }

    /**
     * Gets campaignGroups
     *
     * @return int[]|null
     */
    public function getCampaignGroups()
    {
        return $this->container['campaignGroups'];
    }

    /**
     * Sets campaignGroups
     *
     * @param int[]|null $campaignGroups The IDs of the [campaign groups](https://docs.talon.one/docs/product/account/managing-campaign-groups/) this campaign belongs to.
     *
     * @return $this
     */
    public function setCampaignGroups($campaignGroups)
    {
        $this->container['campaignGroups'] = $campaignGroups;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags A list of tags for the campaign. If the campaign template has tags, they will be overridden by this list.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


