<?php
/**
 * TimePoint
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * TimePoint Class Doc Comment
 *
 * @category Class
 * @description The absolute duration after which the achievement ends and resets for a particular customer profile.  **Note**: The duration follows the time zone of the Application this achievement belongs to.
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TimePoint implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimePoint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'month' => 'int',
        'dayOfMonth' => 'int',
        'dayOfWeek' => 'int',
        'hour' => 'int',
        'minute' => 'int',
        'second' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'month' => 'int64',
        'dayOfMonth' => 'int64',
        'dayOfWeek' => 'int64',
        'hour' => 'int64',
        'minute' => 'int64',
        'second' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'month' => 'month',
        'dayOfMonth' => 'dayOfMonth',
        'dayOfWeek' => 'dayOfWeek',
        'hour' => 'hour',
        'minute' => 'minute',
        'second' => 'second'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'month' => 'setMonth',
        'dayOfMonth' => 'setDayOfMonth',
        'dayOfWeek' => 'setDayOfWeek',
        'hour' => 'setHour',
        'minute' => 'setMinute',
        'second' => 'setSecond'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'month' => 'getMonth',
        'dayOfMonth' => 'getDayOfMonth',
        'dayOfWeek' => 'getDayOfWeek',
        'hour' => 'getHour',
        'minute' => 'getMinute',
        'second' => 'getSecond'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['month'] = isset($data['month']) ? $data['month'] : null;
        $this->container['dayOfMonth'] = isset($data['dayOfMonth']) ? $data['dayOfMonth'] : null;
        $this->container['dayOfWeek'] = isset($data['dayOfWeek']) ? $data['dayOfWeek'] : null;
        $this->container['hour'] = isset($data['hour']) ? $data['hour'] : null;
        $this->container['minute'] = isset($data['minute']) ? $data['minute'] : null;
        $this->container['second'] = isset($data['second']) ? $data['second'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['month']) && ($this->container['month'] > 12)) {
            $invalidProperties[] = "invalid value for 'month', must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['month']) && ($this->container['month'] < 1)) {
            $invalidProperties[] = "invalid value for 'month', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dayOfMonth']) && ($this->container['dayOfMonth'] > 31)) {
            $invalidProperties[] = "invalid value for 'dayOfMonth', must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['dayOfMonth']) && ($this->container['dayOfMonth'] < 1)) {
            $invalidProperties[] = "invalid value for 'dayOfMonth', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dayOfWeek']) && ($this->container['dayOfWeek'] > 7)) {
            $invalidProperties[] = "invalid value for 'dayOfWeek', must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['dayOfWeek']) && ($this->container['dayOfWeek'] < 1)) {
            $invalidProperties[] = "invalid value for 'dayOfWeek', must be bigger than or equal to 1.";
        }

        if ($this->container['hour'] === null) {
            $invalidProperties[] = "'hour' can't be null";
        }
        if ($this->container['minute'] === null) {
            $invalidProperties[] = "'minute' can't be null";
        }
        if ($this->container['second'] === null) {
            $invalidProperties[] = "'second' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets month
     *
     * @return int|null
     */
    public function getMonth()
    {
        return $this->container['month'];
    }

    /**
     * Sets month
     *
     * @param int|null $month The achievement ends and resets in this month.  **Note**: Only applicable if the period is set to `Y`.
     *
     * @return $this
     */
    public function setMonth($month)
    {

        if (!is_null($month) && ($month > 12)) {
            throw new \InvalidArgumentException('invalid value for $month when calling TimePoint., must be smaller than or equal to 12.');
        }
        if (!is_null($month) && ($month < 1)) {
            throw new \InvalidArgumentException('invalid value for $month when calling TimePoint., must be bigger than or equal to 1.');
        }

        $this->container['month'] = $month;

        return $this;
    }

    /**
     * Gets dayOfMonth
     *
     * @return int|null
     */
    public function getDayOfMonth()
    {
        return $this->container['dayOfMonth'];
    }

    /**
     * Sets dayOfMonth
     *
     * @param int|null $dayOfMonth The achievement ends and resets on this day of the month.  **Note**: Only applicable if the period is set to `Y` or `M`.
     *
     * @return $this
     */
    public function setDayOfMonth($dayOfMonth)
    {

        if (!is_null($dayOfMonth) && ($dayOfMonth > 31)) {
            throw new \InvalidArgumentException('invalid value for $dayOfMonth when calling TimePoint., must be smaller than or equal to 31.');
        }
        if (!is_null($dayOfMonth) && ($dayOfMonth < 1)) {
            throw new \InvalidArgumentException('invalid value for $dayOfMonth when calling TimePoint., must be bigger than or equal to 1.');
        }

        $this->container['dayOfMonth'] = $dayOfMonth;

        return $this;
    }

    /**
     * Gets dayOfWeek
     *
     * @return int|null
     */
    public function getDayOfWeek()
    {
        return $this->container['dayOfWeek'];
    }

    /**
     * Sets dayOfWeek
     *
     * @param int|null $dayOfWeek The achievement ends and resets on this day of the week. `1` represents `Monday` and `7` represents `Sunday`.  **Note**: Only applicable if the period is set to `W`.
     *
     * @return $this
     */
    public function setDayOfWeek($dayOfWeek)
    {

        if (!is_null($dayOfWeek) && ($dayOfWeek > 7)) {
            throw new \InvalidArgumentException('invalid value for $dayOfWeek when calling TimePoint., must be smaller than or equal to 7.');
        }
        if (!is_null($dayOfWeek) && ($dayOfWeek < 1)) {
            throw new \InvalidArgumentException('invalid value for $dayOfWeek when calling TimePoint., must be bigger than or equal to 1.');
        }

        $this->container['dayOfWeek'] = $dayOfWeek;

        return $this;
    }

    /**
     * Gets hour
     *
     * @return int
     */
    public function getHour()
    {
        return $this->container['hour'];
    }

    /**
     * Sets hour
     *
     * @param int $hour The achievement ends and resets at this hour.
     *
     * @return $this
     */
    public function setHour($hour)
    {
        $this->container['hour'] = $hour;

        return $this;
    }

    /**
     * Gets minute
     *
     * @return int
     */
    public function getMinute()
    {
        return $this->container['minute'];
    }

    /**
     * Sets minute
     *
     * @param int $minute The achievement ends and resets at this minute.
     *
     * @return $this
     */
    public function setMinute($minute)
    {
        $this->container['minute'] = $minute;

        return $this;
    }

    /**
     * Gets second
     *
     * @return int
     */
    public function getSecond()
    {
        return $this->container['second'];
    }

    /**
     * Sets second
     *
     * @param int $second The achievement ends and resets at this second.
     *
     * @return $this
     */
    public function setSecond($second)
    {
        $this->container['second'] = $second;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


