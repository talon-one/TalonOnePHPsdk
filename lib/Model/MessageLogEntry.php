<?php
/**
 * MessageLogEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * MessageLogEntry Class Doc Comment
 *
 * @category Class
 * @description Message Log.
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessageLogEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MessageLogEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'service' => 'string',
        'changeType' => 'string',
        'notificationId' => 'int',
        'notificationName' => 'string',
        'request' => '\TalonOne\Client\Model\MessageLogRequest',
        'response' => '\TalonOne\Client\Model\MessageLogResponse',
        'createdAt' => '\DateTime',
        'entityType' => 'string',
        'applicationId' => 'int',
        'loyaltyProgramId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'service' => null,
        'changeType' => null,
        'notificationId' => null,
        'notificationName' => null,
        'request' => null,
        'response' => null,
        'createdAt' => 'date-time',
        'entityType' => null,
        'applicationId' => null,
        'loyaltyProgramId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'service' => 'service',
        'changeType' => 'changeType',
        'notificationId' => 'notificationId',
        'notificationName' => 'notificationName',
        'request' => 'request',
        'response' => 'response',
        'createdAt' => 'createdAt',
        'entityType' => 'entityType',
        'applicationId' => 'applicationId',
        'loyaltyProgramId' => 'loyaltyProgramId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'service' => 'setService',
        'changeType' => 'setChangeType',
        'notificationId' => 'setNotificationId',
        'notificationName' => 'setNotificationName',
        'request' => 'setRequest',
        'response' => 'setResponse',
        'createdAt' => 'setCreatedAt',
        'entityType' => 'setEntityType',
        'applicationId' => 'setApplicationId',
        'loyaltyProgramId' => 'setLoyaltyProgramId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'service' => 'getService',
        'changeType' => 'getChangeType',
        'notificationId' => 'getNotificationId',
        'notificationName' => 'getNotificationName',
        'request' => 'getRequest',
        'response' => 'getResponse',
        'createdAt' => 'getCreatedAt',
        'entityType' => 'getEntityType',
        'applicationId' => 'getApplicationId',
        'loyaltyProgramId' => 'getLoyaltyProgramId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ENTITY_TYPE_APPLICATION = 'application';
    const ENTITY_TYPE_LOYALTY_PROGRAM = 'loyalty_program';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntityTypeAllowableValues()
    {
        return [
            self::ENTITY_TYPE_APPLICATION,
            self::ENTITY_TYPE_LOYALTY_PROGRAM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['changeType'] = isset($data['changeType']) ? $data['changeType'] : null;
        $this->container['notificationId'] = isset($data['notificationId']) ? $data['notificationId'] : null;
        $this->container['notificationName'] = isset($data['notificationName']) ? $data['notificationName'] : null;
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
        $this->container['response'] = isset($data['response']) ? $data['response'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['applicationId'] = isset($data['applicationId']) ? $data['applicationId'] : null;
        $this->container['loyaltyProgramId'] = isset($data['loyaltyProgramId']) ? $data['loyaltyProgramId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['service'] === null) {
            $invalidProperties[] = "'service' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!is_null($this->container['entityType']) && !in_array($this->container['entityType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'entityType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['applicationId']) && ($this->container['applicationId'] < 1)) {
            $invalidProperties[] = "invalid value for 'applicationId', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['loyaltyProgramId']) && ($this->container['loyaltyProgramId'] < 1)) {
            $invalidProperties[] = "invalid value for 'loyaltyProgramId', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier of the message.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string $service Name of the service that generated the log entry.
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets changeType
     *
     * @return string|null
     */
    public function getChangeType()
    {
        return $this->container['changeType'];
    }

    /**
     * Sets changeType
     *
     * @param string|null $changeType Type of change that triggered the notification.
     *
     * @return $this
     */
    public function setChangeType($changeType)
    {
        $this->container['changeType'] = $changeType;

        return $this;
    }

    /**
     * Gets notificationId
     *
     * @return int|null
     */
    public function getNotificationId()
    {
        return $this->container['notificationId'];
    }

    /**
     * Sets notificationId
     *
     * @param int|null $notificationId ID of the notification.
     *
     * @return $this
     */
    public function setNotificationId($notificationId)
    {
        $this->container['notificationId'] = $notificationId;

        return $this;
    }

    /**
     * Gets notificationName
     *
     * @return string|null
     */
    public function getNotificationName()
    {
        return $this->container['notificationName'];
    }

    /**
     * Sets notificationName
     *
     * @param string|null $notificationName The name of the notification.
     *
     * @return $this
     */
    public function setNotificationName($notificationName)
    {
        $this->container['notificationName'] = $notificationName;

        return $this;
    }

    /**
     * Gets request
     *
     * @return \TalonOne\Client\Model\MessageLogRequest|null
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param \TalonOne\Client\Model\MessageLogRequest|null $request request
     *
     * @return $this
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets response
     *
     * @return \TalonOne\Client\Model\MessageLogResponse|null
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param \TalonOne\Client\Model\MessageLogResponse|null $response response
     *
     * @return $this
     */
    public function setResponse($response)
    {
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt Timestamp when the log entry was created.
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string|null $entityType The entity type the notification is related to.
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!is_null($entityType) && !in_array($entityType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'entityType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets applicationId
     *
     * @return int|null
     */
    public function getApplicationId()
    {
        return $this->container['applicationId'];
    }

    /**
     * Sets applicationId
     *
     * @param int|null $applicationId Identifier of the Application.
     *
     * @return $this
     */
    public function setApplicationId($applicationId)
    {

        if (!is_null($applicationId) && ($applicationId < 1)) {
            throw new \InvalidArgumentException('invalid value for $applicationId when calling MessageLogEntry., must be bigger than or equal to 1.');
        }

        $this->container['applicationId'] = $applicationId;

        return $this;
    }

    /**
     * Gets loyaltyProgramId
     *
     * @return int|null
     */
    public function getLoyaltyProgramId()
    {
        return $this->container['loyaltyProgramId'];
    }

    /**
     * Sets loyaltyProgramId
     *
     * @param int|null $loyaltyProgramId Identifier of the loyalty program.
     *
     * @return $this
     */
    public function setLoyaltyProgramId($loyaltyProgramId)
    {

        if (!is_null($loyaltyProgramId) && ($loyaltyProgramId < 1)) {
            throw new \InvalidArgumentException('invalid value for $loyaltyProgramId when calling MessageLogEntry., must be bigger than or equal to 1.');
        }

        $this->container['loyaltyProgramId'] = $loyaltyProgramId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


