<?php
/**
 * CampaignVersions
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * CampaignVersions Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignVersions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CampaignVersions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'revisionFrontendState' => 'string',
        'activeRevisionId' => 'int',
        'activeRevisionVersionId' => 'int',
        'version' => 'int',
        'currentRevisionId' => 'int',
        'currentRevisionVersionId' => 'int',
        'stageRevision' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'revisionFrontendState' => null,
        'activeRevisionId' => null,
        'activeRevisionVersionId' => null,
        'version' => null,
        'currentRevisionId' => null,
        'currentRevisionVersionId' => null,
        'stageRevision' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'revisionFrontendState' => 'revisionFrontendState',
        'activeRevisionId' => 'activeRevisionId',
        'activeRevisionVersionId' => 'activeRevisionVersionId',
        'version' => 'version',
        'currentRevisionId' => 'currentRevisionId',
        'currentRevisionVersionId' => 'currentRevisionVersionId',
        'stageRevision' => 'stageRevision'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'revisionFrontendState' => 'setRevisionFrontendState',
        'activeRevisionId' => 'setActiveRevisionId',
        'activeRevisionVersionId' => 'setActiveRevisionVersionId',
        'version' => 'setVersion',
        'currentRevisionId' => 'setCurrentRevisionId',
        'currentRevisionVersionId' => 'setCurrentRevisionVersionId',
        'stageRevision' => 'setStageRevision'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'revisionFrontendState' => 'getRevisionFrontendState',
        'activeRevisionId' => 'getActiveRevisionId',
        'activeRevisionVersionId' => 'getActiveRevisionVersionId',
        'version' => 'getVersion',
        'currentRevisionId' => 'getCurrentRevisionId',
        'currentRevisionVersionId' => 'getCurrentRevisionVersionId',
        'stageRevision' => 'getStageRevision'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const REVISION_FRONTEND_STATE_REVISED = 'revised';
    const REVISION_FRONTEND_STATE_PENDING = 'pending';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRevisionFrontendStateAllowableValues()
    {
        return [
            self::REVISION_FRONTEND_STATE_REVISED,
            self::REVISION_FRONTEND_STATE_PENDING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['revisionFrontendState'] = isset($data['revisionFrontendState']) ? $data['revisionFrontendState'] : null;
        $this->container['activeRevisionId'] = isset($data['activeRevisionId']) ? $data['activeRevisionId'] : null;
        $this->container['activeRevisionVersionId'] = isset($data['activeRevisionVersionId']) ? $data['activeRevisionVersionId'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['currentRevisionId'] = isset($data['currentRevisionId']) ? $data['currentRevisionId'] : null;
        $this->container['currentRevisionVersionId'] = isset($data['currentRevisionVersionId']) ? $data['currentRevisionVersionId'] : null;
        $this->container['stageRevision'] = isset($data['stageRevision']) ? $data['stageRevision'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRevisionFrontendStateAllowableValues();
        if (!is_null($this->container['revisionFrontendState']) && !in_array($this->container['revisionFrontendState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'revisionFrontendState', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets revisionFrontendState
     *
     * @return string|null
     */
    public function getRevisionFrontendState()
    {
        return $this->container['revisionFrontendState'];
    }

    /**
     * Sets revisionFrontendState
     *
     * @param string|null $revisionFrontendState The campaign revision state displayed in the Campaign Manager.
     *
     * @return $this
     */
    public function setRevisionFrontendState($revisionFrontendState)
    {
        $allowedValues = $this->getRevisionFrontendStateAllowableValues();
        if (!is_null($revisionFrontendState) && !in_array($revisionFrontendState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'revisionFrontendState', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['revisionFrontendState'] = $revisionFrontendState;

        return $this;
    }

    /**
     * Gets activeRevisionId
     *
     * @return int|null
     */
    public function getActiveRevisionId()
    {
        return $this->container['activeRevisionId'];
    }

    /**
     * Sets activeRevisionId
     *
     * @param int|null $activeRevisionId ID of the revision that was last activated on this campaign.
     *
     * @return $this
     */
    public function setActiveRevisionId($activeRevisionId)
    {
        $this->container['activeRevisionId'] = $activeRevisionId;

        return $this;
    }

    /**
     * Gets activeRevisionVersionId
     *
     * @return int|null
     */
    public function getActiveRevisionVersionId()
    {
        return $this->container['activeRevisionVersionId'];
    }

    /**
     * Sets activeRevisionVersionId
     *
     * @param int|null $activeRevisionVersionId ID of the revision version that is active on the campaign.
     *
     * @return $this
     */
    public function setActiveRevisionVersionId($activeRevisionVersionId)
    {
        $this->container['activeRevisionVersionId'] = $activeRevisionVersionId;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int|null $version Incrementing number representing how many revisions have been activated on this campaign, starts from 0 for a new campaign.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets currentRevisionId
     *
     * @return int|null
     */
    public function getCurrentRevisionId()
    {
        return $this->container['currentRevisionId'];
    }

    /**
     * Sets currentRevisionId
     *
     * @param int|null $currentRevisionId ID of the revision currently being modified for the campaign.
     *
     * @return $this
     */
    public function setCurrentRevisionId($currentRevisionId)
    {
        $this->container['currentRevisionId'] = $currentRevisionId;

        return $this;
    }

    /**
     * Gets currentRevisionVersionId
     *
     * @return int|null
     */
    public function getCurrentRevisionVersionId()
    {
        return $this->container['currentRevisionVersionId'];
    }

    /**
     * Sets currentRevisionVersionId
     *
     * @param int|null $currentRevisionVersionId ID of the latest version applied on the current revision.
     *
     * @return $this
     */
    public function setCurrentRevisionVersionId($currentRevisionVersionId)
    {
        $this->container['currentRevisionVersionId'] = $currentRevisionVersionId;

        return $this;
    }

    /**
     * Gets stageRevision
     *
     * @return bool|null
     */
    public function getStageRevision()
    {
        return $this->container['stageRevision'];
    }

    /**
     * Sets stageRevision
     *
     * @param bool|null $stageRevision Flag for determining whether we use current revision when sending requests with staging API key.
     *
     * @return $this
     */
    public function setStageRevision($stageRevision)
    {
        $this->container['stageRevision'] = $stageRevision;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


