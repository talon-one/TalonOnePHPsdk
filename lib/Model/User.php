<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class User implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'email' => 'string',
        'accountId' => 'int',
        'inviteToken' => 'string',
        'state' => 'string',
        'name' => 'string',
        'policy' => 'string',
        'releaseUpdate' => 'bool',
        'latestFeature' => 'string',
        'roles' => 'int[]',
        'applicationNotificationSubscriptions' => 'object',
        'authMethod' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created' => 'date-time',
        'modified' => 'date-time',
        'email' => 'email',
        'accountId' => null,
        'inviteToken' => null,
        'state' => null,
        'name' => null,
        'policy' => 'acl',
        'releaseUpdate' => null,
        'latestFeature' => null,
        'roles' => null,
        'applicationNotificationSubscriptions' => null,
        'authMethod' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'modified' => 'modified',
        'email' => 'email',
        'accountId' => 'accountId',
        'inviteToken' => 'inviteToken',
        'state' => 'state',
        'name' => 'name',
        'policy' => 'policy',
        'releaseUpdate' => 'releaseUpdate',
        'latestFeature' => 'latestFeature',
        'roles' => 'roles',
        'applicationNotificationSubscriptions' => 'applicationNotificationSubscriptions',
        'authMethod' => 'authMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'email' => 'setEmail',
        'accountId' => 'setAccountId',
        'inviteToken' => 'setInviteToken',
        'state' => 'setState',
        'name' => 'setName',
        'policy' => 'setPolicy',
        'releaseUpdate' => 'setReleaseUpdate',
        'latestFeature' => 'setLatestFeature',
        'roles' => 'setRoles',
        'applicationNotificationSubscriptions' => 'setApplicationNotificationSubscriptions',
        'authMethod' => 'setAuthMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'email' => 'getEmail',
        'accountId' => 'getAccountId',
        'inviteToken' => 'getInviteToken',
        'state' => 'getState',
        'name' => 'getName',
        'policy' => 'getPolicy',
        'releaseUpdate' => 'getReleaseUpdate',
        'latestFeature' => 'getLatestFeature',
        'roles' => 'getRoles',
        'applicationNotificationSubscriptions' => 'getApplicationNotificationSubscriptions',
        'authMethod' => 'getAuthMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATE_INVITED = 'invited';
    const STATE_ACTIVE = 'active';
    const STATE_DEACTIVATED = 'deactivated';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_INVITED,
            self::STATE_ACTIVE,
            self::STATE_DEACTIVATED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['inviteToken'] = isset($data['inviteToken']) ? $data['inviteToken'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['policy'] = isset($data['policy']) ? $data['policy'] : null;
        $this->container['releaseUpdate'] = isset($data['releaseUpdate']) ? $data['releaseUpdate'] : null;
        $this->container['latestFeature'] = isset($data['latestFeature']) ? $data['latestFeature'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['applicationNotificationSubscriptions'] = isset($data['applicationNotificationSubscriptions']) ? $data['applicationNotificationSubscriptions'] : null;
        $this->container['authMethod'] = isset($data['authMethod']) ? $data['authMethod'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalidProperties[] = "'modified' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['accountId'] === null) {
            $invalidProperties[] = "'accountId' can't be null";
        }
        if ($this->container['inviteToken'] === null) {
            $invalidProperties[] = "'inviteToken' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['policy'] === null) {
            $invalidProperties[] = "'policy' can't be null";
        }
        if ($this->container['releaseUpdate'] === null) {
            $invalidProperties[] = "'releaseUpdate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID for this entity.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The exact moment this entity was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified The exact moment this entity was last modified.
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address associated with your account.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int $accountId The ID of the account that owns this entity.
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets inviteToken
     *
     * @return string
     */
    public function getInviteToken()
    {
        return $this->container['inviteToken'];
    }

    /**
     * Sets inviteToken
     *
     * @param string $inviteToken Invite token, empty if the user as already accepted their invite.
     *
     * @return $this
     */
    public function setInviteToken($inviteToken)
    {
        $this->container['inviteToken'] = $inviteToken;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Current user state.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Full name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets policy
     *
     * @return string
     */
    public function getPolicy()
    {
        return $this->container['policy'];
    }

    /**
     * Sets policy
     *
     * @param string $policy A blob of ACL JSON
     *
     * @return $this
     */
    public function setPolicy($policy)
    {
        $this->container['policy'] = $policy;

        return $this;
    }

    /**
     * Gets releaseUpdate
     *
     * @return bool
     */
    public function getReleaseUpdate()
    {
        return $this->container['releaseUpdate'];
    }

    /**
     * Sets releaseUpdate
     *
     * @param bool $releaseUpdate Update the user via email
     *
     * @return $this
     */
    public function setReleaseUpdate($releaseUpdate)
    {
        $this->container['releaseUpdate'] = $releaseUpdate;

        return $this;
    }

    /**
     * Gets latestFeature
     *
     * @return string|null
     */
    public function getLatestFeature()
    {
        return $this->container['latestFeature'];
    }

    /**
     * Sets latestFeature
     *
     * @param string|null $latestFeature Latest feature the user has been notified.
     *
     * @return $this
     */
    public function setLatestFeature($latestFeature)
    {
        $this->container['latestFeature'] = $latestFeature;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return int[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param int[]|null $roles Contains a list of all roles the user is a member of
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets applicationNotificationSubscriptions
     *
     * @return object|null
     */
    public function getApplicationNotificationSubscriptions()
    {
        return $this->container['applicationNotificationSubscriptions'];
    }

    /**
     * Sets applicationNotificationSubscriptions
     *
     * @param object|null $applicationNotificationSubscriptions applicationNotificationSubscriptions
     *
     * @return $this
     */
    public function setApplicationNotificationSubscriptions($applicationNotificationSubscriptions)
    {
        $this->container['applicationNotificationSubscriptions'] = $applicationNotificationSubscriptions;

        return $this;
    }

    /**
     * Gets authMethod
     *
     * @return string|null
     */
    public function getAuthMethod()
    {
        return $this->container['authMethod'];
    }

    /**
     * Sets authMethod
     *
     * @param string|null $authMethod The Authentication method for this user
     *
     * @return $this
     */
    public function setAuthMethod($authMethod)
    {
        $this->container['authMethod'] = $authMethod;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


