<?php
/**
 * CampaignSetBranchNode
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * CampaignSetBranchNode Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignSetBranchNode implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CampaignSetBranchNode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'name' => 'string',
        'operator' => 'string',
        'elements' => '\TalonOne\Client\Model\CampaignSetNode[]',
        'groupId' => 'int',
        'locked' => 'bool',
        'description' => 'string',
        'evaluationMode' => 'string',
        'evaluationScope' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'name' => null,
        'operator' => null,
        'elements' => null,
        'groupId' => null,
        'locked' => null,
        'description' => null,
        'evaluationMode' => null,
        'evaluationScope' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'name' => 'name',
        'operator' => 'operator',
        'elements' => 'elements',
        'groupId' => 'groupId',
        'locked' => 'locked',
        'description' => 'description',
        'evaluationMode' => 'evaluationMode',
        'evaluationScope' => 'evaluationScope'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'name' => 'setName',
        'operator' => 'setOperator',
        'elements' => 'setElements',
        'groupId' => 'setGroupId',
        'locked' => 'setLocked',
        'description' => 'setDescription',
        'evaluationMode' => 'setEvaluationMode',
        'evaluationScope' => 'setEvaluationScope'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'name' => 'getName',
        'operator' => 'getOperator',
        'elements' => 'getElements',
        'groupId' => 'getGroupId',
        'locked' => 'getLocked',
        'description' => 'getDescription',
        'evaluationMode' => 'getEvaluationMode',
        'evaluationScope' => 'getEvaluationScope'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_SET = 'SET';
    const OPERATOR_ALL = 'ALL';
    const OPERATOR_FIRST = 'FIRST';
    const EVALUATION_MODE_STACKABLE = 'stackable';
    const EVALUATION_MODE_LIST_ORDER = 'listOrder';
    const EVALUATION_MODE_LOWEST_DISCOUNT = 'lowestDiscount';
    const EVALUATION_MODE_HIGHEST_DISCOUNT = 'highestDiscount';
    const EVALUATION_SCOPE_CART_ITEM = 'cartItem';
    const EVALUATION_SCOPE_SESSION = 'session';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperatorAllowableValues()
    {
        return [
            self::OPERATOR_ALL,
            self::OPERATOR_FIRST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEvaluationModeAllowableValues()
    {
        return [
            self::EVALUATION_MODE_STACKABLE,
            self::EVALUATION_MODE_LIST_ORDER,
            self::EVALUATION_MODE_LOWEST_DISCOUNT,
            self::EVALUATION_MODE_HIGHEST_DISCOUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEvaluationScopeAllowableValues()
    {
        return [
            self::EVALUATION_SCOPE_CART_ITEM,
            self::EVALUATION_SCOPE_SESSION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['elements'] = isset($data['elements']) ? $data['elements'] : null;
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['evaluationMode'] = isset($data['evaluationMode']) ? $data['evaluationMode'] : null;
        $this->container['evaluationScope'] = isset($data['evaluationScope']) ? $data['evaluationScope'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['operator'] === null) {
            $invalidProperties[] = "'operator' can't be null";
        }
        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($this->container['operator']) && !in_array($this->container['operator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['elements'] === null) {
            $invalidProperties[] = "'elements' can't be null";
        }
        if ($this->container['groupId'] === null) {
            $invalidProperties[] = "'groupId' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalidProperties[] = "'locked' can't be null";
        }
        if ($this->container['evaluationMode'] === null) {
            $invalidProperties[] = "'evaluationMode' can't be null";
        }
        $allowedValues = $this->getEvaluationModeAllowableValues();
        if (!is_null($this->container['evaluationMode']) && !in_array($this->container['evaluationMode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'evaluationMode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['evaluationScope'] === null) {
            $invalidProperties[] = "'evaluationScope' can't be null";
        }
        $allowedValues = $this->getEvaluationScopeAllowableValues();
        if (!is_null($this->container['evaluationScope']) && !in_array($this->container['evaluationScope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'evaluationScope', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Indicates the node type.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the set.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator An indicator of how the set operates on its elements.
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $allowedValues = $this->getOperatorAllowableValues();
        if (!in_array($operator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets elements
     *
     * @return \TalonOne\Client\Model\CampaignSetNode[]
     */
    public function getElements()
    {
        return $this->container['elements'];
    }

    /**
     * Sets elements
     *
     * @param \TalonOne\Client\Model\CampaignSetNode[] $elements Child elements of this set.
     *
     * @return $this
     */
    public function setElements($elements)
    {
        $this->container['elements'] = $elements;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param int $groupId The ID of the campaign set.
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked An indicator of whether the campaign set is locked for modification.
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of the campaign set.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets evaluationMode
     *
     * @return string
     */
    public function getEvaluationMode()
    {
        return $this->container['evaluationMode'];
    }

    /**
     * Sets evaluationMode
     *
     * @param string $evaluationMode The mode by which campaigns in the campaign evaluation group are evaluated.
     *
     * @return $this
     */
    public function setEvaluationMode($evaluationMode)
    {
        $allowedValues = $this->getEvaluationModeAllowableValues();
        if (!in_array($evaluationMode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'evaluationMode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['evaluationMode'] = $evaluationMode;

        return $this;
    }

    /**
     * Gets evaluationScope
     *
     * @return string
     */
    public function getEvaluationScope()
    {
        return $this->container['evaluationScope'];
    }

    /**
     * Sets evaluationScope
     *
     * @param string $evaluationScope The evaluation scope of the campaign evaluation group.
     *
     * @return $this
     */
    public function setEvaluationScope($evaluationScope)
    {
        $allowedValues = $this->getEvaluationScopeAllowableValues();
        if (!in_array($evaluationScope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'evaluationScope', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['evaluationScope'] = $evaluationScope;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


