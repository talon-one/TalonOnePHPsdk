<?php
/**
 * AccountLimits
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * AccountLimits Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountLimits implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountLimits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'live_applications' => 'int',
        'sandbox_applications' => 'int',
        'active_campaigns' => 'int',
        'coupons' => 'int',
        'referral_codes' => 'int',
        'live_loyalty_programs' => 'int',
        'sandbox_loyalty_programs' => 'int',
        'webhooks' => 'int',
        'users' => 'int',
        'api_volume' => 'int',
        'active_rules' => 'int',
        'promotion_types' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'live_applications' => null,
        'sandbox_applications' => null,
        'active_campaigns' => null,
        'coupons' => null,
        'referral_codes' => null,
        'live_loyalty_programs' => null,
        'sandbox_loyalty_programs' => null,
        'webhooks' => null,
        'users' => null,
        'api_volume' => null,
        'active_rules' => null,
        'promotion_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'live_applications' => 'liveApplications',
        'sandbox_applications' => 'sandboxApplications',
        'active_campaigns' => 'activeCampaigns',
        'coupons' => 'coupons',
        'referral_codes' => 'referralCodes',
        'live_loyalty_programs' => 'liveLoyaltyPrograms',
        'sandbox_loyalty_programs' => 'sandboxLoyaltyPrograms',
        'webhooks' => 'webhooks',
        'users' => 'users',
        'api_volume' => 'apiVolume',
        'active_rules' => 'activeRules',
        'promotion_types' => 'promotionTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'live_applications' => 'setLiveApplications',
        'sandbox_applications' => 'setSandboxApplications',
        'active_campaigns' => 'setActiveCampaigns',
        'coupons' => 'setCoupons',
        'referral_codes' => 'setReferralCodes',
        'live_loyalty_programs' => 'setLiveLoyaltyPrograms',
        'sandbox_loyalty_programs' => 'setSandboxLoyaltyPrograms',
        'webhooks' => 'setWebhooks',
        'users' => 'setUsers',
        'api_volume' => 'setApiVolume',
        'active_rules' => 'setActiveRules',
        'promotion_types' => 'setPromotionTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'live_applications' => 'getLiveApplications',
        'sandbox_applications' => 'getSandboxApplications',
        'active_campaigns' => 'getActiveCampaigns',
        'coupons' => 'getCoupons',
        'referral_codes' => 'getReferralCodes',
        'live_loyalty_programs' => 'getLiveLoyaltyPrograms',
        'sandbox_loyalty_programs' => 'getSandboxLoyaltyPrograms',
        'webhooks' => 'getWebhooks',
        'users' => 'getUsers',
        'api_volume' => 'getApiVolume',
        'active_rules' => 'getActiveRules',
        'promotion_types' => 'getPromotionTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['live_applications'] = isset($data['live_applications']) ? $data['live_applications'] : null;
        $this->container['sandbox_applications'] = isset($data['sandbox_applications']) ? $data['sandbox_applications'] : null;
        $this->container['active_campaigns'] = isset($data['active_campaigns']) ? $data['active_campaigns'] : null;
        $this->container['coupons'] = isset($data['coupons']) ? $data['coupons'] : null;
        $this->container['referral_codes'] = isset($data['referral_codes']) ? $data['referral_codes'] : null;
        $this->container['live_loyalty_programs'] = isset($data['live_loyalty_programs']) ? $data['live_loyalty_programs'] : null;
        $this->container['sandbox_loyalty_programs'] = isset($data['sandbox_loyalty_programs']) ? $data['sandbox_loyalty_programs'] : null;
        $this->container['webhooks'] = isset($data['webhooks']) ? $data['webhooks'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['api_volume'] = isset($data['api_volume']) ? $data['api_volume'] : null;
        $this->container['active_rules'] = isset($data['active_rules']) ? $data['active_rules'] : null;
        $this->container['promotion_types'] = isset($data['promotion_types']) ? $data['promotion_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['live_applications'] === null) {
            $invalidProperties[] = "'live_applications' can't be null";
        }
        if ($this->container['sandbox_applications'] === null) {
            $invalidProperties[] = "'sandbox_applications' can't be null";
        }
        if ($this->container['active_campaigns'] === null) {
            $invalidProperties[] = "'active_campaigns' can't be null";
        }
        if ($this->container['coupons'] === null) {
            $invalidProperties[] = "'coupons' can't be null";
        }
        if ($this->container['referral_codes'] === null) {
            $invalidProperties[] = "'referral_codes' can't be null";
        }
        if ($this->container['live_loyalty_programs'] === null) {
            $invalidProperties[] = "'live_loyalty_programs' can't be null";
        }
        if ($this->container['sandbox_loyalty_programs'] === null) {
            $invalidProperties[] = "'sandbox_loyalty_programs' can't be null";
        }
        if ($this->container['webhooks'] === null) {
            $invalidProperties[] = "'webhooks' can't be null";
        }
        if ($this->container['users'] === null) {
            $invalidProperties[] = "'users' can't be null";
        }
        if ($this->container['api_volume'] === null) {
            $invalidProperties[] = "'api_volume' can't be null";
        }
        if ($this->container['promotion_types'] === null) {
            $invalidProperties[] = "'promotion_types' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets live_applications
     *
     * @return int
     */
    public function getLiveApplications()
    {
        return $this->container['live_applications'];
    }

    /**
     * Sets live_applications
     *
     * @param int $live_applications Total Number of allowed live applications in the account
     *
     * @return $this
     */
    public function setLiveApplications($live_applications)
    {
        $this->container['live_applications'] = $live_applications;

        return $this;
    }

    /**
     * Gets sandbox_applications
     *
     * @return int
     */
    public function getSandboxApplications()
    {
        return $this->container['sandbox_applications'];
    }

    /**
     * Sets sandbox_applications
     *
     * @param int $sandbox_applications Total Number of allowed sandbox applications in the account
     *
     * @return $this
     */
    public function setSandboxApplications($sandbox_applications)
    {
        $this->container['sandbox_applications'] = $sandbox_applications;

        return $this;
    }

    /**
     * Gets active_campaigns
     *
     * @return int
     */
    public function getActiveCampaigns()
    {
        return $this->container['active_campaigns'];
    }

    /**
     * Sets active_campaigns
     *
     * @param int $active_campaigns Total Number of allowed active campaigns in the account
     *
     * @return $this
     */
    public function setActiveCampaigns($active_campaigns)
    {
        $this->container['active_campaigns'] = $active_campaigns;

        return $this;
    }

    /**
     * Gets coupons
     *
     * @return int
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     *
     * @param int $coupons Total Number of allowed coupons in the account
     *
     * @return $this
     */
    public function setCoupons($coupons)
    {
        $this->container['coupons'] = $coupons;

        return $this;
    }

    /**
     * Gets referral_codes
     *
     * @return int
     */
    public function getReferralCodes()
    {
        return $this->container['referral_codes'];
    }

    /**
     * Sets referral_codes
     *
     * @param int $referral_codes Total Number of allowed referral codes in the account
     *
     * @return $this
     */
    public function setReferralCodes($referral_codes)
    {
        $this->container['referral_codes'] = $referral_codes;

        return $this;
    }

    /**
     * Gets live_loyalty_programs
     *
     * @return int
     */
    public function getLiveLoyaltyPrograms()
    {
        return $this->container['live_loyalty_programs'];
    }

    /**
     * Sets live_loyalty_programs
     *
     * @param int $live_loyalty_programs Total Number of allowed live loyalty programs in the account
     *
     * @return $this
     */
    public function setLiveLoyaltyPrograms($live_loyalty_programs)
    {
        $this->container['live_loyalty_programs'] = $live_loyalty_programs;

        return $this;
    }

    /**
     * Gets sandbox_loyalty_programs
     *
     * @return int
     */
    public function getSandboxLoyaltyPrograms()
    {
        return $this->container['sandbox_loyalty_programs'];
    }

    /**
     * Sets sandbox_loyalty_programs
     *
     * @param int $sandbox_loyalty_programs Total Number of allowed sandbox loyalty programs in the account
     *
     * @return $this
     */
    public function setSandboxLoyaltyPrograms($sandbox_loyalty_programs)
    {
        $this->container['sandbox_loyalty_programs'] = $sandbox_loyalty_programs;

        return $this;
    }

    /**
     * Gets webhooks
     *
     * @return int
     */
    public function getWebhooks()
    {
        return $this->container['webhooks'];
    }

    /**
     * Sets webhooks
     *
     * @param int $webhooks Total Number of allowed webhooks in the account
     *
     * @return $this
     */
    public function setWebhooks($webhooks)
    {
        $this->container['webhooks'] = $webhooks;

        return $this;
    }

    /**
     * Gets users
     *
     * @return int
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param int $users Total Number of allowed users in the account
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets api_volume
     *
     * @return int
     */
    public function getApiVolume()
    {
        return $this->container['api_volume'];
    }

    /**
     * Sets api_volume
     *
     * @param int $api_volume Total allowed api volume
     *
     * @return $this
     */
    public function setApiVolume($api_volume)
    {
        $this->container['api_volume'] = $api_volume;

        return $this;
    }

    /**
     * Gets active_rules
     *
     * @return int|null
     */
    public function getActiveRules()
    {
        return $this->container['active_rules'];
    }

    /**
     * Sets active_rules
     *
     * @param int|null $active_rules Total allowed active rulesets
     *
     * @return $this
     */
    public function setActiveRules($active_rules)
    {
        $this->container['active_rules'] = $active_rules;

        return $this;
    }

    /**
     * Gets promotion_types
     *
     * @return string[]
     */
    public function getPromotionTypes()
    {
        return $this->container['promotion_types'];
    }

    /**
     * Sets promotion_types
     *
     * @param string[] $promotion_types array of rulesets where webhook is used
     *
     * @return $this
     */
    public function setPromotionTypes($promotion_types)
    {
        $this->container['promotion_types'] = $promotion_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


