<?php
/**
 * Achievement
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * Achievement Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Achievement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Achievement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'name' => 'string',
        'title' => 'string',
        'description' => 'string',
        'target' => 'float',
        'period' => 'string',
        'periodEndOverride' => '\TalonOne\Client\Model\TimePoint',
        'recurrencePolicy' => 'string',
        'activationPolicy' => 'string',
        'fixedStartDate' => '\DateTime',
        'endDate' => '\DateTime',
        'campaignId' => 'int',
        'userId' => 'int',
        'createdBy' => 'string',
        'hasProgress' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created' => 'date-time',
        'name' => null,
        'title' => null,
        'description' => 'string',
        'target' => null,
        'period' => null,
        'periodEndOverride' => null,
        'recurrencePolicy' => null,
        'activationPolicy' => null,
        'fixedStartDate' => 'date-time',
        'endDate' => 'date-time',
        'campaignId' => null,
        'userId' => null,
        'createdBy' => null,
        'hasProgress' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'name' => 'name',
        'title' => 'title',
        'description' => 'description',
        'target' => 'target',
        'period' => 'period',
        'periodEndOverride' => 'periodEndOverride',
        'recurrencePolicy' => 'recurrencePolicy',
        'activationPolicy' => 'activationPolicy',
        'fixedStartDate' => 'fixedStartDate',
        'endDate' => 'endDate',
        'campaignId' => 'campaignId',
        'userId' => 'userId',
        'createdBy' => 'createdBy',
        'hasProgress' => 'hasProgress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'name' => 'setName',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'target' => 'setTarget',
        'period' => 'setPeriod',
        'periodEndOverride' => 'setPeriodEndOverride',
        'recurrencePolicy' => 'setRecurrencePolicy',
        'activationPolicy' => 'setActivationPolicy',
        'fixedStartDate' => 'setFixedStartDate',
        'endDate' => 'setEndDate',
        'campaignId' => 'setCampaignId',
        'userId' => 'setUserId',
        'createdBy' => 'setCreatedBy',
        'hasProgress' => 'setHasProgress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'name' => 'getName',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'target' => 'getTarget',
        'period' => 'getPeriod',
        'periodEndOverride' => 'getPeriodEndOverride',
        'recurrencePolicy' => 'getRecurrencePolicy',
        'activationPolicy' => 'getActivationPolicy',
        'fixedStartDate' => 'getFixedStartDate',
        'endDate' => 'getEndDate',
        'campaignId' => 'getCampaignId',
        'userId' => 'getUserId',
        'createdBy' => 'getCreatedBy',
        'hasProgress' => 'getHasProgress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RECURRENCE_POLICY_NO_RECURRENCE = 'no_recurrence';
    const RECURRENCE_POLICY_ON_EXPIRATION = 'on_expiration';
    const ACTIVATION_POLICY_USER_ACTION = 'user_action';
    const ACTIVATION_POLICY_FIXED_SCHEDULE = 'fixed_schedule';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecurrencePolicyAllowableValues()
    {
        return [
            self::RECURRENCE_POLICY_NO_RECURRENCE,
            self::RECURRENCE_POLICY_ON_EXPIRATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivationPolicyAllowableValues()
    {
        return [
            self::ACTIVATION_POLICY_USER_ACTION,
            self::ACTIVATION_POLICY_FIXED_SCHEDULE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['periodEndOverride'] = isset($data['periodEndOverride']) ? $data['periodEndOverride'] : null;
        $this->container['recurrencePolicy'] = isset($data['recurrencePolicy']) ? $data['recurrencePolicy'] : null;
        $this->container['activationPolicy'] = isset($data['activationPolicy']) ? $data['activationPolicy'] : null;
        $this->container['fixedStartDate'] = isset($data['fixedStartDate']) ? $data['fixedStartDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['campaignId'] = isset($data['campaignId']) ? $data['campaignId'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['hasProgress'] = isset($data['hasProgress']) ? $data['hasProgress'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 1000.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z]\\w+$/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /^[a-zA-Z]\\w+$/.";
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['target'] === null) {
            $invalidProperties[] = "'target' can't be null";
        }
        if ($this->container['period'] === null) {
            $invalidProperties[] = "'period' can't be null";
        }
        $allowedValues = $this->getRecurrencePolicyAllowableValues();
        if (!is_null($this->container['recurrencePolicy']) && !in_array($this->container['recurrencePolicy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'recurrencePolicy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActivationPolicyAllowableValues();
        if (!is_null($this->container['activationPolicy']) && !in_array($this->container['activationPolicy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'activationPolicy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['campaignId'] === null) {
            $invalidProperties[] = "'campaignId' can't be null";
        }
        if ($this->container['userId'] === null) {
            $invalidProperties[] = "'userId' can't be null";
        }
        if ($this->container['createdBy'] === null) {
            $invalidProperties[] = "'createdBy' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Internal ID of this entity.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The time this entity was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The internal name of the achievement used in API requests.  **Note**: The name should start with a letter. This cannot be changed after the achievement has been created.
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Achievement., must be smaller than or equal to 1000.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Achievement., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z]\\w+$/", $name))) {
            throw new \InvalidArgumentException("invalid value for $name when calling Achievement., must conform to the pattern /^[a-zA-Z]\\w+$/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The display name for the achievement in the Campaign Manager.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description of the achievement.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets target
     *
     * @return float
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param float $target The required number of actions or the transactional milestone to complete the achievement.
     *
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string $period The relative duration after which the achievement ends and resets for a particular customer profile.  **Note**: The `period` does not start when the achievement is created.  The period is a **positive real number** followed by one letter indicating the time unit.  Examples: `30s`, `40m`, `1h`, `5D`, `7W`, `10M`, `15Y`.  Available units:  - `s`: seconds - `m`: minutes - `h`: hours - `D`: days - `W`: weeks - `M`: months - `Y`: years  You can also round certain units down to the beginning of period and up to the end of period.: - `_D` for rounding down days only. Signifies the start of the day. Example: `30D_D` - `_U` for rounding up days, weeks, months and years. Signifies the end of the day, week, month or year. Example: `23W_U`  **Note**: You can either use the round down and round up option or set an absolute period.
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets periodEndOverride
     *
     * @return \TalonOne\Client\Model\TimePoint|null
     */
    public function getPeriodEndOverride()
    {
        return $this->container['periodEndOverride'];
    }

    /**
     * Sets periodEndOverride
     *
     * @param \TalonOne\Client\Model\TimePoint|null $periodEndOverride periodEndOverride
     *
     * @return $this
     */
    public function setPeriodEndOverride($periodEndOverride)
    {
        $this->container['periodEndOverride'] = $periodEndOverride;

        return $this;
    }

    /**
     * Gets recurrencePolicy
     *
     * @return string|null
     */
    public function getRecurrencePolicy()
    {
        return $this->container['recurrencePolicy'];
    }

    /**
     * Sets recurrencePolicy
     *
     * @param string|null $recurrencePolicy The policy that determines if and how the achievement recurs. - `no_recurrence`: The achievement can be completed only once. - `on_expiration`: The achievement resets after it expires and becomes available again.
     *
     * @return $this
     */
    public function setRecurrencePolicy($recurrencePolicy)
    {
        $allowedValues = $this->getRecurrencePolicyAllowableValues();
        if (!is_null($recurrencePolicy) && !in_array($recurrencePolicy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'recurrencePolicy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recurrencePolicy'] = $recurrencePolicy;

        return $this;
    }

    /**
     * Gets activationPolicy
     *
     * @return string|null
     */
    public function getActivationPolicy()
    {
        return $this->container['activationPolicy'];
    }

    /**
     * Sets activationPolicy
     *
     * @param string|null $activationPolicy The policy that determines how the achievement starts, ends, or resets. - `user_action`: The achievement ends or resets relative to when the customer started the achievement. - `fixed_schedule`: The achievement starts, ends, or resets for all customers following a fixed schedule.
     *
     * @return $this
     */
    public function setActivationPolicy($activationPolicy)
    {
        $allowedValues = $this->getActivationPolicyAllowableValues();
        if (!is_null($activationPolicy) && !in_array($activationPolicy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'activationPolicy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activationPolicy'] = $activationPolicy;

        return $this;
    }

    /**
     * Gets fixedStartDate
     *
     * @return \DateTime|null
     */
    public function getFixedStartDate()
    {
        return $this->container['fixedStartDate'];
    }

    /**
     * Sets fixedStartDate
     *
     * @param \DateTime|null $fixedStartDate The achievement's start date when `activationPolicy` is set to `fixed_schedule`.  **Note:** It must be an RFC3339 timestamp string.
     *
     * @return $this
     */
    public function setFixedStartDate($fixedStartDate)
    {
        $this->container['fixedStartDate'] = $fixedStartDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate The achievement's end date. If defined, customers cannot participate in the achievement after this date.  **Note:** It must be an RFC3339 timestamp string.
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets campaignId
     *
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId
     *
     * @param int $campaignId ID of the campaign, to which the achievement belongs to
     *
     * @return $this
     */
    public function setCampaignId($campaignId)
    {
        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int $userId ID of the user that created this achievement.
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string $createdBy Name of the user that created the achievement.  **Note**: This is not available if the user has been deleted.
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets hasProgress
     *
     * @return bool|null
     */
    public function getHasProgress()
    {
        return $this->container['hasProgress'];
    }

    /**
     * Sets hasProgress
     *
     * @param bool|null $hasProgress Indicates if a customer has made progress in the achievement.
     *
     * @return $this
     */
    public function setHasProgress($hasProgress)
    {
        $this->container['hasProgress'] = $hasProgress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


