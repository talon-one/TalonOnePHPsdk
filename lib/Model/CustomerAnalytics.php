<?php
/**
 * CustomerAnalytics
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomerAnalytics Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerAnalytics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerAnalytics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accepted_coupons' => 'int',
        'created_coupons' => 'int',
        'free_items' => 'int',
        'total_orders' => 'int',
        'total_discounted_orders' => 'int',
        'total_revenue' => 'float',
        'total_discounts' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accepted_coupons' => null,
        'created_coupons' => null,
        'free_items' => null,
        'total_orders' => null,
        'total_discounted_orders' => null,
        'total_revenue' => null,
        'total_discounts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accepted_coupons' => 'acceptedCoupons',
        'created_coupons' => 'createdCoupons',
        'free_items' => 'freeItems',
        'total_orders' => 'totalOrders',
        'total_discounted_orders' => 'totalDiscountedOrders',
        'total_revenue' => 'totalRevenue',
        'total_discounts' => 'totalDiscounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accepted_coupons' => 'setAcceptedCoupons',
        'created_coupons' => 'setCreatedCoupons',
        'free_items' => 'setFreeItems',
        'total_orders' => 'setTotalOrders',
        'total_discounted_orders' => 'setTotalDiscountedOrders',
        'total_revenue' => 'setTotalRevenue',
        'total_discounts' => 'setTotalDiscounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accepted_coupons' => 'getAcceptedCoupons',
        'created_coupons' => 'getCreatedCoupons',
        'free_items' => 'getFreeItems',
        'total_orders' => 'getTotalOrders',
        'total_discounted_orders' => 'getTotalDiscountedOrders',
        'total_revenue' => 'getTotalRevenue',
        'total_discounts' => 'getTotalDiscounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accepted_coupons'] = isset($data['accepted_coupons']) ? $data['accepted_coupons'] : null;
        $this->container['created_coupons'] = isset($data['created_coupons']) ? $data['created_coupons'] : null;
        $this->container['free_items'] = isset($data['free_items']) ? $data['free_items'] : null;
        $this->container['total_orders'] = isset($data['total_orders']) ? $data['total_orders'] : null;
        $this->container['total_discounted_orders'] = isset($data['total_discounted_orders']) ? $data['total_discounted_orders'] : null;
        $this->container['total_revenue'] = isset($data['total_revenue']) ? $data['total_revenue'] : null;
        $this->container['total_discounts'] = isset($data['total_discounts']) ? $data['total_discounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['accepted_coupons'] === null) {
            $invalidProperties[] = "'accepted_coupons' can't be null";
        }
        if ($this->container['created_coupons'] === null) {
            $invalidProperties[] = "'created_coupons' can't be null";
        }
        if ($this->container['free_items'] === null) {
            $invalidProperties[] = "'free_items' can't be null";
        }
        if ($this->container['total_orders'] === null) {
            $invalidProperties[] = "'total_orders' can't be null";
        }
        if ($this->container['total_discounted_orders'] === null) {
            $invalidProperties[] = "'total_discounted_orders' can't be null";
        }
        if ($this->container['total_revenue'] === null) {
            $invalidProperties[] = "'total_revenue' can't be null";
        }
        if ($this->container['total_discounts'] === null) {
            $invalidProperties[] = "'total_discounts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accepted_coupons
     *
     * @return int
     */
    public function getAcceptedCoupons()
    {
        return $this->container['accepted_coupons'];
    }

    /**
     * Sets accepted_coupons
     *
     * @param int $accepted_coupons Total accepted coupons for this customer
     *
     * @return $this
     */
    public function setAcceptedCoupons($accepted_coupons)
    {
        $this->container['accepted_coupons'] = $accepted_coupons;

        return $this;
    }

    /**
     * Gets created_coupons
     *
     * @return int
     */
    public function getCreatedCoupons()
    {
        return $this->container['created_coupons'];
    }

    /**
     * Sets created_coupons
     *
     * @param int $created_coupons Total created coupons for this customer
     *
     * @return $this
     */
    public function setCreatedCoupons($created_coupons)
    {
        $this->container['created_coupons'] = $created_coupons;

        return $this;
    }

    /**
     * Gets free_items
     *
     * @return int
     */
    public function getFreeItems()
    {
        return $this->container['free_items'];
    }

    /**
     * Sets free_items
     *
     * @param int $free_items Total free items given to this customer
     *
     * @return $this
     */
    public function setFreeItems($free_items)
    {
        $this->container['free_items'] = $free_items;

        return $this;
    }

    /**
     * Gets total_orders
     *
     * @return int
     */
    public function getTotalOrders()
    {
        return $this->container['total_orders'];
    }

    /**
     * Sets total_orders
     *
     * @param int $total_orders Total orders made by this customer
     *
     * @return $this
     */
    public function setTotalOrders($total_orders)
    {
        $this->container['total_orders'] = $total_orders;

        return $this;
    }

    /**
     * Gets total_discounted_orders
     *
     * @return int
     */
    public function getTotalDiscountedOrders()
    {
        return $this->container['total_discounted_orders'];
    }

    /**
     * Sets total_discounted_orders
     *
     * @param int $total_discounted_orders Total orders made by this customer that had a discount
     *
     * @return $this
     */
    public function setTotalDiscountedOrders($total_discounted_orders)
    {
        $this->container['total_discounted_orders'] = $total_discounted_orders;

        return $this;
    }

    /**
     * Gets total_revenue
     *
     * @return float
     */
    public function getTotalRevenue()
    {
        return $this->container['total_revenue'];
    }

    /**
     * Sets total_revenue
     *
     * @param float $total_revenue Total Revenue across all closed sessions
     *
     * @return $this
     */
    public function setTotalRevenue($total_revenue)
    {
        $this->container['total_revenue'] = $total_revenue;

        return $this;
    }

    /**
     * Gets total_discounts
     *
     * @return float
     */
    public function getTotalDiscounts()
    {
        return $this->container['total_discounts'];
    }

    /**
     * Sets total_discounts
     *
     * @param float $total_discounts The sum of discounts that were given across all closed sessions
     *
     * @return $this
     */
    public function setTotalDiscounts($total_discounts)
    {
        $this->container['total_discounts'] = $total_discounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


