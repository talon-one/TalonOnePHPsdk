<?php
/**
 * Environment
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * Environment Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Environment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Environment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'applicationId' => 'int',
        'slots' => '\TalonOne\Client\Model\SlotDef[]',
        'functions' => '\TalonOne\Client\Model\FunctionDef[]',
        'templates' => '\TalonOne\Client\Model\TemplateDef[]',
        'variables' => 'string',
        'giveawaysPools' => '\TalonOne\Client\Model\GiveawaysPool[]',
        'loyaltyPrograms' => '\TalonOne\Client\Model\LoyaltyProgram[]',
        'attributes' => '\TalonOne\Client\Model\Attribute[]',
        'additionalCosts' => '\TalonOne\Client\Model\AccountAdditionalCost[]',
        'audiences' => '\TalonOne\Client\Model\Audience[]',
        'collections' => '\TalonOne\Client\Model\Collection[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created' => 'date-time',
        'applicationId' => null,
        'slots' => null,
        'functions' => null,
        'templates' => null,
        'variables' => null,
        'giveawaysPools' => null,
        'loyaltyPrograms' => null,
        'attributes' => null,
        'additionalCosts' => null,
        'audiences' => null,
        'collections' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'applicationId' => 'applicationId',
        'slots' => 'slots',
        'functions' => 'functions',
        'templates' => 'templates',
        'variables' => 'variables',
        'giveawaysPools' => 'giveawaysPools',
        'loyaltyPrograms' => 'loyaltyPrograms',
        'attributes' => 'attributes',
        'additionalCosts' => 'additionalCosts',
        'audiences' => 'audiences',
        'collections' => 'collections'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'applicationId' => 'setApplicationId',
        'slots' => 'setSlots',
        'functions' => 'setFunctions',
        'templates' => 'setTemplates',
        'variables' => 'setVariables',
        'giveawaysPools' => 'setGiveawaysPools',
        'loyaltyPrograms' => 'setLoyaltyPrograms',
        'attributes' => 'setAttributes',
        'additionalCosts' => 'setAdditionalCosts',
        'audiences' => 'setAudiences',
        'collections' => 'setCollections'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'applicationId' => 'getApplicationId',
        'slots' => 'getSlots',
        'functions' => 'getFunctions',
        'templates' => 'getTemplates',
        'variables' => 'getVariables',
        'giveawaysPools' => 'getGiveawaysPools',
        'loyaltyPrograms' => 'getLoyaltyPrograms',
        'attributes' => 'getAttributes',
        'additionalCosts' => 'getAdditionalCosts',
        'audiences' => 'getAudiences',
        'collections' => 'getCollections'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['applicationId'] = isset($data['applicationId']) ? $data['applicationId'] : null;
        $this->container['slots'] = isset($data['slots']) ? $data['slots'] : null;
        $this->container['functions'] = isset($data['functions']) ? $data['functions'] : null;
        $this->container['templates'] = isset($data['templates']) ? $data['templates'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
        $this->container['giveawaysPools'] = isset($data['giveawaysPools']) ? $data['giveawaysPools'] : null;
        $this->container['loyaltyPrograms'] = isset($data['loyaltyPrograms']) ? $data['loyaltyPrograms'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['additionalCosts'] = isset($data['additionalCosts']) ? $data['additionalCosts'] : null;
        $this->container['audiences'] = isset($data['audiences']) ? $data['audiences'] : null;
        $this->container['collections'] = isset($data['collections']) ? $data['collections'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['applicationId'] === null) {
            $invalidProperties[] = "'applicationId' can't be null";
        }
        if ($this->container['slots'] === null) {
            $invalidProperties[] = "'slots' can't be null";
        }
        if ($this->container['functions'] === null) {
            $invalidProperties[] = "'functions' can't be null";
        }
        if ($this->container['templates'] === null) {
            $invalidProperties[] = "'templates' can't be null";
        }
        if ($this->container['variables'] === null) {
            $invalidProperties[] = "'variables' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The exact moment this entity was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets applicationId
     *
     * @return int
     */
    public function getApplicationId()
    {
        return $this->container['applicationId'];
    }

    /**
     * Sets applicationId
     *
     * @param int $applicationId The ID of the application that owns this entity.
     *
     * @return $this
     */
    public function setApplicationId($applicationId)
    {
        $this->container['applicationId'] = $applicationId;

        return $this;
    }

    /**
     * Gets slots
     *
     * @return \TalonOne\Client\Model\SlotDef[]
     */
    public function getSlots()
    {
        return $this->container['slots'];
    }

    /**
     * Sets slots
     *
     * @param \TalonOne\Client\Model\SlotDef[] $slots The slots defined for this application.
     *
     * @return $this
     */
    public function setSlots($slots)
    {
        $this->container['slots'] = $slots;

        return $this;
    }

    /**
     * Gets functions
     *
     * @return \TalonOne\Client\Model\FunctionDef[]
     */
    public function getFunctions()
    {
        return $this->container['functions'];
    }

    /**
     * Sets functions
     *
     * @param \TalonOne\Client\Model\FunctionDef[] $functions The functions defined for this application.
     *
     * @return $this
     */
    public function setFunctions($functions)
    {
        $this->container['functions'] = $functions;

        return $this;
    }

    /**
     * Gets templates
     *
     * @return \TalonOne\Client\Model\TemplateDef[]
     */
    public function getTemplates()
    {
        return $this->container['templates'];
    }

    /**
     * Sets templates
     *
     * @param \TalonOne\Client\Model\TemplateDef[] $templates The templates defined for this application.
     *
     * @return $this
     */
    public function setTemplates($templates)
    {
        $this->container['templates'] = $templates;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return string
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param string $variables A stringified version of the environment's Talang variables scope.
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets giveawaysPools
     *
     * @return \TalonOne\Client\Model\GiveawaysPool[]|null
     */
    public function getGiveawaysPools()
    {
        return $this->container['giveawaysPools'];
    }

    /**
     * Sets giveawaysPools
     *
     * @param \TalonOne\Client\Model\GiveawaysPool[]|null $giveawaysPools The giveaways pools that the application is subscribed to.
     *
     * @return $this
     */
    public function setGiveawaysPools($giveawaysPools)
    {
        $this->container['giveawaysPools'] = $giveawaysPools;

        return $this;
    }

    /**
     * Gets loyaltyPrograms
     *
     * @return \TalonOne\Client\Model\LoyaltyProgram[]|null
     */
    public function getLoyaltyPrograms()
    {
        return $this->container['loyaltyPrograms'];
    }

    /**
     * Sets loyaltyPrograms
     *
     * @param \TalonOne\Client\Model\LoyaltyProgram[]|null $loyaltyPrograms The loyalty programs that the application is subscribed to.
     *
     * @return $this
     */
    public function setLoyaltyPrograms($loyaltyPrograms)
    {
        $this->container['loyaltyPrograms'] = $loyaltyPrograms;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \TalonOne\Client\Model\Attribute[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \TalonOne\Client\Model\Attribute[]|null $attributes The attributes that the application is subscribed to.
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets additionalCosts
     *
     * @return \TalonOne\Client\Model\AccountAdditionalCost[]|null
     */
    public function getAdditionalCosts()
    {
        return $this->container['additionalCosts'];
    }

    /**
     * Sets additionalCosts
     *
     * @param \TalonOne\Client\Model\AccountAdditionalCost[]|null $additionalCosts The additional costs that the application is subscribed to.
     *
     * @return $this
     */
    public function setAdditionalCosts($additionalCosts)
    {
        $this->container['additionalCosts'] = $additionalCosts;

        return $this;
    }

    /**
     * Gets audiences
     *
     * @return \TalonOne\Client\Model\Audience[]|null
     */
    public function getAudiences()
    {
        return $this->container['audiences'];
    }

    /**
     * Sets audiences
     *
     * @param \TalonOne\Client\Model\Audience[]|null $audiences The audiences contained in the account which the application belongs to.
     *
     * @return $this
     */
    public function setAudiences($audiences)
    {
        $this->container['audiences'] = $audiences;

        return $this;
    }

    /**
     * Gets collections
     *
     * @return \TalonOne\Client\Model\Collection[]|null
     */
    public function getCollections()
    {
        return $this->container['collections'];
    }

    /**
     * Sets collections
     *
     * @param \TalonOne\Client\Model\Collection[]|null $collections The account-level collections that the application is subscribed to.
     *
     * @return $this
     */
    public function setCollections($collections)
    {
        $this->container['collections'] = $collections;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


