<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Account implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'companyName' => 'string',
        'domainName' => 'string',
        'state' => 'string',
        'billingEmail' => 'string',
        'planName' => 'string',
        'planExpires' => '\DateTime',
        'applicationLimit' => 'int',
        'userLimit' => 'int',
        'campaignLimit' => 'int',
        'apiLimit' => 'int',
        'applicationCount' => 'int',
        'userCount' => 'int',
        'campaignsActiveCount' => 'int',
        'campaignsInactiveCount' => 'int',
        'attributes' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created' => 'date-time',
        'modified' => 'date-time',
        'companyName' => null,
        'domainName' => null,
        'state' => null,
        'billingEmail' => 'email',
        'planName' => null,
        'planExpires' => 'date-time',
        'applicationLimit' => null,
        'userLimit' => null,
        'campaignLimit' => null,
        'apiLimit' => null,
        'applicationCount' => null,
        'userCount' => null,
        'campaignsActiveCount' => null,
        'campaignsInactiveCount' => null,
        'attributes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'modified' => 'modified',
        'companyName' => 'companyName',
        'domainName' => 'domainName',
        'state' => 'state',
        'billingEmail' => 'billingEmail',
        'planName' => 'planName',
        'planExpires' => 'planExpires',
        'applicationLimit' => 'applicationLimit',
        'userLimit' => 'userLimit',
        'campaignLimit' => 'campaignLimit',
        'apiLimit' => 'apiLimit',
        'applicationCount' => 'applicationCount',
        'userCount' => 'userCount',
        'campaignsActiveCount' => 'campaignsActiveCount',
        'campaignsInactiveCount' => 'campaignsInactiveCount',
        'attributes' => 'attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'companyName' => 'setCompanyName',
        'domainName' => 'setDomainName',
        'state' => 'setState',
        'billingEmail' => 'setBillingEmail',
        'planName' => 'setPlanName',
        'planExpires' => 'setPlanExpires',
        'applicationLimit' => 'setApplicationLimit',
        'userLimit' => 'setUserLimit',
        'campaignLimit' => 'setCampaignLimit',
        'apiLimit' => 'setApiLimit',
        'applicationCount' => 'setApplicationCount',
        'userCount' => 'setUserCount',
        'campaignsActiveCount' => 'setCampaignsActiveCount',
        'campaignsInactiveCount' => 'setCampaignsInactiveCount',
        'attributes' => 'setAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'companyName' => 'getCompanyName',
        'domainName' => 'getDomainName',
        'state' => 'getState',
        'billingEmail' => 'getBillingEmail',
        'planName' => 'getPlanName',
        'planExpires' => 'getPlanExpires',
        'applicationLimit' => 'getApplicationLimit',
        'userLimit' => 'getUserLimit',
        'campaignLimit' => 'getCampaignLimit',
        'apiLimit' => 'getApiLimit',
        'applicationCount' => 'getApplicationCount',
        'userCount' => 'getUserCount',
        'campaignsActiveCount' => 'getCampaignsActiveCount',
        'campaignsInactiveCount' => 'getCampaignsInactiveCount',
        'attributes' => 'getAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATE_ACTIVE = 'active';
    const STATE_DEACTIVATED = 'deactivated';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DEACTIVATED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['companyName'] = isset($data['companyName']) ? $data['companyName'] : null;
        $this->container['domainName'] = isset($data['domainName']) ? $data['domainName'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['billingEmail'] = isset($data['billingEmail']) ? $data['billingEmail'] : null;
        $this->container['planName'] = isset($data['planName']) ? $data['planName'] : null;
        $this->container['planExpires'] = isset($data['planExpires']) ? $data['planExpires'] : null;
        $this->container['applicationLimit'] = isset($data['applicationLimit']) ? $data['applicationLimit'] : null;
        $this->container['userLimit'] = isset($data['userLimit']) ? $data['userLimit'] : null;
        $this->container['campaignLimit'] = isset($data['campaignLimit']) ? $data['campaignLimit'] : null;
        $this->container['apiLimit'] = isset($data['apiLimit']) ? $data['apiLimit'] : null;
        $this->container['applicationCount'] = isset($data['applicationCount']) ? $data['applicationCount'] : null;
        $this->container['userCount'] = isset($data['userCount']) ? $data['userCount'] : null;
        $this->container['campaignsActiveCount'] = isset($data['campaignsActiveCount']) ? $data['campaignsActiveCount'] : null;
        $this->container['campaignsInactiveCount'] = isset($data['campaignsInactiveCount']) ? $data['campaignsInactiveCount'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalidProperties[] = "'modified' can't be null";
        }
        if ($this->container['companyName'] === null) {
            $invalidProperties[] = "'companyName' can't be null";
        }
        if ((mb_strlen($this->container['companyName']) < 1)) {
            $invalidProperties[] = "invalid value for 'companyName', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['domainName'] === null) {
            $invalidProperties[] = "'domainName' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['billingEmail'] === null) {
            $invalidProperties[] = "'billingEmail' can't be null";
        }
        if ($this->container['applicationCount'] === null) {
            $invalidProperties[] = "'applicationCount' can't be null";
        }
        if ($this->container['userCount'] === null) {
            $invalidProperties[] = "'userCount' can't be null";
        }
        if ($this->container['campaignsActiveCount'] === null) {
            $invalidProperties[] = "'campaignsActiveCount' can't be null";
        }
        if ($this->container['campaignsInactiveCount'] === null) {
            $invalidProperties[] = "'campaignsInactiveCount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The exact moment this entity was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified The exact moment this entity was last modified.
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string $companyName companyName
     *
     * @return $this
     */
    public function setCompanyName($companyName)
    {

        if ((mb_strlen($companyName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $companyName when calling Account., must be bigger than or equal to 1.');
        }

        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets domainName
     *
     * @return string
     */
    public function getDomainName()
    {
        return $this->container['domainName'];
    }

    /**
     * Sets domainName
     *
     * @param string $domainName Subdomain Name for yourcompany.talon.one.
     *
     * @return $this
     */
    public function setDomainName($domainName)
    {
        $this->container['domainName'] = $domainName;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the account (active, deactivated).
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets billingEmail
     *
     * @return string
     */
    public function getBillingEmail()
    {
        return $this->container['billingEmail'];
    }

    /**
     * Sets billingEmail
     *
     * @param string $billingEmail The billing email address associated with your company account.
     *
     * @return $this
     */
    public function setBillingEmail($billingEmail)
    {
        $this->container['billingEmail'] = $billingEmail;

        return $this;
    }

    /**
     * Gets planName
     *
     * @return string|null
     */
    public function getPlanName()
    {
        return $this->container['planName'];
    }

    /**
     * Sets planName
     *
     * @param string|null $planName The name of your booked plan.
     *
     * @return $this
     */
    public function setPlanName($planName)
    {
        $this->container['planName'] = $planName;

        return $this;
    }

    /**
     * Gets planExpires
     *
     * @return \DateTime|null
     */
    public function getPlanExpires()
    {
        return $this->container['planExpires'];
    }

    /**
     * Sets planExpires
     *
     * @param \DateTime|null $planExpires The point in time at which your current plan expires.
     *
     * @return $this
     */
    public function setPlanExpires($planExpires)
    {
        $this->container['planExpires'] = $planExpires;

        return $this;
    }

    /**
     * Gets applicationLimit
     *
     * @return int|null
     */
    public function getApplicationLimit()
    {
        return $this->container['applicationLimit'];
    }

    /**
     * Sets applicationLimit
     *
     * @param int|null $applicationLimit The maximum number of Applications covered by your plan.
     *
     * @return $this
     */
    public function setApplicationLimit($applicationLimit)
    {
        $this->container['applicationLimit'] = $applicationLimit;

        return $this;
    }

    /**
     * Gets userLimit
     *
     * @return int|null
     */
    public function getUserLimit()
    {
        return $this->container['userLimit'];
    }

    /**
     * Sets userLimit
     *
     * @param int|null $userLimit The maximum number of Campaign Manager Users covered by your plan.
     *
     * @return $this
     */
    public function setUserLimit($userLimit)
    {
        $this->container['userLimit'] = $userLimit;

        return $this;
    }

    /**
     * Gets campaignLimit
     *
     * @return int|null
     */
    public function getCampaignLimit()
    {
        return $this->container['campaignLimit'];
    }

    /**
     * Sets campaignLimit
     *
     * @param int|null $campaignLimit The maximum number of Campaigns covered by your plan.
     *
     * @return $this
     */
    public function setCampaignLimit($campaignLimit)
    {
        $this->container['campaignLimit'] = $campaignLimit;

        return $this;
    }

    /**
     * Gets apiLimit
     *
     * @return int|null
     */
    public function getApiLimit()
    {
        return $this->container['apiLimit'];
    }

    /**
     * Sets apiLimit
     *
     * @param int|null $apiLimit The maximum number of Integration API calls covered by your plan per billing period.
     *
     * @return $this
     */
    public function setApiLimit($apiLimit)
    {
        $this->container['apiLimit'] = $apiLimit;

        return $this;
    }

    /**
     * Gets applicationCount
     *
     * @return int
     */
    public function getApplicationCount()
    {
        return $this->container['applicationCount'];
    }

    /**
     * Sets applicationCount
     *
     * @param int $applicationCount The current number of Applications in your account.
     *
     * @return $this
     */
    public function setApplicationCount($applicationCount)
    {
        $this->container['applicationCount'] = $applicationCount;

        return $this;
    }

    /**
     * Gets userCount
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->container['userCount'];
    }

    /**
     * Sets userCount
     *
     * @param int $userCount The current number of Campaign Manager Users in your account.
     *
     * @return $this
     */
    public function setUserCount($userCount)
    {
        $this->container['userCount'] = $userCount;

        return $this;
    }

    /**
     * Gets campaignsActiveCount
     *
     * @return int
     */
    public function getCampaignsActiveCount()
    {
        return $this->container['campaignsActiveCount'];
    }

    /**
     * Sets campaignsActiveCount
     *
     * @param int $campaignsActiveCount The current number of active Campaigns in your account.
     *
     * @return $this
     */
    public function setCampaignsActiveCount($campaignsActiveCount)
    {
        $this->container['campaignsActiveCount'] = $campaignsActiveCount;

        return $this;
    }

    /**
     * Gets campaignsInactiveCount
     *
     * @return int
     */
    public function getCampaignsInactiveCount()
    {
        return $this->container['campaignsInactiveCount'];
    }

    /**
     * Sets campaignsInactiveCount
     *
     * @param int $campaignsInactiveCount The current number of inactive Campaigns in your account.
     *
     * @return $this
     */
    public function setCampaignsInactiveCount($campaignsInactiveCount)
    {
        $this->container['campaignsInactiveCount'] = $campaignsInactiveCount;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return object|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param object|null $attributes Arbitrary properties associated with this campaign.
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


