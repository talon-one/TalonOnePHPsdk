<?php
/**
 * StrikethroughEffect
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * StrikethroughEffect Class Doc Comment
 *
 * @category Class
 * @description The effect produced for the catalog item.
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StrikethroughEffect implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StrikethroughEffect';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'campaignId' => 'int',
        'rulesetId' => 'int',
        'ruleIndex' => 'int',
        'ruleName' => 'string',
        'type' => 'string',
        'props' => 'object',
        'startTime' => '\DateTime',
        'endTime' => '\DateTime',
        'selectedPriceType' => 'string',
        'selectedPrice' => 'float',
        'adjustmentReferenceId' => 'string',
        'targets' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'campaignId' => 'int64',
        'rulesetId' => 'int64',
        'ruleIndex' => 'int64',
        'ruleName' => null,
        'type' => null,
        'props' => null,
        'startTime' => 'date-time',
        'endTime' => 'date-time',
        'selectedPriceType' => null,
        'selectedPrice' => null,
        'adjustmentReferenceId' => null,
        'targets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaignId' => 'campaignId',
        'rulesetId' => 'rulesetId',
        'ruleIndex' => 'ruleIndex',
        'ruleName' => 'ruleName',
        'type' => 'type',
        'props' => 'props',
        'startTime' => 'startTime',
        'endTime' => 'endTime',
        'selectedPriceType' => 'selectedPriceType',
        'selectedPrice' => 'selectedPrice',
        'adjustmentReferenceId' => 'adjustmentReferenceId',
        'targets' => 'targets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaignId' => 'setCampaignId',
        'rulesetId' => 'setRulesetId',
        'ruleIndex' => 'setRuleIndex',
        'ruleName' => 'setRuleName',
        'type' => 'setType',
        'props' => 'setProps',
        'startTime' => 'setStartTime',
        'endTime' => 'setEndTime',
        'selectedPriceType' => 'setSelectedPriceType',
        'selectedPrice' => 'setSelectedPrice',
        'adjustmentReferenceId' => 'setAdjustmentReferenceId',
        'targets' => 'setTargets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaignId' => 'getCampaignId',
        'rulesetId' => 'getRulesetId',
        'ruleIndex' => 'getRuleIndex',
        'ruleName' => 'getRuleName',
        'type' => 'getType',
        'props' => 'getProps',
        'startTime' => 'getStartTime',
        'endTime' => 'getEndTime',
        'selectedPriceType' => 'getSelectedPriceType',
        'selectedPrice' => 'getSelectedPrice',
        'adjustmentReferenceId' => 'getAdjustmentReferenceId',
        'targets' => 'getTargets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['campaignId'] = isset($data['campaignId']) ? $data['campaignId'] : null;
        $this->container['rulesetId'] = isset($data['rulesetId']) ? $data['rulesetId'] : null;
        $this->container['ruleIndex'] = isset($data['ruleIndex']) ? $data['ruleIndex'] : null;
        $this->container['ruleName'] = isset($data['ruleName']) ? $data['ruleName'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['props'] = isset($data['props']) ? $data['props'] : null;
        $this->container['startTime'] = isset($data['startTime']) ? $data['startTime'] : null;
        $this->container['endTime'] = isset($data['endTime']) ? $data['endTime'] : null;
        $this->container['selectedPriceType'] = isset($data['selectedPriceType']) ? $data['selectedPriceType'] : null;
        $this->container['selectedPrice'] = isset($data['selectedPrice']) ? $data['selectedPrice'] : null;
        $this->container['adjustmentReferenceId'] = isset($data['adjustmentReferenceId']) ? $data['adjustmentReferenceId'] : null;
        $this->container['targets'] = isset($data['targets']) ? $data['targets'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['campaignId'] === null) {
            $invalidProperties[] = "'campaignId' can't be null";
        }
        if ($this->container['rulesetId'] === null) {
            $invalidProperties[] = "'rulesetId' can't be null";
        }
        if ($this->container['ruleIndex'] === null) {
            $invalidProperties[] = "'ruleIndex' can't be null";
        }
        if ($this->container['ruleName'] === null) {
            $invalidProperties[] = "'ruleName' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['props'] === null) {
            $invalidProperties[] = "'props' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaignId
     *
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId
     *
     * @param int $campaignId The ID of the campaign that effect belongs to.
     *
     * @return $this
     */
    public function setCampaignId($campaignId)
    {
        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets rulesetId
     *
     * @return int
     */
    public function getRulesetId()
    {
        return $this->container['rulesetId'];
    }

    /**
     * Sets rulesetId
     *
     * @param int $rulesetId The ID of the ruleset containing the rule that triggered this effect.
     *
     * @return $this
     */
    public function setRulesetId($rulesetId)
    {
        $this->container['rulesetId'] = $rulesetId;

        return $this;
    }

    /**
     * Gets ruleIndex
     *
     * @return int
     */
    public function getRuleIndex()
    {
        return $this->container['ruleIndex'];
    }

    /**
     * Sets ruleIndex
     *
     * @param int $ruleIndex The position of the rule that triggered this effect within the ruleset.
     *
     * @return $this
     */
    public function setRuleIndex($ruleIndex)
    {
        $this->container['ruleIndex'] = $ruleIndex;

        return $this;
    }

    /**
     * Gets ruleName
     *
     * @return string
     */
    public function getRuleName()
    {
        return $this->container['ruleName'];
    }

    /**
     * Sets ruleName
     *
     * @param string $ruleName The name of the rule that triggered this effect.
     *
     * @return $this
     */
    public function setRuleName($ruleName)
    {
        $this->container['ruleName'] = $ruleName;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of this effect.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets props
     *
     * @return object
     */
    public function getProps()
    {
        return $this->container['props'];
    }

    /**
     * Sets props
     *
     * @param object $props props
     *
     * @return $this
     */
    public function setProps($props)
    {
        $this->container['props'] = $props;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime|null $startTime The start of the time frame where the effect is active in UTC.
     *
     * @return $this
     */
    public function setStartTime($startTime)
    {
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets endTime
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['endTime'];
    }

    /**
     * Sets endTime
     *
     * @param \DateTime|null $endTime The end of the time frame where the effect is active in UTC.
     *
     * @return $this
     */
    public function setEndTime($endTime)
    {
        $this->container['endTime'] = $endTime;

        return $this;
    }

    /**
     * Gets selectedPriceType
     *
     * @return string|null
     */
    public function getSelectedPriceType()
    {
        return $this->container['selectedPriceType'];
    }

    /**
     * Sets selectedPriceType
     *
     * @param string|null $selectedPriceType The selected price type for this cart item (e.g. the price for members only).
     *
     * @return $this
     */
    public function setSelectedPriceType($selectedPriceType)
    {
        $this->container['selectedPriceType'] = $selectedPriceType;

        return $this;
    }

    /**
     * Gets selectedPrice
     *
     * @return float|null
     */
    public function getSelectedPrice()
    {
        return $this->container['selectedPrice'];
    }

    /**
     * Sets selectedPrice
     *
     * @param float|null $selectedPrice The value of the selected price type to apply to the SKU targeted by this effect, before any discounts are applied.
     *
     * @return $this
     */
    public function setSelectedPrice($selectedPrice)
    {
        $this->container['selectedPrice'] = $selectedPrice;

        return $this;
    }

    /**
     * Gets adjustmentReferenceId
     *
     * @return string|null
     */
    public function getAdjustmentReferenceId()
    {
        return $this->container['adjustmentReferenceId'];
    }

    /**
     * Sets adjustmentReferenceId
     *
     * @param string|null $adjustmentReferenceId The reference identifier of the selected price adjustment for this cart item.
     *
     * @return $this
     */
    public function setAdjustmentReferenceId($adjustmentReferenceId)
    {
        $this->container['adjustmentReferenceId'] = $adjustmentReferenceId;

        return $this;
    }

    /**
     * Gets targets
     *
     * @return object[]|null
     */
    public function getTargets()
    {
        return $this->container['targets'];
    }

    /**
     * Sets targets
     *
     * @param object[]|null $targets A list of entities (e.g. audiences) targeted by this effect.
     *
     * @return $this
     */
    public function setTargets($targets)
    {
        $this->container['targets'] = $targets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


