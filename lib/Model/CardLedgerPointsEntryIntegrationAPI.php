<?php
/**
 * CardLedgerPointsEntryIntegrationAPI
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * CardLedgerPointsEntryIntegrationAPI Class Doc Comment
 *
 * @category Class
 * @description Loyalty card points with start and expiry dates.
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CardLedgerPointsEntryIntegrationAPI implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardLedgerPointsEntryIntegrationAPI';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'programId' => 'int',
        'customerProfileID' => 'string',
        'customerSessionId' => 'string',
        'name' => 'string',
        'startDate' => 'string',
        'expiryDate' => 'string',
        'subledgerId' => 'string',
        'amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created' => 'date-time',
        'programId' => null,
        'customerProfileID' => null,
        'customerSessionId' => null,
        'name' => null,
        'startDate' => null,
        'expiryDate' => null,
        'subledgerId' => null,
        'amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'programId' => 'programId',
        'customerProfileID' => 'customerProfileID',
        'customerSessionId' => 'customerSessionId',
        'name' => 'name',
        'startDate' => 'startDate',
        'expiryDate' => 'expiryDate',
        'subledgerId' => 'subledgerId',
        'amount' => 'amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'programId' => 'setProgramId',
        'customerProfileID' => 'setCustomerProfileID',
        'customerSessionId' => 'setCustomerSessionId',
        'name' => 'setName',
        'startDate' => 'setStartDate',
        'expiryDate' => 'setExpiryDate',
        'subledgerId' => 'setSubledgerId',
        'amount' => 'setAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'programId' => 'getProgramId',
        'customerProfileID' => 'getCustomerProfileID',
        'customerSessionId' => 'getCustomerSessionId',
        'name' => 'getName',
        'startDate' => 'getStartDate',
        'expiryDate' => 'getExpiryDate',
        'subledgerId' => 'getSubledgerId',
        'amount' => 'getAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['programId'] = isset($data['programId']) ? $data['programId'] : null;
        $this->container['customerProfileID'] = isset($data['customerProfileID']) ? $data['customerProfileID'] : null;
        $this->container['customerSessionId'] = isset($data['customerSessionId']) ? $data['customerSessionId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['expiryDate'] = isset($data['expiryDate']) ? $data['expiryDate'] : null;
        $this->container['subledgerId'] = isset($data['subledgerId']) ? $data['subledgerId'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['programId'] === null) {
            $invalidProperties[] = "'programId' can't be null";
        }
        if (!is_null($this->container['customerSessionId']) && (mb_strlen($this->container['customerSessionId']) > 255)) {
            $invalidProperties[] = "invalid value for 'customerSessionId', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['startDate'] === null) {
            $invalidProperties[] = "'startDate' can't be null";
        }
        if ((mb_strlen($this->container['startDate']) > 64)) {
            $invalidProperties[] = "invalid value for 'startDate', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['expiryDate'] === null) {
            $invalidProperties[] = "'expiryDate' can't be null";
        }
        if ($this->container['subledgerId'] === null) {
            $invalidProperties[] = "'subledgerId' can't be null";
        }
        if ((mb_strlen($this->container['subledgerId']) > 64)) {
            $invalidProperties[] = "invalid value for 'subledgerId', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of the transaction that adds loyalty points.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date and time the loyalty card points were added.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets programId
     *
     * @return int
     */
    public function getProgramId()
    {
        return $this->container['programId'];
    }

    /**
     * Sets programId
     *
     * @param int $programId ID of the loyalty program.
     *
     * @return $this
     */
    public function setProgramId($programId)
    {
        $this->container['programId'] = $programId;

        return $this;
    }

    /**
     * Gets customerProfileID
     *
     * @return string|null
     */
    public function getCustomerProfileID()
    {
        return $this->container['customerProfileID'];
    }

    /**
     * Sets customerProfileID
     *
     * @param string|null $customerProfileID Integration ID of the customer profile linked to the card.
     *
     * @return $this
     */
    public function setCustomerProfileID($customerProfileID)
    {
        $this->container['customerProfileID'] = $customerProfileID;

        return $this;
    }

    /**
     * Gets customerSessionId
     *
     * @return string|null
     */
    public function getCustomerSessionId()
    {
        return $this->container['customerSessionId'];
    }

    /**
     * Sets customerSessionId
     *
     * @param string|null $customerSessionId ID of the customer session where points were added.
     *
     * @return $this
     */
    public function setCustomerSessionId($customerSessionId)
    {
        if (!is_null($customerSessionId) && (mb_strlen($customerSessionId) > 255)) {
            throw new \InvalidArgumentException('invalid length for $customerSessionId when calling CardLedgerPointsEntryIntegrationAPI., must be smaller than or equal to 255.');
        }

        $this->container['customerSessionId'] = $customerSessionId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name or reason of the transaction that adds loyalty points.
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CardLedgerPointsEntryIntegrationAPI., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param string $startDate When points become active. Possible values:   - `immediate`: Points are active immediately.   - `timestamp value`: Points become active at a given date and time.
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        if ((mb_strlen($startDate) > 64)) {
            throw new \InvalidArgumentException('invalid length for $startDate when calling CardLedgerPointsEntryIntegrationAPI., must be smaller than or equal to 64.');
        }

        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets expiryDate
     *
     * @return string
     */
    public function getExpiryDate()
    {
        return $this->container['expiryDate'];
    }

    /**
     * Sets expiryDate
     *
     * @param string $expiryDate Date when points expire. Possible values are:   - `unlimited`: Points have no expiration date.   - `timestamp value`: Points expire on the given date and time.
     *
     * @return $this
     */
    public function setExpiryDate($expiryDate)
    {
        $this->container['expiryDate'] = $expiryDate;

        return $this;
    }

    /**
     * Gets subledgerId
     *
     * @return string
     */
    public function getSubledgerId()
    {
        return $this->container['subledgerId'];
    }

    /**
     * Sets subledgerId
     *
     * @param string $subledgerId ID of the subledger.
     *
     * @return $this
     */
    public function setSubledgerId($subledgerId)
    {
        if ((mb_strlen($subledgerId) > 64)) {
            throw new \InvalidArgumentException('invalid length for $subledgerId when calling CardLedgerPointsEntryIntegrationAPI., must be smaller than or equal to 64.');
        }

        $this->container['subledgerId'] = $subledgerId;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Amount of loyalty points added in the transaction.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


