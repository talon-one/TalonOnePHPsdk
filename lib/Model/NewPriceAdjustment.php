<?php
/**
 * NewPriceAdjustment
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * NewPriceAdjustment Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewPriceAdjustment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewPriceAdjustment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'priceType' => 'string',
        'price' => 'float',
        'referenceId' => 'string',
        'calculatedAt' => '\DateTime',
        'effectiveFrom' => '\DateTime',
        'effectiveUntil' => '\DateTime',
        'contextId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'priceType' => null,
        'price' => null,
        'referenceId' => null,
        'calculatedAt' => 'date-time',
        'effectiveFrom' => 'date-time',
        'effectiveUntil' => 'date-time',
        'contextId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'priceType' => 'priceType',
        'price' => 'price',
        'referenceId' => 'referenceId',
        'calculatedAt' => 'calculatedAt',
        'effectiveFrom' => 'effectiveFrom',
        'effectiveUntil' => 'effectiveUntil',
        'contextId' => 'contextId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'priceType' => 'setPriceType',
        'price' => 'setPrice',
        'referenceId' => 'setReferenceId',
        'calculatedAt' => 'setCalculatedAt',
        'effectiveFrom' => 'setEffectiveFrom',
        'effectiveUntil' => 'setEffectiveUntil',
        'contextId' => 'setContextId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'priceType' => 'getPriceType',
        'price' => 'getPrice',
        'referenceId' => 'getReferenceId',
        'calculatedAt' => 'getCalculatedAt',
        'effectiveFrom' => 'getEffectiveFrom',
        'effectiveUntil' => 'getEffectiveUntil',
        'contextId' => 'getContextId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['priceType'] = isset($data['priceType']) ? $data['priceType'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['referenceId'] = isset($data['referenceId']) ? $data['referenceId'] : null;
        $this->container['calculatedAt'] = isset($data['calculatedAt']) ? $data['calculatedAt'] : null;
        $this->container['effectiveFrom'] = isset($data['effectiveFrom']) ? $data['effectiveFrom'] : null;
        $this->container['effectiveUntil'] = isset($data['effectiveUntil']) ? $data['effectiveUntil'] : null;
        $this->container['contextId'] = isset($data['contextId']) ? $data['contextId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['priceType'] === null) {
            $invalidProperties[] = "'priceType' can't be null";
        }
        if ($this->container['referenceId'] === null) {
            $invalidProperties[] = "'referenceId' can't be null";
        }
        if ((mb_strlen($this->container['referenceId']) < 1)) {
            $invalidProperties[] = "invalid value for 'referenceId', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets priceType
     *
     * @return string
     */
    public function getPriceType()
    {
        return $this->container['priceType'];
    }

    /**
     * Sets priceType
     *
     * @param string $priceType The price type (e.g. the price for members only) to apply to a given SKU.
     *
     * @return $this
     */
    public function setPriceType($priceType)
    {
        $this->container['priceType'] = $priceType;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price The value of the price type applied to the SKU. When set to `null`, the defined price type no longer applies to the SKU.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets referenceId
     *
     * @return string
     */
    public function getReferenceId()
    {
        return $this->container['referenceId'];
    }

    /**
     * Sets referenceId
     *
     * @param string $referenceId A unique reference identifier, e.g. a UUID.
     *
     * @return $this
     */
    public function setReferenceId($referenceId)
    {

        if ((mb_strlen($referenceId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $referenceId when calling NewPriceAdjustment., must be bigger than or equal to 1.');
        }

        $this->container['referenceId'] = $referenceId;

        return $this;
    }

    /**
     * Gets calculatedAt
     *
     * @return \DateTime|null
     */
    public function getCalculatedAt()
    {
        return $this->container['calculatedAt'];
    }

    /**
     * Sets calculatedAt
     *
     * @param \DateTime|null $calculatedAt The time at which this price was calculated. If provided, this is used to determine the most recent price adjustment to choose if price adjustments overlap. Defaults to internal creation time if not provided.
     *
     * @return $this
     */
    public function setCalculatedAt($calculatedAt)
    {
        $this->container['calculatedAt'] = $calculatedAt;

        return $this;
    }

    /**
     * Gets effectiveFrom
     *
     * @return \DateTime|null
     */
    public function getEffectiveFrom()
    {
        return $this->container['effectiveFrom'];
    }

    /**
     * Sets effectiveFrom
     *
     * @param \DateTime|null $effectiveFrom The date and time from which the price adjustment is effective.
     *
     * @return $this
     */
    public function setEffectiveFrom($effectiveFrom)
    {
        $this->container['effectiveFrom'] = $effectiveFrom;

        return $this;
    }

    /**
     * Gets effectiveUntil
     *
     * @return \DateTime|null
     */
    public function getEffectiveUntil()
    {
        return $this->container['effectiveUntil'];
    }

    /**
     * Sets effectiveUntil
     *
     * @param \DateTime|null $effectiveUntil The date and time until which the price adjustment is effective.
     *
     * @return $this
     */
    public function setEffectiveUntil($effectiveUntil)
    {
        $this->container['effectiveUntil'] = $effectiveUntil;

        return $this;
    }

    /**
     * Gets contextId
     *
     * @return string|null
     */
    public function getContextId()
    {
        return $this->container['contextId'];
    }

    /**
     * Sets contextId
     *
     * @param string|null $contextId Identifier of the context of this price adjustment (e.g. summer sale).
     *
     * @return $this
     */
    public function setContextId($contextId)
    {
        $this->container['contextId'] = $contextId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


