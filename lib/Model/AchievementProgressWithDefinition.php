<?php
/**
 * AchievementProgressWithDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * AchievementProgressWithDefinition Class Doc Comment
 *
 * @category Class
 * @description The current progress of the customer in the achievement.
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AchievementProgressWithDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AchievementProgressWithDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'progress' => 'float',
        'startDate' => '\DateTime',
        'completionDate' => '\DateTime',
        'endDate' => '\DateTime',
        'achievementId' => 'int',
        'name' => 'string',
        'title' => 'string',
        'description' => 'string',
        'campaignId' => 'int',
        'target' => 'float',
        'achievementRecurrencePolicy' => 'string',
        'achievementActivationPolicy' => 'string',
        'achievementFixedStartDate' => '\DateTime',
        'achievementEndDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'status' => null,
        'progress' => null,
        'startDate' => 'date-time',
        'completionDate' => 'date-time',
        'endDate' => 'date-time',
        'achievementId' => null,
        'name' => null,
        'title' => null,
        'description' => 'string',
        'campaignId' => null,
        'target' => null,
        'achievementRecurrencePolicy' => null,
        'achievementActivationPolicy' => null,
        'achievementFixedStartDate' => 'date-time',
        'achievementEndDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'progress' => 'progress',
        'startDate' => 'startDate',
        'completionDate' => 'completionDate',
        'endDate' => 'endDate',
        'achievementId' => 'achievementId',
        'name' => 'name',
        'title' => 'title',
        'description' => 'description',
        'campaignId' => 'campaignId',
        'target' => 'target',
        'achievementRecurrencePolicy' => 'achievementRecurrencePolicy',
        'achievementActivationPolicy' => 'achievementActivationPolicy',
        'achievementFixedStartDate' => 'achievementFixedStartDate',
        'achievementEndDate' => 'achievementEndDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'progress' => 'setProgress',
        'startDate' => 'setStartDate',
        'completionDate' => 'setCompletionDate',
        'endDate' => 'setEndDate',
        'achievementId' => 'setAchievementId',
        'name' => 'setName',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'campaignId' => 'setCampaignId',
        'target' => 'setTarget',
        'achievementRecurrencePolicy' => 'setAchievementRecurrencePolicy',
        'achievementActivationPolicy' => 'setAchievementActivationPolicy',
        'achievementFixedStartDate' => 'setAchievementFixedStartDate',
        'achievementEndDate' => 'setAchievementEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'progress' => 'getProgress',
        'startDate' => 'getStartDate',
        'completionDate' => 'getCompletionDate',
        'endDate' => 'getEndDate',
        'achievementId' => 'getAchievementId',
        'name' => 'getName',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'campaignId' => 'getCampaignId',
        'target' => 'getTarget',
        'achievementRecurrencePolicy' => 'getAchievementRecurrencePolicy',
        'achievementActivationPolicy' => 'getAchievementActivationPolicy',
        'achievementFixedStartDate' => 'getAchievementFixedStartDate',
        'achievementEndDate' => 'getAchievementEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_INPROGRESS = 'inprogress';
    const STATUS_COMPLETED = 'completed';
    const STATUS_EXPIRED = 'expired';
    const STATUS_NOT_STARTED = 'not_started';
    const ACHIEVEMENT_RECURRENCE_POLICY_NO_RECURRENCE = 'no_recurrence';
    const ACHIEVEMENT_RECURRENCE_POLICY_ON_EXPIRATION = 'on_expiration';
    const ACHIEVEMENT_ACTIVATION_POLICY_USER_ACTION = 'user_action';
    const ACHIEVEMENT_ACTIVATION_POLICY_FIXED_SCHEDULE = 'fixed_schedule';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_INPROGRESS,
            self::STATUS_COMPLETED,
            self::STATUS_EXPIRED,
            self::STATUS_NOT_STARTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAchievementRecurrencePolicyAllowableValues()
    {
        return [
            self::ACHIEVEMENT_RECURRENCE_POLICY_NO_RECURRENCE,
            self::ACHIEVEMENT_RECURRENCE_POLICY_ON_EXPIRATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAchievementActivationPolicyAllowableValues()
    {
        return [
            self::ACHIEVEMENT_ACTIVATION_POLICY_USER_ACTION,
            self::ACHIEVEMENT_ACTIVATION_POLICY_FIXED_SCHEDULE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['progress'] = isset($data['progress']) ? $data['progress'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['completionDate'] = isset($data['completionDate']) ? $data['completionDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['achievementId'] = isset($data['achievementId']) ? $data['achievementId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['campaignId'] = isset($data['campaignId']) ? $data['campaignId'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
        $this->container['achievementRecurrencePolicy'] = isset($data['achievementRecurrencePolicy']) ? $data['achievementRecurrencePolicy'] : null;
        $this->container['achievementActivationPolicy'] = isset($data['achievementActivationPolicy']) ? $data['achievementActivationPolicy'] : null;
        $this->container['achievementFixedStartDate'] = isset($data['achievementFixedStartDate']) ? $data['achievementFixedStartDate'] : null;
        $this->container['achievementEndDate'] = isset($data['achievementEndDate']) ? $data['achievementEndDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['progress'] === null) {
            $invalidProperties[] = "'progress' can't be null";
        }
        if ($this->container['achievementId'] === null) {
            $invalidProperties[] = "'achievementId' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 1000.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z]\\w+$/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /^[a-zA-Z]\\w+$/.";
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['campaignId'] === null) {
            $invalidProperties[] = "'campaignId' can't be null";
        }
        if ($this->container['achievementRecurrencePolicy'] === null) {
            $invalidProperties[] = "'achievementRecurrencePolicy' can't be null";
        }
        $allowedValues = $this->getAchievementRecurrencePolicyAllowableValues();
        if (!is_null($this->container['achievementRecurrencePolicy']) && !in_array($this->container['achievementRecurrencePolicy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'achievementRecurrencePolicy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['achievementActivationPolicy'] === null) {
            $invalidProperties[] = "'achievementActivationPolicy' can't be null";
        }
        $allowedValues = $this->getAchievementActivationPolicyAllowableValues();
        if (!is_null($this->container['achievementActivationPolicy']) && !in_array($this->container['achievementActivationPolicy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'achievementActivationPolicy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the achievement.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return float
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param float $progress The current progress of the customer in the achievement.
     *
     * @return $this
     */
    public function setProgress($progress)
    {
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate Timestamp at which the customer started the achievement.
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets completionDate
     *
     * @return \DateTime|null
     */
    public function getCompletionDate()
    {
        return $this->container['completionDate'];
    }

    /**
     * Sets completionDate
     *
     * @param \DateTime|null $completionDate Timestamp at which point the customer completed the achievement.
     *
     * @return $this
     */
    public function setCompletionDate($completionDate)
    {
        $this->container['completionDate'] = $completionDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate Timestamp at which point the achievement ends and resets for the customer.
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets achievementId
     *
     * @return int
     */
    public function getAchievementId()
    {
        return $this->container['achievementId'];
    }

    /**
     * Sets achievementId
     *
     * @param int $achievementId The internal ID of the achievement.
     *
     * @return $this
     */
    public function setAchievementId($achievementId)
    {
        $this->container['achievementId'] = $achievementId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The internal name of the achievement used in API requests.
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $name when calling AchievementProgressWithDefinition., must be smaller than or equal to 1000.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling AchievementProgressWithDefinition., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z]\\w+$/", $name))) {
            throw new \InvalidArgumentException("invalid value for $name when calling AchievementProgressWithDefinition., must conform to the pattern /^[a-zA-Z]\\w+$/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The display name of the achievement in the Campaign Manager.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the achievement in the Campaign Manager.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets campaignId
     *
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId
     *
     * @param int $campaignId The ID of the campaign the achievement belongs to.
     *
     * @return $this
     */
    public function setCampaignId($campaignId)
    {
        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets target
     *
     * @return float|null
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param float|null $target The required number of actions or the transactional milestone to complete the achievement.
     *
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets achievementRecurrencePolicy
     *
     * @return string
     */
    public function getAchievementRecurrencePolicy()
    {
        return $this->container['achievementRecurrencePolicy'];
    }

    /**
     * Sets achievementRecurrencePolicy
     *
     * @param string $achievementRecurrencePolicy The policy that determines if and how the achievement recurs. - `no_recurrence`: The achievement can be completed only once. - `on_expiration`: The achievement resets after it expires and becomes available again.
     *
     * @return $this
     */
    public function setAchievementRecurrencePolicy($achievementRecurrencePolicy)
    {
        $allowedValues = $this->getAchievementRecurrencePolicyAllowableValues();
        if (!in_array($achievementRecurrencePolicy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'achievementRecurrencePolicy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['achievementRecurrencePolicy'] = $achievementRecurrencePolicy;

        return $this;
    }

    /**
     * Gets achievementActivationPolicy
     *
     * @return string
     */
    public function getAchievementActivationPolicy()
    {
        return $this->container['achievementActivationPolicy'];
    }

    /**
     * Sets achievementActivationPolicy
     *
     * @param string $achievementActivationPolicy The policy that determines how the achievement starts, ends, or resets. - `user_action`: The achievement ends or resets relative to when the customer started the achievement. - `fixed_schedule`: The achievement starts, ends, or resets for all customers following a fixed schedule.
     *
     * @return $this
     */
    public function setAchievementActivationPolicy($achievementActivationPolicy)
    {
        $allowedValues = $this->getAchievementActivationPolicyAllowableValues();
        if (!in_array($achievementActivationPolicy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'achievementActivationPolicy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['achievementActivationPolicy'] = $achievementActivationPolicy;

        return $this;
    }

    /**
     * Gets achievementFixedStartDate
     *
     * @return \DateTime|null
     */
    public function getAchievementFixedStartDate()
    {
        return $this->container['achievementFixedStartDate'];
    }

    /**
     * Sets achievementFixedStartDate
     *
     * @param \DateTime|null $achievementFixedStartDate The achievement's start date when `achievementActivationPolicy` is equal to `fixed_schedule`.  **Note:** It is an RFC3339 timestamp string.
     *
     * @return $this
     */
    public function setAchievementFixedStartDate($achievementFixedStartDate)
    {
        $this->container['achievementFixedStartDate'] = $achievementFixedStartDate;

        return $this;
    }

    /**
     * Gets achievementEndDate
     *
     * @return \DateTime|null
     */
    public function getAchievementEndDate()
    {
        return $this->container['achievementEndDate'];
    }

    /**
     * Sets achievementEndDate
     *
     * @param \DateTime|null $achievementEndDate The achievement's end date. If defined, customers cannot participate in the achievement after this date.  **Note:** It is an RFC3339 timestamp string.
     *
     * @return $this
     */
    public function setAchievementEndDate($achievementEndDate)
    {
        $this->container['achievementEndDate'] = $achievementEndDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


