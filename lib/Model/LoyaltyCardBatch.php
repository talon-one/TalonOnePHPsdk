<?php
/**
 * LoyaltyCardBatch
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * LoyaltyCardBatch Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LoyaltyCardBatch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoyaltyCardBatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'numberOfCards' => 'int',
        'batchId' => 'string',
        'status' => 'string',
        'cardCodeSettings' => '\TalonOne\Client\Model\CodeGeneratorSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'numberOfCards' => 'int64',
        'batchId' => null,
        'status' => null,
        'cardCodeSettings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numberOfCards' => 'numberOfCards',
        'batchId' => 'batchId',
        'status' => 'status',
        'cardCodeSettings' => 'cardCodeSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numberOfCards' => 'setNumberOfCards',
        'batchId' => 'setBatchId',
        'status' => 'setStatus',
        'cardCodeSettings' => 'setCardCodeSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numberOfCards' => 'getNumberOfCards',
        'batchId' => 'getBatchId',
        'status' => 'getStatus',
        'cardCodeSettings' => 'getCardCodeSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ACTIVE = 'active';
    const STATUS_INACTIVE = 'inactive';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['numberOfCards'] = isset($data['numberOfCards']) ? $data['numberOfCards'] : null;
        $this->container['batchId'] = isset($data['batchId']) ? $data['batchId'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : 'active';
        $this->container['cardCodeSettings'] = isset($data['cardCodeSettings']) ? $data['cardCodeSettings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['numberOfCards'] === null) {
            $invalidProperties[] = "'numberOfCards' can't be null";
        }
        if (!is_null($this->container['batchId']) && (mb_strlen($this->container['batchId']) > 20)) {
            $invalidProperties[] = "invalid value for 'batchId', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['batchId']) && (mb_strlen($this->container['batchId']) < 4)) {
            $invalidProperties[] = "invalid value for 'batchId', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['batchId']) && !preg_match("/^[A-Za-z0-9_-]*$/", $this->container['batchId'])) {
            $invalidProperties[] = "invalid value for 'batchId', must be conform to the pattern /^[A-Za-z0-9_-]*$/.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets numberOfCards
     *
     * @return int
     */
    public function getNumberOfCards()
    {
        return $this->container['numberOfCards'];
    }

    /**
     * Sets numberOfCards
     *
     * @param int $numberOfCards Number of loyalty cards in the batch.
     *
     * @return $this
     */
    public function setNumberOfCards($numberOfCards)
    {
        $this->container['numberOfCards'] = $numberOfCards;

        return $this;
    }

    /**
     * Gets batchId
     *
     * @return string|null
     */
    public function getBatchId()
    {
        return $this->container['batchId'];
    }

    /**
     * Sets batchId
     *
     * @param string|null $batchId ID of the loyalty card batch.
     *
     * @return $this
     */
    public function setBatchId($batchId)
    {
        if (!is_null($batchId) && (mb_strlen($batchId) > 20)) {
            throw new \InvalidArgumentException('invalid length for $batchId when calling LoyaltyCardBatch., must be smaller than or equal to 20.');
        }
        if (!is_null($batchId) && (mb_strlen($batchId) < 4)) {
            throw new \InvalidArgumentException('invalid length for $batchId when calling LoyaltyCardBatch., must be bigger than or equal to 4.');
        }
        if (!is_null($batchId) && (!preg_match("/^[A-Za-z0-9_-]*$/", $batchId))) {
            throw new \InvalidArgumentException("invalid value for $batchId when calling LoyaltyCardBatch., must conform to the pattern /^[A-Za-z0-9_-]*$/.");
        }

        $this->container['batchId'] = $batchId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the loyalty cards in the batch.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets cardCodeSettings
     *
     * @return \TalonOne\Client\Model\CodeGeneratorSettings|null
     */
    public function getCardCodeSettings()
    {
        return $this->container['cardCodeSettings'];
    }

    /**
     * Sets cardCodeSettings
     *
     * @param \TalonOne\Client\Model\CodeGeneratorSettings|null $cardCodeSettings cardCodeSettings
     *
     * @return $this
     */
    public function setCardCodeSettings($cardCodeSettings)
    {
        $this->container['cardCodeSettings'] = $cardCodeSettings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


