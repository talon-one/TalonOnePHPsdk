<?php
/**
 * AccountAnalytics
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * AccountAnalytics Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountAnalytics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountAnalytics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'applications' => 'int',
        'active_campaigns' => 'int',
        'campaigns' => 'int',
        'coupons' => 'int',
        'active_coupons' => 'int',
        'expired_coupons' => 'int',
        'custom_attributes' => 'int',
        'referral_codes' => 'int',
        'active_referral_codes' => 'int',
        'expired_referral_codes' => 'int',
        'users' => 'int',
        'roles' => 'int',
        'webhooks' => 'int',
        'loyalty_programs' => 'int',
        'active_rules' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'applications' => null,
        'active_campaigns' => null,
        'campaigns' => null,
        'coupons' => null,
        'active_coupons' => null,
        'expired_coupons' => null,
        'custom_attributes' => null,
        'referral_codes' => null,
        'active_referral_codes' => null,
        'expired_referral_codes' => null,
        'users' => null,
        'roles' => null,
        'webhooks' => null,
        'loyalty_programs' => null,
        'active_rules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applications' => 'applications',
        'active_campaigns' => 'activeCampaigns',
        'campaigns' => 'campaigns',
        'coupons' => 'coupons',
        'active_coupons' => 'activeCoupons',
        'expired_coupons' => 'expiredCoupons',
        'custom_attributes' => 'customAttributes',
        'referral_codes' => 'referralCodes',
        'active_referral_codes' => 'activeReferralCodes',
        'expired_referral_codes' => 'expiredReferralCodes',
        'users' => 'users',
        'roles' => 'roles',
        'webhooks' => 'webhooks',
        'loyalty_programs' => 'loyaltyPrograms',
        'active_rules' => 'activeRules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applications' => 'setApplications',
        'active_campaigns' => 'setActiveCampaigns',
        'campaigns' => 'setCampaigns',
        'coupons' => 'setCoupons',
        'active_coupons' => 'setActiveCoupons',
        'expired_coupons' => 'setExpiredCoupons',
        'custom_attributes' => 'setCustomAttributes',
        'referral_codes' => 'setReferralCodes',
        'active_referral_codes' => 'setActiveReferralCodes',
        'expired_referral_codes' => 'setExpiredReferralCodes',
        'users' => 'setUsers',
        'roles' => 'setRoles',
        'webhooks' => 'setWebhooks',
        'loyalty_programs' => 'setLoyaltyPrograms',
        'active_rules' => 'setActiveRules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applications' => 'getApplications',
        'active_campaigns' => 'getActiveCampaigns',
        'campaigns' => 'getCampaigns',
        'coupons' => 'getCoupons',
        'active_coupons' => 'getActiveCoupons',
        'expired_coupons' => 'getExpiredCoupons',
        'custom_attributes' => 'getCustomAttributes',
        'referral_codes' => 'getReferralCodes',
        'active_referral_codes' => 'getActiveReferralCodes',
        'expired_referral_codes' => 'getExpiredReferralCodes',
        'users' => 'getUsers',
        'roles' => 'getRoles',
        'webhooks' => 'getWebhooks',
        'loyalty_programs' => 'getLoyaltyPrograms',
        'active_rules' => 'getActiveRules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['applications'] = isset($data['applications']) ? $data['applications'] : null;
        $this->container['active_campaigns'] = isset($data['active_campaigns']) ? $data['active_campaigns'] : null;
        $this->container['campaigns'] = isset($data['campaigns']) ? $data['campaigns'] : null;
        $this->container['coupons'] = isset($data['coupons']) ? $data['coupons'] : null;
        $this->container['active_coupons'] = isset($data['active_coupons']) ? $data['active_coupons'] : null;
        $this->container['expired_coupons'] = isset($data['expired_coupons']) ? $data['expired_coupons'] : null;
        $this->container['custom_attributes'] = isset($data['custom_attributes']) ? $data['custom_attributes'] : null;
        $this->container['referral_codes'] = isset($data['referral_codes']) ? $data['referral_codes'] : null;
        $this->container['active_referral_codes'] = isset($data['active_referral_codes']) ? $data['active_referral_codes'] : null;
        $this->container['expired_referral_codes'] = isset($data['expired_referral_codes']) ? $data['expired_referral_codes'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['webhooks'] = isset($data['webhooks']) ? $data['webhooks'] : null;
        $this->container['loyalty_programs'] = isset($data['loyalty_programs']) ? $data['loyalty_programs'] : null;
        $this->container['active_rules'] = isset($data['active_rules']) ? $data['active_rules'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['applications'] === null) {
            $invalidProperties[] = "'applications' can't be null";
        }
        if ($this->container['active_campaigns'] === null) {
            $invalidProperties[] = "'active_campaigns' can't be null";
        }
        if ($this->container['campaigns'] === null) {
            $invalidProperties[] = "'campaigns' can't be null";
        }
        if ($this->container['coupons'] === null) {
            $invalidProperties[] = "'coupons' can't be null";
        }
        if ($this->container['active_coupons'] === null) {
            $invalidProperties[] = "'active_coupons' can't be null";
        }
        if ($this->container['expired_coupons'] === null) {
            $invalidProperties[] = "'expired_coupons' can't be null";
        }
        if ($this->container['custom_attributes'] === null) {
            $invalidProperties[] = "'custom_attributes' can't be null";
        }
        if ($this->container['referral_codes'] === null) {
            $invalidProperties[] = "'referral_codes' can't be null";
        }
        if ($this->container['active_referral_codes'] === null) {
            $invalidProperties[] = "'active_referral_codes' can't be null";
        }
        if ($this->container['expired_referral_codes'] === null) {
            $invalidProperties[] = "'expired_referral_codes' can't be null";
        }
        if ($this->container['users'] === null) {
            $invalidProperties[] = "'users' can't be null";
        }
        if ($this->container['roles'] === null) {
            $invalidProperties[] = "'roles' can't be null";
        }
        if ($this->container['webhooks'] === null) {
            $invalidProperties[] = "'webhooks' can't be null";
        }
        if ($this->container['loyalty_programs'] === null) {
            $invalidProperties[] = "'loyalty_programs' can't be null";
        }
        if ($this->container['active_rules'] === null) {
            $invalidProperties[] = "'active_rules' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applications
     *
     * @return int
     */
    public function getApplications()
    {
        return $this->container['applications'];
    }

    /**
     * Sets applications
     *
     * @param int $applications Total Number of Applications inside the account
     *
     * @return $this
     */
    public function setApplications($applications)
    {
        $this->container['applications'] = $applications;

        return $this;
    }

    /**
     * Gets active_campaigns
     *
     * @return int
     */
    public function getActiveCampaigns()
    {
        return $this->container['active_campaigns'];
    }

    /**
     * Sets active_campaigns
     *
     * @param int $active_campaigns Total Number of Active Applications inside the account
     *
     * @return $this
     */
    public function setActiveCampaigns($active_campaigns)
    {
        $this->container['active_campaigns'] = $active_campaigns;

        return $this;
    }

    /**
     * Gets campaigns
     *
     * @return int
     */
    public function getCampaigns()
    {
        return $this->container['campaigns'];
    }

    /**
     * Sets campaigns
     *
     * @param int $campaigns Total Number of campaigns inside the account
     *
     * @return $this
     */
    public function setCampaigns($campaigns)
    {
        $this->container['campaigns'] = $campaigns;

        return $this;
    }

    /**
     * Gets coupons
     *
     * @return int
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     *
     * @param int $coupons Total Number of coupons inside the account
     *
     * @return $this
     */
    public function setCoupons($coupons)
    {
        $this->container['coupons'] = $coupons;

        return $this;
    }

    /**
     * Gets active_coupons
     *
     * @return int
     */
    public function getActiveCoupons()
    {
        return $this->container['active_coupons'];
    }

    /**
     * Sets active_coupons
     *
     * @param int $active_coupons Total Number of active coupons inside the account
     *
     * @return $this
     */
    public function setActiveCoupons($active_coupons)
    {
        $this->container['active_coupons'] = $active_coupons;

        return $this;
    }

    /**
     * Gets expired_coupons
     *
     * @return int
     */
    public function getExpiredCoupons()
    {
        return $this->container['expired_coupons'];
    }

    /**
     * Sets expired_coupons
     *
     * @param int $expired_coupons Total Number of expired coupons inside the account
     *
     * @return $this
     */
    public function setExpiredCoupons($expired_coupons)
    {
        $this->container['expired_coupons'] = $expired_coupons;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return int
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param int $custom_attributes Total Number of custom attributes inside the account
     *
     * @return $this
     */
    public function setCustomAttributes($custom_attributes)
    {
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets referral_codes
     *
     * @return int
     */
    public function getReferralCodes()
    {
        return $this->container['referral_codes'];
    }

    /**
     * Sets referral_codes
     *
     * @param int $referral_codes Total Number of referral codes inside the account
     *
     * @return $this
     */
    public function setReferralCodes($referral_codes)
    {
        $this->container['referral_codes'] = $referral_codes;

        return $this;
    }

    /**
     * Gets active_referral_codes
     *
     * @return int
     */
    public function getActiveReferralCodes()
    {
        return $this->container['active_referral_codes'];
    }

    /**
     * Sets active_referral_codes
     *
     * @param int $active_referral_codes Total Number of active referral codes inside the account
     *
     * @return $this
     */
    public function setActiveReferralCodes($active_referral_codes)
    {
        $this->container['active_referral_codes'] = $active_referral_codes;

        return $this;
    }

    /**
     * Gets expired_referral_codes
     *
     * @return int
     */
    public function getExpiredReferralCodes()
    {
        return $this->container['expired_referral_codes'];
    }

    /**
     * Sets expired_referral_codes
     *
     * @param int $expired_referral_codes Total Number of expired referral codes inside the account
     *
     * @return $this
     */
    public function setExpiredReferralCodes($expired_referral_codes)
    {
        $this->container['expired_referral_codes'] = $expired_referral_codes;

        return $this;
    }

    /**
     * Gets users
     *
     * @return int
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param int $users Total Number of users inside the account
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return int
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param int $roles Total Number of roles inside the account
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets webhooks
     *
     * @return int
     */
    public function getWebhooks()
    {
        return $this->container['webhooks'];
    }

    /**
     * Sets webhooks
     *
     * @param int $webhooks Total Number of webhooks inside the account
     *
     * @return $this
     */
    public function setWebhooks($webhooks)
    {
        $this->container['webhooks'] = $webhooks;

        return $this;
    }

    /**
     * Gets loyalty_programs
     *
     * @return int
     */
    public function getLoyaltyPrograms()
    {
        return $this->container['loyalty_programs'];
    }

    /**
     * Sets loyalty_programs
     *
     * @param int $loyalty_programs Total Number of loyalty programs inside the account
     *
     * @return $this
     */
    public function setLoyaltyPrograms($loyalty_programs)
    {
        $this->container['loyalty_programs'] = $loyalty_programs;

        return $this;
    }

    /**
     * Gets active_rules
     *
     * @return int
     */
    public function getActiveRules()
    {
        return $this->container['active_rules'];
    }

    /**
     * Sets active_rules
     *
     * @param int $active_rules Total Number of active rules in the account
     *
     * @return $this
     */
    public function setActiveRules($active_rules)
    {
        $this->container['active_rules'] = $active_rules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


