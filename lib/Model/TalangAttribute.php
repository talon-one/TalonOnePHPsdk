<?php
/**
 * TalangAttribute
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * TalangAttribute Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TalangAttribute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TalangAttribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entity' => 'string',
        'name' => 'string',
        'title' => 'string',
        'type' => 'string',
        'description' => 'string',
        'visible' => 'bool',
        'kind' => 'string',
        'campaignsCount' => 'int',
        'exampleValue' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'entity' => null,
        'name' => null,
        'title' => null,
        'type' => null,
        'description' => null,
        'visible' => null,
        'kind' => null,
        'campaignsCount' => null,
        'exampleValue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entity' => 'entity',
        'name' => 'name',
        'title' => 'title',
        'type' => 'type',
        'description' => 'description',
        'visible' => 'visible',
        'kind' => 'kind',
        'campaignsCount' => 'campaignsCount',
        'exampleValue' => 'exampleValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entity' => 'setEntity',
        'name' => 'setName',
        'title' => 'setTitle',
        'type' => 'setType',
        'description' => 'setDescription',
        'visible' => 'setVisible',
        'kind' => 'setKind',
        'campaignsCount' => 'setCampaignsCount',
        'exampleValue' => 'setExampleValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entity' => 'getEntity',
        'name' => 'getName',
        'title' => 'getTitle',
        'type' => 'getType',
        'description' => 'getDescription',
        'visible' => 'getVisible',
        'kind' => 'getKind',
        'campaignsCount' => 'getCampaignsCount',
        'exampleValue' => 'getExampleValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ENTITY_ADVOCATE_PROFILE = 'AdvocateProfile';
    const ENTITY_ACCOUNT = 'Account';
    const ENTITY_APPLICATION = 'Application';
    const ENTITY_AWARDED_GIVEAWAY = 'AwardedGiveaway';
    const ENTITY_BUNDLE = 'Bundle';
    const ENTITY_CAMPAIGN = 'Campaign';
    const ENTITY_CART_ITEM = 'CartItem';
    const ENTITY_COUPON = 'Coupon';
    const ENTITY_CUSTOMER_PROFILE = 'CustomerProfile';
    const ENTITY_CUSTOMER_SESSION = 'CustomerSession';
    const ENTITY_EVENT = 'Event';
    const ENTITY_ITEM = 'Item';
    const ENTITY_LOYALTY = 'Loyalty';
    const ENTITY_PROFILE = 'Profile';
    const ENTITY_GIVEAWAY = 'Giveaway';
    const ENTITY_REFERRAL = 'Referral';
    const ENTITY_SESSION = 'Session';
    const KIND_BUILT_IN = 'built-in';
    const KIND_CUSTOM = 'custom';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntityAllowableValues()
    {
        return [
            self::ENTITY_ADVOCATE_PROFILE,
            self::ENTITY_ACCOUNT,
            self::ENTITY_APPLICATION,
            self::ENTITY_AWARDED_GIVEAWAY,
            self::ENTITY_BUNDLE,
            self::ENTITY_CAMPAIGN,
            self::ENTITY_CART_ITEM,
            self::ENTITY_COUPON,
            self::ENTITY_CUSTOMER_PROFILE,
            self::ENTITY_CUSTOMER_SESSION,
            self::ENTITY_EVENT,
            self::ENTITY_ITEM,
            self::ENTITY_LOYALTY,
            self::ENTITY_PROFILE,
            self::ENTITY_GIVEAWAY,
            self::ENTITY_REFERRAL,
            self::ENTITY_SESSION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKindAllowableValues()
    {
        return [
            self::KIND_BUILT_IN,
            self::KIND_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : true;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['campaignsCount'] = isset($data['campaignsCount']) ? $data['campaignsCount'] : null;
        $this->container['exampleValue'] = isset($data['exampleValue']) ? $data['exampleValue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEntityAllowableValues();
        if (!is_null($this->container['entity']) && !in_array($this->container['entity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'entity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['visible'] === null) {
            $invalidProperties[] = "'visible' can't be null";
        }
        if ($this->container['kind'] === null) {
            $invalidProperties[] = "'kind' can't be null";
        }
        $allowedValues = $this->getKindAllowableValues();
        if (!is_null($this->container['kind']) && !in_array($this->container['kind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'kind', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['campaignsCount'] === null) {
            $invalidProperties[] = "'campaignsCount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entity
     *
     * @return string|null
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param string|null $entity The name of the entity of the attribute.
     *
     * @return $this
     */
    public function setEntity($entity)
    {
        $allowedValues = $this->getEntityAllowableValues();
        if (!is_null($entity) && !in_array($entity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'entity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The name of the attribute that is displayed to the user in the Campaign Manager.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The talang type of the attribute.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of the attribute.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool $visible Indicates whether the attribute is visible in the UI or not.
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string $kind Indicate the kind of the attribute.
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $allowedValues = $this->getKindAllowableValues();
        if (!in_array($kind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'kind', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets campaignsCount
     *
     * @return int
     */
    public function getCampaignsCount()
    {
        return $this->container['campaignsCount'];
    }

    /**
     * Sets campaignsCount
     *
     * @param int $campaignsCount The number of campaigns that refer to the attribute.
     *
     * @return $this
     */
    public function setCampaignsCount($campaignsCount)
    {
        $this->container['campaignsCount'] = $campaignsCount;

        return $this;
    }

    /**
     * Gets exampleValue
     *
     * @return string[]|null
     */
    public function getExampleValue()
    {
        return $this->container['exampleValue'];
    }

    /**
     * Sets exampleValue
     *
     * @param string[]|null $exampleValue Examples of values that can be assigned to the attribute.
     *
     * @return $this
     */
    public function setExampleValue($exampleValue)
    {
        $this->container['exampleValue'] = $exampleValue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


