<?php
/**
 * CouponDeletionFilters
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * CouponDeletionFilters Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CouponDeletionFilters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CouponDeletionFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'createdBefore' => '\DateTime',
        'createdAfter' => '\DateTime',
        'startsAfter' => '\DateTime',
        'startsBefore' => '\DateTime',
        'valid' => 'string',
        'usable' => 'bool',
        'redeemed' => 'bool',
        'recipientIntegrationId' => 'string',
        'exactMatch' => 'bool',
        'value' => 'string',
        'batchId' => 'string',
        'referralId' => 'int',
        'expiresAfter' => '\DateTime',
        'expiresBefore' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'createdBefore' => 'date-time',
        'createdAfter' => 'date-time',
        'startsAfter' => 'date-time',
        'startsBefore' => 'date-time',
        'valid' => null,
        'usable' => null,
        'redeemed' => null,
        'recipientIntegrationId' => null,
        'exactMatch' => null,
        'value' => null,
        'batchId' => null,
        'referralId' => null,
        'expiresAfter' => 'date-time',
        'expiresBefore' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'createdBefore' => 'createdBefore',
        'createdAfter' => 'createdAfter',
        'startsAfter' => 'startsAfter',
        'startsBefore' => 'startsBefore',
        'valid' => 'valid',
        'usable' => 'usable',
        'redeemed' => 'redeemed',
        'recipientIntegrationId' => 'recipientIntegrationId',
        'exactMatch' => 'exactMatch',
        'value' => 'value',
        'batchId' => 'batchId',
        'referralId' => 'referralId',
        'expiresAfter' => 'expiresAfter',
        'expiresBefore' => 'expiresBefore'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'createdBefore' => 'setCreatedBefore',
        'createdAfter' => 'setCreatedAfter',
        'startsAfter' => 'setStartsAfter',
        'startsBefore' => 'setStartsBefore',
        'valid' => 'setValid',
        'usable' => 'setUsable',
        'redeemed' => 'setRedeemed',
        'recipientIntegrationId' => 'setRecipientIntegrationId',
        'exactMatch' => 'setExactMatch',
        'value' => 'setValue',
        'batchId' => 'setBatchId',
        'referralId' => 'setReferralId',
        'expiresAfter' => 'setExpiresAfter',
        'expiresBefore' => 'setExpiresBefore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'createdBefore' => 'getCreatedBefore',
        'createdAfter' => 'getCreatedAfter',
        'startsAfter' => 'getStartsAfter',
        'startsBefore' => 'getStartsBefore',
        'valid' => 'getValid',
        'usable' => 'getUsable',
        'redeemed' => 'getRedeemed',
        'recipientIntegrationId' => 'getRecipientIntegrationId',
        'exactMatch' => 'getExactMatch',
        'value' => 'getValue',
        'batchId' => 'getBatchId',
        'referralId' => 'getReferralId',
        'expiresAfter' => 'getExpiresAfter',
        'expiresBefore' => 'getExpiresBefore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VALID_EXPIRED = 'expired';
    const VALID_VALID_NOW = 'validNow';
    const VALID_VALID_FUTURE = 'validFuture';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValidAllowableValues()
    {
        return [
            self::VALID_EXPIRED,
            self::VALID_VALID_NOW,
            self::VALID_VALID_FUTURE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['createdBefore'] = isset($data['createdBefore']) ? $data['createdBefore'] : null;
        $this->container['createdAfter'] = isset($data['createdAfter']) ? $data['createdAfter'] : null;
        $this->container['startsAfter'] = isset($data['startsAfter']) ? $data['startsAfter'] : null;
        $this->container['startsBefore'] = isset($data['startsBefore']) ? $data['startsBefore'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['usable'] = isset($data['usable']) ? $data['usable'] : null;
        $this->container['redeemed'] = isset($data['redeemed']) ? $data['redeemed'] : null;
        $this->container['recipientIntegrationId'] = isset($data['recipientIntegrationId']) ? $data['recipientIntegrationId'] : null;
        $this->container['exactMatch'] = isset($data['exactMatch']) ? $data['exactMatch'] : false;
        $this->container['value'] = isset($data['value']) ? $data['value'] : 'false';
        $this->container['batchId'] = isset($data['batchId']) ? $data['batchId'] : null;
        $this->container['referralId'] = isset($data['referralId']) ? $data['referralId'] : null;
        $this->container['expiresAfter'] = isset($data['expiresAfter']) ? $data['expiresAfter'] : null;
        $this->container['expiresBefore'] = isset($data['expiresBefore']) ? $data['expiresBefore'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getValidAllowableValues();
        if (!is_null($this->container['valid']) && !in_array($this->container['valid'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'valid', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets createdBefore
     *
     * @return \DateTime|null
     */
    public function getCreatedBefore()
    {
        return $this->container['createdBefore'];
    }

    /**
     * Sets createdBefore
     *
     * @param \DateTime|null $createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
     *
     * @return $this
     */
    public function setCreatedBefore($createdBefore)
    {
        $this->container['createdBefore'] = $createdBefore;

        return $this;
    }

    /**
     * Gets createdAfter
     *
     * @return \DateTime|null
     */
    public function getCreatedAfter()
    {
        return $this->container['createdAfter'];
    }

    /**
     * Sets createdAfter
     *
     * @param \DateTime|null $createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
     *
     * @return $this
     */
    public function setCreatedAfter($createdAfter)
    {
        $this->container['createdAfter'] = $createdAfter;

        return $this;
    }

    /**
     * Gets startsAfter
     *
     * @return \DateTime|null
     */
    public function getStartsAfter()
    {
        return $this->container['startsAfter'];
    }

    /**
     * Sets startsAfter
     *
     * @param \DateTime|null $startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
     *
     * @return $this
     */
    public function setStartsAfter($startsAfter)
    {
        $this->container['startsAfter'] = $startsAfter;

        return $this;
    }

    /**
     * Gets startsBefore
     *
     * @return \DateTime|null
     */
    public function getStartsBefore()
    {
        return $this->container['startsBefore'];
    }

    /**
     * Sets startsBefore
     *
     * @param \DateTime|null $startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
     *
     * @return $this
     */
    public function setStartsBefore($startsBefore)
    {
        $this->container['startsBefore'] = $startsBefore;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return string|null
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param string|null $valid - `expired`: Matches coupons in which the expiration date is set and in the past. - `validNow`: Matches coupons in which the start date is null or in the past and the expiration date is null or in the future. - `validFuture`: Matches coupons in which the start date is set and in the future.
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $allowedValues = $this->getValidAllowableValues();
        if (!is_null($valid) && !in_array($valid, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'valid', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets usable
     *
     * @return bool|null
     */
    public function getUsable()
    {
        return $this->container['usable'];
    }

    /**
     * Sets usable
     *
     * @param bool|null $usable - `true`: only coupons where `usageCounter < usageLimit` will be returned. - `false`: only coupons where `usageCounter >= usageLimit` will be returned. - This field cannot be used in conjunction with the `usable` query parameter.
     *
     * @return $this
     */
    public function setUsable($usable)
    {
        $this->container['usable'] = $usable;

        return $this;
    }

    /**
     * Gets redeemed
     *
     * @return bool|null
     */
    public function getRedeemed()
    {
        return $this->container['redeemed'];
    }

    /**
     * Sets redeemed
     *
     * @param bool|null $redeemed - `true`: only coupons where `usageCounter > 0` will be returned. - `false`: only coupons where `usageCounter = 0` will be returned.  **Note:** This field cannot be used in conjunction with the `usable` query parameter.
     *
     * @return $this
     */
    public function setRedeemed($redeemed)
    {
        $this->container['redeemed'] = $redeemed;

        return $this;
    }

    /**
     * Gets recipientIntegrationId
     *
     * @return string|null
     */
    public function getRecipientIntegrationId()
    {
        return $this->container['recipientIntegrationId'];
    }

    /**
     * Sets recipientIntegrationId
     *
     * @param string|null $recipientIntegrationId Filter results by match with a profile id specified in the coupon's `RecipientIntegrationId` field.
     *
     * @return $this
     */
    public function setRecipientIntegrationId($recipientIntegrationId)
    {
        $this->container['recipientIntegrationId'] = $recipientIntegrationId;

        return $this;
    }

    /**
     * Gets exactMatch
     *
     * @return bool|null
     */
    public function getExactMatch()
    {
        return $this->container['exactMatch'];
    }

    /**
     * Sets exactMatch
     *
     * @param bool|null $exactMatch Filter results to an exact case-insensitive matching against the coupon code
     *
     * @return $this
     */
    public function setExactMatch($exactMatch)
    {
        $this->container['exactMatch'] = $exactMatch;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value Filter results by the coupon code
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets batchId
     *
     * @return string|null
     */
    public function getBatchId()
    {
        return $this->container['batchId'];
    }

    /**
     * Sets batchId
     *
     * @param string|null $batchId Filter results by batches of coupons
     *
     * @return $this
     */
    public function setBatchId($batchId)
    {
        $this->container['batchId'] = $batchId;

        return $this;
    }

    /**
     * Gets referralId
     *
     * @return int|null
     */
    public function getReferralId()
    {
        return $this->container['referralId'];
    }

    /**
     * Sets referralId
     *
     * @param int|null $referralId Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
     *
     * @return $this
     */
    public function setReferralId($referralId)
    {
        $this->container['referralId'] = $referralId;

        return $this;
    }

    /**
     * Gets expiresAfter
     *
     * @return \DateTime|null
     */
    public function getExpiresAfter()
    {
        return $this->container['expiresAfter'];
    }

    /**
     * Sets expiresAfter
     *
     * @param \DateTime|null $expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
     *
     * @return $this
     */
    public function setExpiresAfter($expiresAfter)
    {
        $this->container['expiresAfter'] = $expiresAfter;

        return $this;
    }

    /**
     * Gets expiresBefore
     *
     * @return \DateTime|null
     */
    public function getExpiresBefore()
    {
        return $this->container['expiresBefore'];
    }

    /**
     * Sets expiresBefore
     *
     * @param \DateTime|null $expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
     *
     * @return $this
     */
    public function setExpiresBefore($expiresBefore)
    {
        $this->container['expiresBefore'] = $expiresBefore;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


