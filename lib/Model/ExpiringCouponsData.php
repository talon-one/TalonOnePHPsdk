<?php
/**
 * ExpiringCouponsData
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * ExpiringCouponsData Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExpiringCouponsData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExpiringCouponsData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'couponValue' => 'string',
        'createdDate' => '\DateTime',
        'validFrom' => '\DateTime',
        'validUntil' => '\DateTime',
        'campaignId' => 'int',
        'customerProfileId' => 'string',
        'usageLimit' => 'int',
        'usageCounter' => 'int',
        'batchId' => 'string',
        'attributes' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'couponValue' => null,
        'createdDate' => 'date-time',
        'validFrom' => 'date-time',
        'validUntil' => 'date-time',
        'campaignId' => 'int64',
        'customerProfileId' => null,
        'usageLimit' => 'int64',
        'usageCounter' => 'int64',
        'batchId' => null,
        'attributes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'couponValue' => 'CouponValue',
        'createdDate' => 'CreatedDate',
        'validFrom' => 'ValidFrom',
        'validUntil' => 'ValidUntil',
        'campaignId' => 'CampaignId',
        'customerProfileId' => 'CustomerProfileId',
        'usageLimit' => 'UsageLimit',
        'usageCounter' => 'UsageCounter',
        'batchId' => 'BatchId',
        'attributes' => 'Attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'couponValue' => 'setCouponValue',
        'createdDate' => 'setCreatedDate',
        'validFrom' => 'setValidFrom',
        'validUntil' => 'setValidUntil',
        'campaignId' => 'setCampaignId',
        'customerProfileId' => 'setCustomerProfileId',
        'usageLimit' => 'setUsageLimit',
        'usageCounter' => 'setUsageCounter',
        'batchId' => 'setBatchId',
        'attributes' => 'setAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'couponValue' => 'getCouponValue',
        'createdDate' => 'getCreatedDate',
        'validFrom' => 'getValidFrom',
        'validUntil' => 'getValidUntil',
        'campaignId' => 'getCampaignId',
        'customerProfileId' => 'getCustomerProfileId',
        'usageLimit' => 'getUsageLimit',
        'usageCounter' => 'getUsageCounter',
        'batchId' => 'getBatchId',
        'attributes' => 'getAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['couponValue'] = isset($data['couponValue']) ? $data['couponValue'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['validFrom'] = isset($data['validFrom']) ? $data['validFrom'] : null;
        $this->container['validUntil'] = isset($data['validUntil']) ? $data['validUntil'] : null;
        $this->container['campaignId'] = isset($data['campaignId']) ? $data['campaignId'] : null;
        $this->container['customerProfileId'] = isset($data['customerProfileId']) ? $data['customerProfileId'] : null;
        $this->container['usageLimit'] = isset($data['usageLimit']) ? $data['usageLimit'] : null;
        $this->container['usageCounter'] = isset($data['usageCounter']) ? $data['usageCounter'] : null;
        $this->container['batchId'] = isset($data['batchId']) ? $data['batchId'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['couponValue'] === null) {
            $invalidProperties[] = "'couponValue' can't be null";
        }
        if ($this->container['campaignId'] === null) {
            $invalidProperties[] = "'campaignId' can't be null";
        }
        if (($this->container['campaignId'] < 1)) {
            $invalidProperties[] = "invalid value for 'campaignId', must be bigger than or equal to 1.";
        }

        if ($this->container['usageLimit'] === null) {
            $invalidProperties[] = "'usageLimit' can't be null";
        }
        if (($this->container['usageLimit'] > 999999)) {
            $invalidProperties[] = "invalid value for 'usageLimit', must be smaller than or equal to 999999.";
        }

        if (($this->container['usageLimit'] < 0)) {
            $invalidProperties[] = "invalid value for 'usageLimit', must be bigger than or equal to 0.";
        }

        if ($this->container['usageCounter'] === null) {
            $invalidProperties[] = "'usageCounter' can't be null";
        }
        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets couponValue
     *
     * @return string
     */
    public function getCouponValue()
    {
        return $this->container['couponValue'];
    }

    /**
     * Sets couponValue
     *
     * @param string $couponValue The coupon code.
     *
     * @return $this
     */
    public function setCouponValue($couponValue)
    {
        $this->container['couponValue'] = $couponValue;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime|null $createdDate Timestamp at which point the coupon was created.
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return \DateTime|null
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param \DateTime|null $validFrom Timestamp at which point the coupon becomes valid.
     *
     * @return $this
     */
    public function setValidFrom($validFrom)
    {
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets validUntil
     *
     * @return \DateTime|null
     */
    public function getValidUntil()
    {
        return $this->container['validUntil'];
    }

    /**
     * Sets validUntil
     *
     * @param \DateTime|null $validUntil Timestamp at which point the coupon expires. Coupon never expires if this is omitted, zero, or negative.
     *
     * @return $this
     */
    public function setValidUntil($validUntil)
    {
        $this->container['validUntil'] = $validUntil;

        return $this;
    }

    /**
     * Gets campaignId
     *
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId
     *
     * @param int $campaignId The ID of the campaign to which the coupon belongs.
     *
     * @return $this
     */
    public function setCampaignId($campaignId)
    {

        if (($campaignId < 1)) {
            throw new \InvalidArgumentException('invalid value for $campaignId when calling ExpiringCouponsData., must be bigger than or equal to 1.');
        }

        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets customerProfileId
     *
     * @return string|null
     */
    public function getCustomerProfileId()
    {
        return $this->container['customerProfileId'];
    }

    /**
     * Sets customerProfileId
     *
     * @param string|null $customerProfileId The Integration ID of the customer that is allowed to redeem this coupon.
     *
     * @return $this
     */
    public function setCustomerProfileId($customerProfileId)
    {
        $this->container['customerProfileId'] = $customerProfileId;

        return $this;
    }

    /**
     * Gets usageLimit
     *
     * @return int
     */
    public function getUsageLimit()
    {
        return $this->container['usageLimit'];
    }

    /**
     * Sets usageLimit
     *
     * @param int $usageLimit The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.
     *
     * @return $this
     */
    public function setUsageLimit($usageLimit)
    {

        if (($usageLimit > 999999)) {
            throw new \InvalidArgumentException('invalid value for $usageLimit when calling ExpiringCouponsData., must be smaller than or equal to 999999.');
        }
        if (($usageLimit < 0)) {
            throw new \InvalidArgumentException('invalid value for $usageLimit when calling ExpiringCouponsData., must be bigger than or equal to 0.');
        }

        $this->container['usageLimit'] = $usageLimit;

        return $this;
    }

    /**
     * Gets usageCounter
     *
     * @return int
     */
    public function getUsageCounter()
    {
        return $this->container['usageCounter'];
    }

    /**
     * Sets usageCounter
     *
     * @param int $usageCounter The number of times the coupon has been successfully redeemed.
     *
     * @return $this
     */
    public function setUsageCounter($usageCounter)
    {
        $this->container['usageCounter'] = $usageCounter;

        return $this;
    }

    /**
     * Gets batchId
     *
     * @return string|null
     */
    public function getBatchId()
    {
        return $this->container['batchId'];
    }

    /**
     * Sets batchId
     *
     * @param string|null $batchId The ID of the batch the coupon belongs to.
     *
     * @return $this
     */
    public function setBatchId($batchId)
    {
        $this->container['batchId'] = $batchId;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return object
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param object $attributes Custom attributes associated with this coupon.
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


