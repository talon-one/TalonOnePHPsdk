<?php
/**
 * NewCoupons
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * NewCoupons Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewCoupons implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewCoupons';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'usage_limit' => 'int',
        'start_date' => '\DateTime',
        'expiry_date' => '\DateTime',
        'valid_characters' => 'string[]',
        'coupon_pattern' => 'string',
        'number_of_coupons' => 'int',
        'unique_prefix' => 'string',
        'attributes' => 'object',
        'recipient_integration_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'usage_limit' => null,
        'start_date' => 'date-time',
        'expiry_date' => 'date-time',
        'valid_characters' => null,
        'coupon_pattern' => null,
        'number_of_coupons' => null,
        'unique_prefix' => null,
        'attributes' => null,
        'recipient_integration_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'usage_limit' => 'usageLimit',
        'start_date' => 'startDate',
        'expiry_date' => 'expiryDate',
        'valid_characters' => 'validCharacters',
        'coupon_pattern' => 'couponPattern',
        'number_of_coupons' => 'numberOfCoupons',
        'unique_prefix' => 'uniquePrefix',
        'attributes' => 'attributes',
        'recipient_integration_id' => 'recipientIntegrationId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'usage_limit' => 'setUsageLimit',
        'start_date' => 'setStartDate',
        'expiry_date' => 'setExpiryDate',
        'valid_characters' => 'setValidCharacters',
        'coupon_pattern' => 'setCouponPattern',
        'number_of_coupons' => 'setNumberOfCoupons',
        'unique_prefix' => 'setUniquePrefix',
        'attributes' => 'setAttributes',
        'recipient_integration_id' => 'setRecipientIntegrationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'usage_limit' => 'getUsageLimit',
        'start_date' => 'getStartDate',
        'expiry_date' => 'getExpiryDate',
        'valid_characters' => 'getValidCharacters',
        'coupon_pattern' => 'getCouponPattern',
        'number_of_coupons' => 'getNumberOfCoupons',
        'unique_prefix' => 'getUniquePrefix',
        'attributes' => 'getAttributes',
        'recipient_integration_id' => 'getRecipientIntegrationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['usage_limit'] = isset($data['usage_limit']) ? $data['usage_limit'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['valid_characters'] = isset($data['valid_characters']) ? $data['valid_characters'] : null;
        $this->container['coupon_pattern'] = isset($data['coupon_pattern']) ? $data['coupon_pattern'] : null;
        $this->container['number_of_coupons'] = isset($data['number_of_coupons']) ? $data['number_of_coupons'] : null;
        $this->container['unique_prefix'] = isset($data['unique_prefix']) ? $data['unique_prefix'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['recipient_integration_id'] = isset($data['recipient_integration_id']) ? $data['recipient_integration_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['usage_limit'] === null) {
            $invalidProperties[] = "'usage_limit' can't be null";
        }
        if (($this->container['usage_limit'] > 999999)) {
            $invalidProperties[] = "invalid value for 'usage_limit', must be smaller than or equal to 999999.";
        }

        if (($this->container['usage_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'usage_limit', must be bigger than or equal to 0.";
        }

        if ($this->container['valid_characters'] === null) {
            $invalidProperties[] = "'valid_characters' can't be null";
        }
        if ($this->container['coupon_pattern'] === null) {
            $invalidProperties[] = "'coupon_pattern' can't be null";
        }
        if ((mb_strlen($this->container['coupon_pattern']) < 3)) {
            $invalidProperties[] = "invalid value for 'coupon_pattern', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['number_of_coupons'] === null) {
            $invalidProperties[] = "'number_of_coupons' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets usage_limit
     *
     * @return int
     */
    public function getUsageLimit()
    {
        return $this->container['usage_limit'];
    }

    /**
     * Sets usage_limit
     *
     * @param int $usage_limit The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply.
     *
     * @return $this
     */
    public function setUsageLimit($usage_limit)
    {

        if (($usage_limit > 999999)) {
            throw new \InvalidArgumentException('invalid value for $usage_limit when calling NewCoupons., must be smaller than or equal to 999999.');
        }
        if (($usage_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $usage_limit when calling NewCoupons., must be bigger than or equal to 0.');
        }

        $this->container['usage_limit'] = $usage_limit;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Timestamp at which point the coupon becomes valid.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime|null $expiry_date Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets valid_characters
     *
     * @return string[]
     */
    public function getValidCharacters()
    {
        return $this->container['valid_characters'];
    }

    /**
     * Sets valid_characters
     *
     * @param string[] $valid_characters Set of characters to be used when generating random part of code. Defaults to [A-Z, 0-9] (in terms of RegExp).
     *
     * @return $this
     */
    public function setValidCharacters($valid_characters)
    {
        $this->container['valid_characters'] = $valid_characters;

        return $this;
    }

    /**
     * Gets coupon_pattern
     *
     * @return string
     */
    public function getCouponPattern()
    {
        return $this->container['coupon_pattern'];
    }

    /**
     * Sets coupon_pattern
     *
     * @param string $coupon_pattern The pattern that will be used to generate coupon codes. The character `#` acts as a placeholder and will be replaced by a random character from the `validCharacters` set.
     *
     * @return $this
     */
    public function setCouponPattern($coupon_pattern)
    {

        if ((mb_strlen($coupon_pattern) < 3)) {
            throw new \InvalidArgumentException('invalid length for $coupon_pattern when calling NewCoupons., must be bigger than or equal to 3.');
        }

        $this->container['coupon_pattern'] = $coupon_pattern;

        return $this;
    }

    /**
     * Gets number_of_coupons
     *
     * @return int
     */
    public function getNumberOfCoupons()
    {
        return $this->container['number_of_coupons'];
    }

    /**
     * Sets number_of_coupons
     *
     * @param int $number_of_coupons The number of new coupon codes to generate for the campaign. Must be at least 1.
     *
     * @return $this
     */
    public function setNumberOfCoupons($number_of_coupons)
    {
        $this->container['number_of_coupons'] = $number_of_coupons;

        return $this;
    }

    /**
     * Gets unique_prefix
     *
     * @return string|null
     */
    public function getUniquePrefix()
    {
        return $this->container['unique_prefix'];
    }

    /**
     * Sets unique_prefix
     *
     * @param string|null $unique_prefix A unique prefix to prepend to all generated coupons.
     *
     * @return $this
     */
    public function setUniquePrefix($unique_prefix)
    {
        $this->container['unique_prefix'] = $unique_prefix;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return object|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param object|null $attributes Arbitrary properties associated with this item
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets recipient_integration_id
     *
     * @return string|null
     */
    public function getRecipientIntegrationId()
    {
        return $this->container['recipient_integration_id'];
    }

    /**
     * Sets recipient_integration_id
     *
     * @param string|null $recipient_integration_id The integration ID for this coupon's beneficiary's profile
     *
     * @return $this
     */
    public function setRecipientIntegrationId($recipient_integration_id)
    {
        $this->container['recipient_integration_id'] = $recipient_integration_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


