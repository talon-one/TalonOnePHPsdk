<?php
/**
 * IncreaseAchievementProgressEffectProps
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * IncreaseAchievementProgressEffectProps Class Doc Comment
 *
 * @category Class
 * @description The properties specific to the \&quot;increaseAchievementProgress\&quot; effect. This gets triggered whenever a validated rule contained an \&quot;increase customer progress\&quot; effect.
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IncreaseAchievementProgressEffectProps implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IncreaseAchievementProgressEffectProps';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'achievementId' => 'int',
        'achievementName' => 'string',
        'progressTrackerId' => 'int',
        'delta' => 'float',
        'value' => 'float',
        'target' => 'float',
        'isJustCompleted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'achievementId' => 'int64',
        'achievementName' => null,
        'progressTrackerId' => 'int64',
        'delta' => null,
        'value' => null,
        'target' => null,
        'isJustCompleted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'achievementId' => 'achievementId',
        'achievementName' => 'achievementName',
        'progressTrackerId' => 'progressTrackerId',
        'delta' => 'delta',
        'value' => 'value',
        'target' => 'target',
        'isJustCompleted' => 'isJustCompleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'achievementId' => 'setAchievementId',
        'achievementName' => 'setAchievementName',
        'progressTrackerId' => 'setProgressTrackerId',
        'delta' => 'setDelta',
        'value' => 'setValue',
        'target' => 'setTarget',
        'isJustCompleted' => 'setIsJustCompleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'achievementId' => 'getAchievementId',
        'achievementName' => 'getAchievementName',
        'progressTrackerId' => 'getProgressTrackerId',
        'delta' => 'getDelta',
        'value' => 'getValue',
        'target' => 'getTarget',
        'isJustCompleted' => 'getIsJustCompleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['achievementId'] = isset($data['achievementId']) ? $data['achievementId'] : null;
        $this->container['achievementName'] = isset($data['achievementName']) ? $data['achievementName'] : null;
        $this->container['progressTrackerId'] = isset($data['progressTrackerId']) ? $data['progressTrackerId'] : null;
        $this->container['delta'] = isset($data['delta']) ? $data['delta'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
        $this->container['isJustCompleted'] = isset($data['isJustCompleted']) ? $data['isJustCompleted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['achievementId'] === null) {
            $invalidProperties[] = "'achievementId' can't be null";
        }
        if ($this->container['achievementName'] === null) {
            $invalidProperties[] = "'achievementName' can't be null";
        }
        if ($this->container['delta'] === null) {
            $invalidProperties[] = "'delta' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['target'] === null) {
            $invalidProperties[] = "'target' can't be null";
        }
        if ($this->container['isJustCompleted'] === null) {
            $invalidProperties[] = "'isJustCompleted' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets achievementId
     *
     * @return int
     */
    public function getAchievementId()
    {
        return $this->container['achievementId'];
    }

    /**
     * Sets achievementId
     *
     * @param int $achievementId The internal ID of the achievement.
     *
     * @return $this
     */
    public function setAchievementId($achievementId)
    {
        $this->container['achievementId'] = $achievementId;

        return $this;
    }

    /**
     * Gets achievementName
     *
     * @return string
     */
    public function getAchievementName()
    {
        return $this->container['achievementName'];
    }

    /**
     * Sets achievementName
     *
     * @param string $achievementName The name of the achievement.
     *
     * @return $this
     */
    public function setAchievementName($achievementName)
    {
        $this->container['achievementName'] = $achievementName;

        return $this;
    }

    /**
     * Gets progressTrackerId
     *
     * @return int|null
     */
    public function getProgressTrackerId()
    {
        return $this->container['progressTrackerId'];
    }

    /**
     * Sets progressTrackerId
     *
     * @param int|null $progressTrackerId The internal ID of the achievement progress tracker.
     *
     * @return $this
     */
    public function setProgressTrackerId($progressTrackerId)
    {
        $this->container['progressTrackerId'] = $progressTrackerId;

        return $this;
    }

    /**
     * Gets delta
     *
     * @return float
     */
    public function getDelta()
    {
        return $this->container['delta'];
    }

    /**
     * Sets delta
     *
     * @param float $delta The value by which the customer's current progress in the achievement is increased.
     *
     * @return $this
     */
    public function setDelta($delta)
    {
        $this->container['delta'] = $delta;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float $value The current progress of the customer in the achievement.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets target
     *
     * @return float
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param float $target The target value to complete the achievement.
     *
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets isJustCompleted
     *
     * @return bool
     */
    public function getIsJustCompleted()
    {
        return $this->container['isJustCompleted'];
    }

    /**
     * Sets isJustCompleted
     *
     * @param bool $isJustCompleted Indicates if the customer has completed the achievement in the current session.
     *
     * @return $this
     */
    public function setIsJustCompleted($isJustCompleted)
    {
        $this->container['isJustCompleted'] = $isJustCompleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


