<?php
/**
 * AddedDeductedPointsNotification
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * AddedDeductedPointsNotification Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AddedDeductedPointsNotification implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AddedDeductedPointsNotification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'profileIntegrationID' => 'string',
        'loyaltyProgramID' => 'int',
        'subledgerID' => 'string',
        'amount' => 'float',
        'reason' => 'string',
        'typeOfChange' => 'string',
        'employeeName' => 'string',
        'userID' => 'int',
        'operation' => 'string',
        'startDate' => '\DateTime',
        'expiryDate' => '\DateTime',
        'sessionIntegrationID' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'profileIntegrationID' => null,
        'loyaltyProgramID' => 'int64',
        'subledgerID' => null,
        'amount' => null,
        'reason' => null,
        'typeOfChange' => null,
        'employeeName' => null,
        'userID' => 'int64',
        'operation' => null,
        'startDate' => 'date-time',
        'expiryDate' => 'date-time',
        'sessionIntegrationID' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'profileIntegrationID' => 'ProfileIntegrationID',
        'loyaltyProgramID' => 'LoyaltyProgramID',
        'subledgerID' => 'SubledgerID',
        'amount' => 'Amount',
        'reason' => 'Reason',
        'typeOfChange' => 'TypeOfChange',
        'employeeName' => 'EmployeeName',
        'userID' => 'UserID',
        'operation' => 'Operation',
        'startDate' => 'StartDate',
        'expiryDate' => 'ExpiryDate',
        'sessionIntegrationID' => 'SessionIntegrationID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'profileIntegrationID' => 'setProfileIntegrationID',
        'loyaltyProgramID' => 'setLoyaltyProgramID',
        'subledgerID' => 'setSubledgerID',
        'amount' => 'setAmount',
        'reason' => 'setReason',
        'typeOfChange' => 'setTypeOfChange',
        'employeeName' => 'setEmployeeName',
        'userID' => 'setUserID',
        'operation' => 'setOperation',
        'startDate' => 'setStartDate',
        'expiryDate' => 'setExpiryDate',
        'sessionIntegrationID' => 'setSessionIntegrationID'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'profileIntegrationID' => 'getProfileIntegrationID',
        'loyaltyProgramID' => 'getLoyaltyProgramID',
        'subledgerID' => 'getSubledgerID',
        'amount' => 'getAmount',
        'reason' => 'getReason',
        'typeOfChange' => 'getTypeOfChange',
        'employeeName' => 'getEmployeeName',
        'userID' => 'getUserID',
        'operation' => 'getOperation',
        'startDate' => 'getStartDate',
        'expiryDate' => 'getExpiryDate',
        'sessionIntegrationID' => 'getSessionIntegrationID'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_OF_CHANGE_CAMPAIGN_MANAGER = 'campaign_manager';
    const TYPE_OF_CHANGE_RULE_ENGINE = 'rule_engine';
    const TYPE_OF_CHANGE_MANAGEMENT_API = 'management_api';
    const OPERATION_ADDITION = 'addition';
    const OPERATION_DEDUCTION = 'deduction';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeOfChangeAllowableValues()
    {
        return [
            self::TYPE_OF_CHANGE_CAMPAIGN_MANAGER,
            self::TYPE_OF_CHANGE_RULE_ENGINE,
            self::TYPE_OF_CHANGE_MANAGEMENT_API,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_ADDITION,
            self::OPERATION_DEDUCTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['profileIntegrationID'] = isset($data['profileIntegrationID']) ? $data['profileIntegrationID'] : null;
        $this->container['loyaltyProgramID'] = isset($data['loyaltyProgramID']) ? $data['loyaltyProgramID'] : null;
        $this->container['subledgerID'] = isset($data['subledgerID']) ? $data['subledgerID'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['typeOfChange'] = isset($data['typeOfChange']) ? $data['typeOfChange'] : null;
        $this->container['employeeName'] = isset($data['employeeName']) ? $data['employeeName'] : null;
        $this->container['userID'] = isset($data['userID']) ? $data['userID'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['expiryDate'] = isset($data['expiryDate']) ? $data['expiryDate'] : null;
        $this->container['sessionIntegrationID'] = isset($data['sessionIntegrationID']) ? $data['sessionIntegrationID'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['profileIntegrationID'] === null) {
            $invalidProperties[] = "'profileIntegrationID' can't be null";
        }
        if ($this->container['loyaltyProgramID'] === null) {
            $invalidProperties[] = "'loyaltyProgramID' can't be null";
        }
        if (($this->container['loyaltyProgramID'] < 1)) {
            $invalidProperties[] = "invalid value for 'loyaltyProgramID', must be bigger than or equal to 1.";
        }

        if ($this->container['subledgerID'] === null) {
            $invalidProperties[] = "'subledgerID' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        if ($this->container['typeOfChange'] === null) {
            $invalidProperties[] = "'typeOfChange' can't be null";
        }
        $allowedValues = $this->getTypeOfChangeAllowableValues();
        if (!is_null($this->container['typeOfChange']) && !in_array($this->container['typeOfChange'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'typeOfChange', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['employeeName'] === null) {
            $invalidProperties[] = "'employeeName' can't be null";
        }
        if ($this->container['userID'] === null) {
            $invalidProperties[] = "'userID' can't be null";
        }
        if (($this->container['userID'] < 1)) {
            $invalidProperties[] = "invalid value for 'userID', must be bigger than or equal to 1.";
        }

        if ($this->container['operation'] === null) {
            $invalidProperties[] = "'operation' can't be null";
        }
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['sessionIntegrationID'] === null) {
            $invalidProperties[] = "'sessionIntegrationID' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets profileIntegrationID
     *
     * @return string
     */
    public function getProfileIntegrationID()
    {
        return $this->container['profileIntegrationID'];
    }

    /**
     * Sets profileIntegrationID
     *
     * @param string $profileIntegrationID The integration ID of the customer profile to whom points were added or deducted.
     *
     * @return $this
     */
    public function setProfileIntegrationID($profileIntegrationID)
    {
        $this->container['profileIntegrationID'] = $profileIntegrationID;

        return $this;
    }

    /**
     * Gets loyaltyProgramID
     *
     * @return int
     */
    public function getLoyaltyProgramID()
    {
        return $this->container['loyaltyProgramID'];
    }

    /**
     * Sets loyaltyProgramID
     *
     * @param int $loyaltyProgramID The ID of the loyalty program.
     *
     * @return $this
     */
    public function setLoyaltyProgramID($loyaltyProgramID)
    {

        if (($loyaltyProgramID < 1)) {
            throw new \InvalidArgumentException('invalid value for $loyaltyProgramID when calling AddedDeductedPointsNotification., must be bigger than or equal to 1.');
        }

        $this->container['loyaltyProgramID'] = $loyaltyProgramID;

        return $this;
    }

    /**
     * Gets subledgerID
     *
     * @return string
     */
    public function getSubledgerID()
    {
        return $this->container['subledgerID'];
    }

    /**
     * Sets subledgerID
     *
     * @param string $subledgerID The ID of the subledger within the loyalty program where these points were added.
     *
     * @return $this
     */
    public function setSubledgerID($subledgerID)
    {
        $this->container['subledgerID'] = $subledgerID;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The amount of added or deducted loyalty points.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason The reason for the points addition or deduction.
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets typeOfChange
     *
     * @return string
     */
    public function getTypeOfChange()
    {
        return $this->container['typeOfChange'];
    }

    /**
     * Sets typeOfChange
     *
     * @param string $typeOfChange The notification source, that is, it indicates whether the points were added or deducted via one of the following routes:  - [The Campaign Manager](/docs/product/getting-started)  - [Management API](/management-api#tag/Loyalty)  - [Rule Engine](/docs/product/applications/evaluation-order-for-rules-and-filters)
     *
     * @return $this
     */
    public function setTypeOfChange($typeOfChange)
    {
        $allowedValues = $this->getTypeOfChangeAllowableValues();
        if (!in_array($typeOfChange, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'typeOfChange', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['typeOfChange'] = $typeOfChange;

        return $this;
    }

    /**
     * Gets employeeName
     *
     * @return string
     */
    public function getEmployeeName()
    {
        return $this->container['employeeName'];
    }

    /**
     * Sets employeeName
     *
     * @param string $employeeName The name of the employee who added or deducted points.
     *
     * @return $this
     */
    public function setEmployeeName($employeeName)
    {
        $this->container['employeeName'] = $employeeName;

        return $this;
    }

    /**
     * Gets userID
     *
     * @return int
     */
    public function getUserID()
    {
        return $this->container['userID'];
    }

    /**
     * Sets userID
     *
     * @param int $userID The ID of the employee who added or deducted points.
     *
     * @return $this
     */
    public function setUserID($userID)
    {

        if (($userID < 1)) {
            throw new \InvalidArgumentException('invalid value for $userID when calling AddedDeductedPointsNotification., must be bigger than or equal to 1.');
        }

        $this->container['userID'] = $userID;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation The action (addition or deduction) made with loyalty points.
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate The start date for loyalty points.
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets expiryDate
     *
     * @return \DateTime|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiryDate'];
    }

    /**
     * Sets expiryDate
     *
     * @param \DateTime|null $expiryDate The expiration date for loyalty points.
     *
     * @return $this
     */
    public function setExpiryDate($expiryDate)
    {
        $this->container['expiryDate'] = $expiryDate;

        return $this;
    }

    /**
     * Gets sessionIntegrationID
     *
     * @return string
     */
    public function getSessionIntegrationID()
    {
        return $this->container['sessionIntegrationID'];
    }

    /**
     * Sets sessionIntegrationID
     *
     * @param string $sessionIntegrationID The integration ID of the session through which the points were earned or lost.
     *
     * @return $this
     */
    public function setSessionIntegrationID($sessionIntegrationID)
    {
        $this->container['sessionIntegrationID'] = $sessionIntegrationID;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


