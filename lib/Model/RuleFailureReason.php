<?php
/**
 * RuleFailureReason
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * RuleFailureReason Class Doc Comment
 *
 * @category Class
 * @description Details about why a rule failed.
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RuleFailureReason implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RuleFailureReason';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'campaignID' => 'int',
        'campaignName' => 'string',
        'rulesetID' => 'int',
        'couponID' => 'int',
        'couponValue' => 'string',
        'referralID' => 'int',
        'referralValue' => 'string',
        'ruleIndex' => 'int',
        'ruleName' => 'string',
        'conditionIndex' => 'int',
        'effectIndex' => 'int',
        'details' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'campaignID' => null,
        'campaignName' => null,
        'rulesetID' => null,
        'couponID' => null,
        'couponValue' => null,
        'referralID' => null,
        'referralValue' => null,
        'ruleIndex' => null,
        'ruleName' => null,
        'conditionIndex' => null,
        'effectIndex' => null,
        'details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaignID' => 'campaignID',
        'campaignName' => 'campaignName',
        'rulesetID' => 'rulesetID',
        'couponID' => 'couponID',
        'couponValue' => 'couponValue',
        'referralID' => 'referralID',
        'referralValue' => 'referralValue',
        'ruleIndex' => 'ruleIndex',
        'ruleName' => 'ruleName',
        'conditionIndex' => 'conditionIndex',
        'effectIndex' => 'effectIndex',
        'details' => 'details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaignID' => 'setCampaignID',
        'campaignName' => 'setCampaignName',
        'rulesetID' => 'setRulesetID',
        'couponID' => 'setCouponID',
        'couponValue' => 'setCouponValue',
        'referralID' => 'setReferralID',
        'referralValue' => 'setReferralValue',
        'ruleIndex' => 'setRuleIndex',
        'ruleName' => 'setRuleName',
        'conditionIndex' => 'setConditionIndex',
        'effectIndex' => 'setEffectIndex',
        'details' => 'setDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaignID' => 'getCampaignID',
        'campaignName' => 'getCampaignName',
        'rulesetID' => 'getRulesetID',
        'couponID' => 'getCouponID',
        'couponValue' => 'getCouponValue',
        'referralID' => 'getReferralID',
        'referralValue' => 'getReferralValue',
        'ruleIndex' => 'getRuleIndex',
        'ruleName' => 'getRuleName',
        'conditionIndex' => 'getConditionIndex',
        'effectIndex' => 'getEffectIndex',
        'details' => 'getDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['campaignID'] = isset($data['campaignID']) ? $data['campaignID'] : null;
        $this->container['campaignName'] = isset($data['campaignName']) ? $data['campaignName'] : null;
        $this->container['rulesetID'] = isset($data['rulesetID']) ? $data['rulesetID'] : null;
        $this->container['couponID'] = isset($data['couponID']) ? $data['couponID'] : null;
        $this->container['couponValue'] = isset($data['couponValue']) ? $data['couponValue'] : null;
        $this->container['referralID'] = isset($data['referralID']) ? $data['referralID'] : null;
        $this->container['referralValue'] = isset($data['referralValue']) ? $data['referralValue'] : null;
        $this->container['ruleIndex'] = isset($data['ruleIndex']) ? $data['ruleIndex'] : null;
        $this->container['ruleName'] = isset($data['ruleName']) ? $data['ruleName'] : null;
        $this->container['conditionIndex'] = isset($data['conditionIndex']) ? $data['conditionIndex'] : null;
        $this->container['effectIndex'] = isset($data['effectIndex']) ? $data['effectIndex'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['campaignID'] === null) {
            $invalidProperties[] = "'campaignID' can't be null";
        }
        if ($this->container['campaignName'] === null) {
            $invalidProperties[] = "'campaignName' can't be null";
        }
        if ($this->container['rulesetID'] === null) {
            $invalidProperties[] = "'rulesetID' can't be null";
        }
        if ($this->container['ruleIndex'] === null) {
            $invalidProperties[] = "'ruleIndex' can't be null";
        }
        if ($this->container['ruleName'] === null) {
            $invalidProperties[] = "'ruleName' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaignID
     *
     * @return int
     */
    public function getCampaignID()
    {
        return $this->container['campaignID'];
    }

    /**
     * Sets campaignID
     *
     * @param int $campaignID The ID of the campaign that contains the rule that failed.
     *
     * @return $this
     */
    public function setCampaignID($campaignID)
    {
        $this->container['campaignID'] = $campaignID;

        return $this;
    }

    /**
     * Gets campaignName
     *
     * @return string
     */
    public function getCampaignName()
    {
        return $this->container['campaignName'];
    }

    /**
     * Sets campaignName
     *
     * @param string $campaignName The name of the campaign that contains the rule that failed.
     *
     * @return $this
     */
    public function setCampaignName($campaignName)
    {
        $this->container['campaignName'] = $campaignName;

        return $this;
    }

    /**
     * Gets rulesetID
     *
     * @return int
     */
    public function getRulesetID()
    {
        return $this->container['rulesetID'];
    }

    /**
     * Sets rulesetID
     *
     * @param int $rulesetID The ID of the ruleset that contains the rule that failed.
     *
     * @return $this
     */
    public function setRulesetID($rulesetID)
    {
        $this->container['rulesetID'] = $rulesetID;

        return $this;
    }

    /**
     * Gets couponID
     *
     * @return int|null
     */
    public function getCouponID()
    {
        return $this->container['couponID'];
    }

    /**
     * Sets couponID
     *
     * @param int|null $couponID The ID of the coupon that was being evaluated at the time of the rule failure.
     *
     * @return $this
     */
    public function setCouponID($couponID)
    {
        $this->container['couponID'] = $couponID;

        return $this;
    }

    /**
     * Gets couponValue
     *
     * @return string|null
     */
    public function getCouponValue()
    {
        return $this->container['couponValue'];
    }

    /**
     * Sets couponValue
     *
     * @param string|null $couponValue The code of the coupon that was being evaluated at the time of the rule failure.
     *
     * @return $this
     */
    public function setCouponValue($couponValue)
    {
        $this->container['couponValue'] = $couponValue;

        return $this;
    }

    /**
     * Gets referralID
     *
     * @return int|null
     */
    public function getReferralID()
    {
        return $this->container['referralID'];
    }

    /**
     * Sets referralID
     *
     * @param int|null $referralID The ID of the referral that was being evaluated at the time of the rule failure.
     *
     * @return $this
     */
    public function setReferralID($referralID)
    {
        $this->container['referralID'] = $referralID;

        return $this;
    }

    /**
     * Gets referralValue
     *
     * @return string|null
     */
    public function getReferralValue()
    {
        return $this->container['referralValue'];
    }

    /**
     * Sets referralValue
     *
     * @param string|null $referralValue The code of the referral that was being evaluated at the time of the rule failure.
     *
     * @return $this
     */
    public function setReferralValue($referralValue)
    {
        $this->container['referralValue'] = $referralValue;

        return $this;
    }

    /**
     * Gets ruleIndex
     *
     * @return int
     */
    public function getRuleIndex()
    {
        return $this->container['ruleIndex'];
    }

    /**
     * Sets ruleIndex
     *
     * @param int $ruleIndex The index of the rule that failed within the ruleset.
     *
     * @return $this
     */
    public function setRuleIndex($ruleIndex)
    {
        $this->container['ruleIndex'] = $ruleIndex;

        return $this;
    }

    /**
     * Gets ruleName
     *
     * @return string
     */
    public function getRuleName()
    {
        return $this->container['ruleName'];
    }

    /**
     * Sets ruleName
     *
     * @param string $ruleName The name of the rule that failed within the ruleset.
     *
     * @return $this
     */
    public function setRuleName($ruleName)
    {
        $this->container['ruleName'] = $ruleName;

        return $this;
    }

    /**
     * Gets conditionIndex
     *
     * @return int|null
     */
    public function getConditionIndex()
    {
        return $this->container['conditionIndex'];
    }

    /**
     * Sets conditionIndex
     *
     * @param int|null $conditionIndex The index of the condition that failed.
     *
     * @return $this
     */
    public function setConditionIndex($conditionIndex)
    {
        $this->container['conditionIndex'] = $conditionIndex;

        return $this;
    }

    /**
     * Gets effectIndex
     *
     * @return int|null
     */
    public function getEffectIndex()
    {
        return $this->container['effectIndex'];
    }

    /**
     * Sets effectIndex
     *
     * @param int|null $effectIndex The index of the effect that failed.
     *
     * @return $this
     */
    public function setEffectIndex($effectIndex)
    {
        $this->container['effectIndex'] = $effectIndex;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string|null $details More details about the failure.
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


