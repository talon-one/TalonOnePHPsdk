<?php
/**
 * LoyaltySubLedger
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * LoyaltySubLedger Class Doc Comment
 *
 * @category Class
 * @description Ledger of Balance in Loyalty Program for a Customer
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LoyaltySubLedger implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoyaltySubLedger';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total' => 'float',
        'totalActivePoints' => 'float',
        'totalPendingPoints' => 'float',
        'totalSpentPoints' => 'float',
        'totalExpiredPoints' => 'float',
        'transactions' => '\TalonOne\Client\Model\LoyaltyLedgerEntry[]',
        'expiringPoints' => '\TalonOne\Client\Model\LoyaltyLedgerEntry[]',
        'activePoints' => '\TalonOne\Client\Model\LoyaltyLedgerEntry[]',
        'pendingPoints' => '\TalonOne\Client\Model\LoyaltyLedgerEntry[]',
        'expiredPoints' => '\TalonOne\Client\Model\LoyaltyLedgerEntry[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'total' => null,
        'totalActivePoints' => null,
        'totalPendingPoints' => null,
        'totalSpentPoints' => null,
        'totalExpiredPoints' => null,
        'transactions' => null,
        'expiringPoints' => null,
        'activePoints' => null,
        'pendingPoints' => null,
        'expiredPoints' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total' => 'total',
        'totalActivePoints' => 'totalActivePoints',
        'totalPendingPoints' => 'totalPendingPoints',
        'totalSpentPoints' => 'totalSpentPoints',
        'totalExpiredPoints' => 'totalExpiredPoints',
        'transactions' => 'transactions',
        'expiringPoints' => 'expiringPoints',
        'activePoints' => 'activePoints',
        'pendingPoints' => 'pendingPoints',
        'expiredPoints' => 'expiredPoints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total' => 'setTotal',
        'totalActivePoints' => 'setTotalActivePoints',
        'totalPendingPoints' => 'setTotalPendingPoints',
        'totalSpentPoints' => 'setTotalSpentPoints',
        'totalExpiredPoints' => 'setTotalExpiredPoints',
        'transactions' => 'setTransactions',
        'expiringPoints' => 'setExpiringPoints',
        'activePoints' => 'setActivePoints',
        'pendingPoints' => 'setPendingPoints',
        'expiredPoints' => 'setExpiredPoints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total' => 'getTotal',
        'totalActivePoints' => 'getTotalActivePoints',
        'totalPendingPoints' => 'getTotalPendingPoints',
        'totalSpentPoints' => 'getTotalSpentPoints',
        'totalExpiredPoints' => 'getTotalExpiredPoints',
        'transactions' => 'getTransactions',
        'expiringPoints' => 'getExpiringPoints',
        'activePoints' => 'getActivePoints',
        'pendingPoints' => 'getPendingPoints',
        'expiredPoints' => 'getExpiredPoints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['totalActivePoints'] = isset($data['totalActivePoints']) ? $data['totalActivePoints'] : null;
        $this->container['totalPendingPoints'] = isset($data['totalPendingPoints']) ? $data['totalPendingPoints'] : null;
        $this->container['totalSpentPoints'] = isset($data['totalSpentPoints']) ? $data['totalSpentPoints'] : null;
        $this->container['totalExpiredPoints'] = isset($data['totalExpiredPoints']) ? $data['totalExpiredPoints'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['expiringPoints'] = isset($data['expiringPoints']) ? $data['expiringPoints'] : null;
        $this->container['activePoints'] = isset($data['activePoints']) ? $data['activePoints'] : null;
        $this->container['pendingPoints'] = isset($data['pendingPoints']) ? $data['pendingPoints'] : null;
        $this->container['expiredPoints'] = isset($data['expiredPoints']) ? $data['expiredPoints'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        if ($this->container['totalActivePoints'] === null) {
            $invalidProperties[] = "'totalActivePoints' can't be null";
        }
        if ($this->container['totalPendingPoints'] === null) {
            $invalidProperties[] = "'totalPendingPoints' can't be null";
        }
        if ($this->container['totalSpentPoints'] === null) {
            $invalidProperties[] = "'totalSpentPoints' can't be null";
        }
        if ($this->container['totalExpiredPoints'] === null) {
            $invalidProperties[] = "'totalExpiredPoints' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total
     *
     * @return float
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float $total ⚠️ Deprecated: Please use 'totalActivePoints' property instead. Total amount of currently active and available points in the customer's balance
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets totalActivePoints
     *
     * @return float
     */
    public function getTotalActivePoints()
    {
        return $this->container['totalActivePoints'];
    }

    /**
     * Sets totalActivePoints
     *
     * @param float $totalActivePoints Total amount of currently active and available points in the customer's balance
     *
     * @return $this
     */
    public function setTotalActivePoints($totalActivePoints)
    {
        $this->container['totalActivePoints'] = $totalActivePoints;

        return $this;
    }

    /**
     * Gets totalPendingPoints
     *
     * @return float
     */
    public function getTotalPendingPoints()
    {
        return $this->container['totalPendingPoints'];
    }

    /**
     * Sets totalPendingPoints
     *
     * @param float $totalPendingPoints Total amount of pending points, which are not active yet but will become active in the future
     *
     * @return $this
     */
    public function setTotalPendingPoints($totalPendingPoints)
    {
        $this->container['totalPendingPoints'] = $totalPendingPoints;

        return $this;
    }

    /**
     * Gets totalSpentPoints
     *
     * @return float
     */
    public function getTotalSpentPoints()
    {
        return $this->container['totalSpentPoints'];
    }

    /**
     * Sets totalSpentPoints
     *
     * @param float $totalSpentPoints Total amount of points already spent by this customer
     *
     * @return $this
     */
    public function setTotalSpentPoints($totalSpentPoints)
    {
        $this->container['totalSpentPoints'] = $totalSpentPoints;

        return $this;
    }

    /**
     * Gets totalExpiredPoints
     *
     * @return float
     */
    public function getTotalExpiredPoints()
    {
        return $this->container['totalExpiredPoints'];
    }

    /**
     * Sets totalExpiredPoints
     *
     * @param float $totalExpiredPoints Total amount of points, that expired without ever being spent
     *
     * @return $this
     */
    public function setTotalExpiredPoints($totalExpiredPoints)
    {
        $this->container['totalExpiredPoints'] = $totalExpiredPoints;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \TalonOne\Client\Model\LoyaltyLedgerEntry[]|null
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \TalonOne\Client\Model\LoyaltyLedgerEntry[]|null $transactions List of all events that have happened such as additions, subtractions and expiries
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets expiringPoints
     *
     * @return \TalonOne\Client\Model\LoyaltyLedgerEntry[]|null
     */
    public function getExpiringPoints()
    {
        return $this->container['expiringPoints'];
    }

    /**
     * Sets expiringPoints
     *
     * @param \TalonOne\Client\Model\LoyaltyLedgerEntry[]|null $expiringPoints List of all points that will expire
     *
     * @return $this
     */
    public function setExpiringPoints($expiringPoints)
    {
        $this->container['expiringPoints'] = $expiringPoints;

        return $this;
    }

    /**
     * Gets activePoints
     *
     * @return \TalonOne\Client\Model\LoyaltyLedgerEntry[]|null
     */
    public function getActivePoints()
    {
        return $this->container['activePoints'];
    }

    /**
     * Sets activePoints
     *
     * @param \TalonOne\Client\Model\LoyaltyLedgerEntry[]|null $activePoints List of all currently active points
     *
     * @return $this
     */
    public function setActivePoints($activePoints)
    {
        $this->container['activePoints'] = $activePoints;

        return $this;
    }

    /**
     * Gets pendingPoints
     *
     * @return \TalonOne\Client\Model\LoyaltyLedgerEntry[]|null
     */
    public function getPendingPoints()
    {
        return $this->container['pendingPoints'];
    }

    /**
     * Sets pendingPoints
     *
     * @param \TalonOne\Client\Model\LoyaltyLedgerEntry[]|null $pendingPoints List of all points pending activation
     *
     * @return $this
     */
    public function setPendingPoints($pendingPoints)
    {
        $this->container['pendingPoints'] = $pendingPoints;

        return $this;
    }

    /**
     * Gets expiredPoints
     *
     * @return \TalonOne\Client\Model\LoyaltyLedgerEntry[]|null
     */
    public function getExpiredPoints()
    {
        return $this->container['expiredPoints'];
    }

    /**
     * Sets expiredPoints
     *
     * @param \TalonOne\Client\Model\LoyaltyLedgerEntry[]|null $expiredPoints List of expired points
     *
     * @return $this
     */
    public function setExpiredPoints($expiredPoints)
    {
        $this->container['expiredPoints'] = $expiredPoints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


