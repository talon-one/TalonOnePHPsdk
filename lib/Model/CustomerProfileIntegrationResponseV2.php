<?php
/**
 * CustomerProfileIntegrationResponseV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Model;

use \ArrayAccess;
use \TalonOne\Client\ObjectSerializer;

/**
 * CustomerProfileIntegrationResponseV2 Class Doc Comment
 *
 * @category Class
 * @description This is the response type returned by the updateCustomerProfileV2 endpoint.
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerProfileIntegrationResponseV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerProfileIntegrationResponseV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customerProfile' => '\TalonOne\Client\Model\CustomerProfile',
        'event' => '\TalonOne\Client\Model\Event',
        'loyalty' => '\TalonOne\Client\Model\Loyalty',
        'triggeredCampaigns' => '\TalonOne\Client\Model\Campaign[]',
        'ruleFailureReasons' => '\TalonOne\Client\Model\RuleFailureReason[]',
        'awardedGiveaways' => '\TalonOne\Client\Model\Giveaway[]',
        'effects' => '\TalonOne\Client\Model\Effect[]',
        'createdCoupons' => '\TalonOne\Client\Model\Coupon[]',
        'createdReferrals' => '\TalonOne\Client\Model\Referral[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'customerProfile' => null,
        'event' => null,
        'loyalty' => null,
        'triggeredCampaigns' => null,
        'ruleFailureReasons' => null,
        'awardedGiveaways' => null,
        'effects' => null,
        'createdCoupons' => null,
        'createdReferrals' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customerProfile' => 'customerProfile',
        'event' => 'event',
        'loyalty' => 'loyalty',
        'triggeredCampaigns' => 'triggeredCampaigns',
        'ruleFailureReasons' => 'ruleFailureReasons',
        'awardedGiveaways' => 'awardedGiveaways',
        'effects' => 'effects',
        'createdCoupons' => 'createdCoupons',
        'createdReferrals' => 'createdReferrals'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customerProfile' => 'setCustomerProfile',
        'event' => 'setEvent',
        'loyalty' => 'setLoyalty',
        'triggeredCampaigns' => 'setTriggeredCampaigns',
        'ruleFailureReasons' => 'setRuleFailureReasons',
        'awardedGiveaways' => 'setAwardedGiveaways',
        'effects' => 'setEffects',
        'createdCoupons' => 'setCreatedCoupons',
        'createdReferrals' => 'setCreatedReferrals'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customerProfile' => 'getCustomerProfile',
        'event' => 'getEvent',
        'loyalty' => 'getLoyalty',
        'triggeredCampaigns' => 'getTriggeredCampaigns',
        'ruleFailureReasons' => 'getRuleFailureReasons',
        'awardedGiveaways' => 'getAwardedGiveaways',
        'effects' => 'getEffects',
        'createdCoupons' => 'getCreatedCoupons',
        'createdReferrals' => 'getCreatedReferrals'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customerProfile'] = isset($data['customerProfile']) ? $data['customerProfile'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['loyalty'] = isset($data['loyalty']) ? $data['loyalty'] : null;
        $this->container['triggeredCampaigns'] = isset($data['triggeredCampaigns']) ? $data['triggeredCampaigns'] : null;
        $this->container['ruleFailureReasons'] = isset($data['ruleFailureReasons']) ? $data['ruleFailureReasons'] : null;
        $this->container['awardedGiveaways'] = isset($data['awardedGiveaways']) ? $data['awardedGiveaways'] : null;
        $this->container['effects'] = isset($data['effects']) ? $data['effects'] : null;
        $this->container['createdCoupons'] = isset($data['createdCoupons']) ? $data['createdCoupons'] : null;
        $this->container['createdReferrals'] = isset($data['createdReferrals']) ? $data['createdReferrals'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['effects'] === null) {
            $invalidProperties[] = "'effects' can't be null";
        }
        if ($this->container['createdCoupons'] === null) {
            $invalidProperties[] = "'createdCoupons' can't be null";
        }
        if ($this->container['createdReferrals'] === null) {
            $invalidProperties[] = "'createdReferrals' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customerProfile
     *
     * @return \TalonOne\Client\Model\CustomerProfile|null
     */
    public function getCustomerProfile()
    {
        return $this->container['customerProfile'];
    }

    /**
     * Sets customerProfile
     *
     * @param \TalonOne\Client\Model\CustomerProfile|null $customerProfile customerProfile
     *
     * @return $this
     */
    public function setCustomerProfile($customerProfile)
    {
        $this->container['customerProfile'] = $customerProfile;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \TalonOne\Client\Model\Event|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \TalonOne\Client\Model\Event|null $event event
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets loyalty
     *
     * @return \TalonOne\Client\Model\Loyalty|null
     */
    public function getLoyalty()
    {
        return $this->container['loyalty'];
    }

    /**
     * Sets loyalty
     *
     * @param \TalonOne\Client\Model\Loyalty|null $loyalty loyalty
     *
     * @return $this
     */
    public function setLoyalty($loyalty)
    {
        $this->container['loyalty'] = $loyalty;

        return $this;
    }

    /**
     * Gets triggeredCampaigns
     *
     * @return \TalonOne\Client\Model\Campaign[]|null
     */
    public function getTriggeredCampaigns()
    {
        return $this->container['triggeredCampaigns'];
    }

    /**
     * Sets triggeredCampaigns
     *
     * @param \TalonOne\Client\Model\Campaign[]|null $triggeredCampaigns triggeredCampaigns
     *
     * @return $this
     */
    public function setTriggeredCampaigns($triggeredCampaigns)
    {
        $this->container['triggeredCampaigns'] = $triggeredCampaigns;

        return $this;
    }

    /**
     * Gets ruleFailureReasons
     *
     * @return \TalonOne\Client\Model\RuleFailureReason[]|null
     */
    public function getRuleFailureReasons()
    {
        return $this->container['ruleFailureReasons'];
    }

    /**
     * Sets ruleFailureReasons
     *
     * @param \TalonOne\Client\Model\RuleFailureReason[]|null $ruleFailureReasons ruleFailureReasons
     *
     * @return $this
     */
    public function setRuleFailureReasons($ruleFailureReasons)
    {
        $this->container['ruleFailureReasons'] = $ruleFailureReasons;

        return $this;
    }

    /**
     * Gets awardedGiveaways
     *
     * @return \TalonOne\Client\Model\Giveaway[]|null
     */
    public function getAwardedGiveaways()
    {
        return $this->container['awardedGiveaways'];
    }

    /**
     * Sets awardedGiveaways
     *
     * @param \TalonOne\Client\Model\Giveaway[]|null $awardedGiveaways awardedGiveaways
     *
     * @return $this
     */
    public function setAwardedGiveaways($awardedGiveaways)
    {
        $this->container['awardedGiveaways'] = $awardedGiveaways;

        return $this;
    }

    /**
     * Gets effects
     *
     * @return \TalonOne\Client\Model\Effect[]
     */
    public function getEffects()
    {
        return $this->container['effects'];
    }

    /**
     * Sets effects
     *
     * @param \TalonOne\Client\Model\Effect[] $effects The effects generated by the rules in your running campaigns. See [API effects](https://docs.talon.one/docs/dev/integration-api/api-effects).
     *
     * @return $this
     */
    public function setEffects($effects)
    {
        $this->container['effects'] = $effects;

        return $this;
    }

    /**
     * Gets createdCoupons
     *
     * @return \TalonOne\Client\Model\Coupon[]
     */
    public function getCreatedCoupons()
    {
        return $this->container['createdCoupons'];
    }

    /**
     * Sets createdCoupons
     *
     * @param \TalonOne\Client\Model\Coupon[] $createdCoupons createdCoupons
     *
     * @return $this
     */
    public function setCreatedCoupons($createdCoupons)
    {
        $this->container['createdCoupons'] = $createdCoupons;

        return $this;
    }

    /**
     * Gets createdReferrals
     *
     * @return \TalonOne\Client\Model\Referral[]
     */
    public function getCreatedReferrals()
    {
        return $this->container['createdReferrals'];
    }

    /**
     * Sets createdReferrals
     *
     * @param \TalonOne\Client\Model\Referral[] $createdReferrals createdReferrals
     *
     * @return $this
     */
    public function setCreatedReferrals($createdReferrals)
    {
        $this->container['createdReferrals'] = $createdReferrals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


