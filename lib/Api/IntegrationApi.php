<?php
/**
 * IntegrationApi
 * PHP version 5
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TalonOne\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TalonOne\Client\ApiException;
use TalonOne\Client\Configuration;
use TalonOne\Client\HeaderSelector;
use TalonOne\Client\ObjectSerializer;

/**
 * IntegrationApi Class Doc Comment
 *
 * @category Class
 * @package  TalonOne\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IntegrationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCouponReservation
     *
     * Create a new coupon reservation
     *
     * @param  string $couponValue The value of a coupon (required)
     * @param  \TalonOne\Client\Model\CouponReservations $couponReservations couponReservations (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TalonOne\Client\Model\Coupon
     */
    public function createCouponReservation($couponValue, $couponReservations)
    {
        list($response) = $this->createCouponReservationWithHttpInfo($couponValue, $couponReservations);
        return $response;
    }

    /**
     * Operation createCouponReservationWithHttpInfo
     *
     * Create a new coupon reservation
     *
     * @param  string $couponValue The value of a coupon (required)
     * @param  \TalonOne\Client\Model\CouponReservations $couponReservations (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TalonOne\Client\Model\Coupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCouponReservationWithHttpInfo($couponValue, $couponReservations)
    {
        $request = $this->createCouponReservationRequest($couponValue, $couponReservations);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TalonOne\Client\Model\Coupon' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TalonOne\Client\Model\Coupon', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TalonOne\Client\Model\Coupon';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TalonOne\Client\Model\Coupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCouponReservationAsync
     *
     * Create a new coupon reservation
     *
     * @param  string $couponValue The value of a coupon (required)
     * @param  \TalonOne\Client\Model\CouponReservations $couponReservations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCouponReservationAsync($couponValue, $couponReservations)
    {
        return $this->createCouponReservationAsyncWithHttpInfo($couponValue, $couponReservations)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCouponReservationAsyncWithHttpInfo
     *
     * Create a new coupon reservation
     *
     * @param  string $couponValue The value of a coupon (required)
     * @param  \TalonOne\Client\Model\CouponReservations $couponReservations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCouponReservationAsyncWithHttpInfo($couponValue, $couponReservations)
    {
        $returnType = '\TalonOne\Client\Model\Coupon';
        $request = $this->createCouponReservationRequest($couponValue, $couponReservations);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCouponReservation'
     *
     * @param  string $couponValue The value of a coupon (required)
     * @param  \TalonOne\Client\Model\CouponReservations $couponReservations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCouponReservationRequest($couponValue, $couponReservations)
    {
        // verify the required parameter 'couponValue' is set
        if ($couponValue === null || (is_array($couponValue) && count($couponValue) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponValue when calling createCouponReservation'
            );
        }
        // verify the required parameter 'couponReservations' is set
        if ($couponReservations === null || (is_array($couponReservations) && count($couponReservations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponReservations when calling createCouponReservation'
            );
        }

        $resourcePath = '/v1/coupon_reservations/{couponValue}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($couponValue !== null) {
            $resourcePath = str_replace(
                '{' . 'couponValue' . '}',
                ObjectSerializer::toPathValue($couponValue),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($couponReservations)) {
            $_tempBody = $couponReservations;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createReferral
     *
     * Create a referral code for an advocate
     *
     * @param  \TalonOne\Client\Model\NewReferral $newReferral newReferral (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TalonOne\Client\Model\Referral
     */
    public function createReferral($newReferral)
    {
        list($response) = $this->createReferralWithHttpInfo($newReferral);
        return $response;
    }

    /**
     * Operation createReferralWithHttpInfo
     *
     * Create a referral code for an advocate
     *
     * @param  \TalonOne\Client\Model\NewReferral $newReferral (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TalonOne\Client\Model\Referral, HTTP status code, HTTP response headers (array of strings)
     */
    public function createReferralWithHttpInfo($newReferral)
    {
        $request = $this->createReferralRequest($newReferral);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TalonOne\Client\Model\Referral' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TalonOne\Client\Model\Referral', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TalonOne\Client\Model\Referral';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TalonOne\Client\Model\Referral',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createReferralAsync
     *
     * Create a referral code for an advocate
     *
     * @param  \TalonOne\Client\Model\NewReferral $newReferral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReferralAsync($newReferral)
    {
        return $this->createReferralAsyncWithHttpInfo($newReferral)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createReferralAsyncWithHttpInfo
     *
     * Create a referral code for an advocate
     *
     * @param  \TalonOne\Client\Model\NewReferral $newReferral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReferralAsyncWithHttpInfo($newReferral)
    {
        $returnType = '\TalonOne\Client\Model\Referral';
        $request = $this->createReferralRequest($newReferral);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createReferral'
     *
     * @param  \TalonOne\Client\Model\NewReferral $newReferral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createReferralRequest($newReferral)
    {
        // verify the required parameter 'newReferral' is set
        if ($newReferral === null || (is_array($newReferral) && count($newReferral) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newReferral when calling createReferral'
            );
        }

        $resourcePath = '/v1/referrals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($newReferral)) {
            $_tempBody = $newReferral;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createReferralsForMultipleAdvocates
     *
     * Create referral codes for multiple advocates
     *
     * @param  \TalonOne\Client\Model\NewReferralsForMultipleAdvocates $newReferralsForMultipleAdvocates newReferralsForMultipleAdvocates (required)
     * @param  string $silent If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TalonOne\Client\Model\InlineResponse201
     */
    public function createReferralsForMultipleAdvocates($newReferralsForMultipleAdvocates, $silent = null)
    {
        list($response) = $this->createReferralsForMultipleAdvocatesWithHttpInfo($newReferralsForMultipleAdvocates, $silent);
        return $response;
    }

    /**
     * Operation createReferralsForMultipleAdvocatesWithHttpInfo
     *
     * Create referral codes for multiple advocates
     *
     * @param  \TalonOne\Client\Model\NewReferralsForMultipleAdvocates $newReferralsForMultipleAdvocates (required)
     * @param  string $silent If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TalonOne\Client\Model\InlineResponse201, HTTP status code, HTTP response headers (array of strings)
     */
    public function createReferralsForMultipleAdvocatesWithHttpInfo($newReferralsForMultipleAdvocates, $silent = null)
    {
        $request = $this->createReferralsForMultipleAdvocatesRequest($newReferralsForMultipleAdvocates, $silent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TalonOne\Client\Model\InlineResponse201' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TalonOne\Client\Model\InlineResponse201', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TalonOne\Client\Model\InlineResponse201';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TalonOne\Client\Model\InlineResponse201',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createReferralsForMultipleAdvocatesAsync
     *
     * Create referral codes for multiple advocates
     *
     * @param  \TalonOne\Client\Model\NewReferralsForMultipleAdvocates $newReferralsForMultipleAdvocates (required)
     * @param  string $silent If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReferralsForMultipleAdvocatesAsync($newReferralsForMultipleAdvocates, $silent = null)
    {
        return $this->createReferralsForMultipleAdvocatesAsyncWithHttpInfo($newReferralsForMultipleAdvocates, $silent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createReferralsForMultipleAdvocatesAsyncWithHttpInfo
     *
     * Create referral codes for multiple advocates
     *
     * @param  \TalonOne\Client\Model\NewReferralsForMultipleAdvocates $newReferralsForMultipleAdvocates (required)
     * @param  string $silent If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReferralsForMultipleAdvocatesAsyncWithHttpInfo($newReferralsForMultipleAdvocates, $silent = null)
    {
        $returnType = '\TalonOne\Client\Model\InlineResponse201';
        $request = $this->createReferralsForMultipleAdvocatesRequest($newReferralsForMultipleAdvocates, $silent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createReferralsForMultipleAdvocates'
     *
     * @param  \TalonOne\Client\Model\NewReferralsForMultipleAdvocates $newReferralsForMultipleAdvocates (required)
     * @param  string $silent If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createReferralsForMultipleAdvocatesRequest($newReferralsForMultipleAdvocates, $silent = null)
    {
        // verify the required parameter 'newReferralsForMultipleAdvocates' is set
        if ($newReferralsForMultipleAdvocates === null || (is_array($newReferralsForMultipleAdvocates) && count($newReferralsForMultipleAdvocates) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newReferralsForMultipleAdvocates when calling createReferralsForMultipleAdvocates'
            );
        }

        $resourcePath = '/v1/referrals_for_multiple_advocates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($silent !== null) {
            if('form' === 'form' && is_array($silent)) {
                foreach($silent as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['silent'] = $silent;
            }
        }



        // body params
        $_tempBody = null;
        if (isset($newReferralsForMultipleAdvocates)) {
            $_tempBody = $newReferralsForMultipleAdvocates;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCouponReservation
     *
     * Delete coupon reservations
     *
     * @param  string $couponValue The value of a coupon (required)
     * @param  \TalonOne\Client\Model\CouponReservations $couponReservations couponReservations (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCouponReservation($couponValue, $couponReservations)
    {
        $this->deleteCouponReservationWithHttpInfo($couponValue, $couponReservations);
    }

    /**
     * Operation deleteCouponReservationWithHttpInfo
     *
     * Delete coupon reservations
     *
     * @param  string $couponValue The value of a coupon (required)
     * @param  \TalonOne\Client\Model\CouponReservations $couponReservations (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCouponReservationWithHttpInfo($couponValue, $couponReservations)
    {
        $request = $this->deleteCouponReservationRequest($couponValue, $couponReservations);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCouponReservationAsync
     *
     * Delete coupon reservations
     *
     * @param  string $couponValue The value of a coupon (required)
     * @param  \TalonOne\Client\Model\CouponReservations $couponReservations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponReservationAsync($couponValue, $couponReservations)
    {
        return $this->deleteCouponReservationAsyncWithHttpInfo($couponValue, $couponReservations)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCouponReservationAsyncWithHttpInfo
     *
     * Delete coupon reservations
     *
     * @param  string $couponValue The value of a coupon (required)
     * @param  \TalonOne\Client\Model\CouponReservations $couponReservations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponReservationAsyncWithHttpInfo($couponValue, $couponReservations)
    {
        $returnType = '';
        $request = $this->deleteCouponReservationRequest($couponValue, $couponReservations);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCouponReservation'
     *
     * @param  string $couponValue The value of a coupon (required)
     * @param  \TalonOne\Client\Model\CouponReservations $couponReservations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCouponReservationRequest($couponValue, $couponReservations)
    {
        // verify the required parameter 'couponValue' is set
        if ($couponValue === null || (is_array($couponValue) && count($couponValue) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponValue when calling deleteCouponReservation'
            );
        }
        // verify the required parameter 'couponReservations' is set
        if ($couponReservations === null || (is_array($couponReservations) && count($couponReservations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponReservations when calling deleteCouponReservation'
            );
        }

        $resourcePath = '/v1/coupon_reservations/{couponValue}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($couponValue !== null) {
            $resourcePath = str_replace(
                '{' . 'couponValue' . '}',
                ObjectSerializer::toPathValue($couponValue),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($couponReservations)) {
            $_tempBody = $couponReservations;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomerData
     *
     * Delete the personal data of a customer
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCustomerData($integrationId)
    {
        $this->deleteCustomerDataWithHttpInfo($integrationId);
    }

    /**
     * Operation deleteCustomerDataWithHttpInfo
     *
     * Delete the personal data of a customer
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomerDataWithHttpInfo($integrationId)
    {
        $request = $this->deleteCustomerDataRequest($integrationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomerDataAsync
     *
     * Delete the personal data of a customer
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerDataAsync($integrationId)
    {
        return $this->deleteCustomerDataAsyncWithHttpInfo($integrationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomerDataAsyncWithHttpInfo
     *
     * Delete the personal data of a customer
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerDataAsyncWithHttpInfo($integrationId)
    {
        $returnType = '';
        $request = $this->deleteCustomerDataRequest($integrationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomerData'
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCustomerDataRequest($integrationId)
    {
        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integrationId when calling deleteCustomerData'
            );
        }

        $resourcePath = '/v1/customer_data/{integrationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationId' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerInventory
     *
     * Get an inventory of all data associated with a specific customer profile
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     * @param  bool $profile optional flag to decide if you would like customer profile information in the response (optional)
     * @param  bool $referrals optional flag to decide if you would like referral information in the response (optional)
     * @param  bool $coupons optional flag to decide if you would like coupon information in the response (optional)
     * @param  bool $loyalty optional flag to decide if you would like loyalty information in the response (optional)
     * @param  bool $giveaways optional flag to decide if you would like giveaways information in the response (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TalonOne\Client\Model\CustomerInventory
     */
    public function getCustomerInventory($integrationId, $profile = null, $referrals = null, $coupons = null, $loyalty = null, $giveaways = null)
    {
        list($response) = $this->getCustomerInventoryWithHttpInfo($integrationId, $profile, $referrals, $coupons, $loyalty, $giveaways);
        return $response;
    }

    /**
     * Operation getCustomerInventoryWithHttpInfo
     *
     * Get an inventory of all data associated with a specific customer profile
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     * @param  bool $profile optional flag to decide if you would like customer profile information in the response (optional)
     * @param  bool $referrals optional flag to decide if you would like referral information in the response (optional)
     * @param  bool $coupons optional flag to decide if you would like coupon information in the response (optional)
     * @param  bool $loyalty optional flag to decide if you would like loyalty information in the response (optional)
     * @param  bool $giveaways optional flag to decide if you would like giveaways information in the response (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TalonOne\Client\Model\CustomerInventory, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerInventoryWithHttpInfo($integrationId, $profile = null, $referrals = null, $coupons = null, $loyalty = null, $giveaways = null)
    {
        $request = $this->getCustomerInventoryRequest($integrationId, $profile, $referrals, $coupons, $loyalty, $giveaways);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TalonOne\Client\Model\CustomerInventory' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TalonOne\Client\Model\CustomerInventory', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TalonOne\Client\Model\CustomerInventory';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TalonOne\Client\Model\CustomerInventory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerInventoryAsync
     *
     * Get an inventory of all data associated with a specific customer profile
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     * @param  bool $profile optional flag to decide if you would like customer profile information in the response (optional)
     * @param  bool $referrals optional flag to decide if you would like referral information in the response (optional)
     * @param  bool $coupons optional flag to decide if you would like coupon information in the response (optional)
     * @param  bool $loyalty optional flag to decide if you would like loyalty information in the response (optional)
     * @param  bool $giveaways optional flag to decide if you would like giveaways information in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerInventoryAsync($integrationId, $profile = null, $referrals = null, $coupons = null, $loyalty = null, $giveaways = null)
    {
        return $this->getCustomerInventoryAsyncWithHttpInfo($integrationId, $profile, $referrals, $coupons, $loyalty, $giveaways)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerInventoryAsyncWithHttpInfo
     *
     * Get an inventory of all data associated with a specific customer profile
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     * @param  bool $profile optional flag to decide if you would like customer profile information in the response (optional)
     * @param  bool $referrals optional flag to decide if you would like referral information in the response (optional)
     * @param  bool $coupons optional flag to decide if you would like coupon information in the response (optional)
     * @param  bool $loyalty optional flag to decide if you would like loyalty information in the response (optional)
     * @param  bool $giveaways optional flag to decide if you would like giveaways information in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerInventoryAsyncWithHttpInfo($integrationId, $profile = null, $referrals = null, $coupons = null, $loyalty = null, $giveaways = null)
    {
        $returnType = '\TalonOne\Client\Model\CustomerInventory';
        $request = $this->getCustomerInventoryRequest($integrationId, $profile, $referrals, $coupons, $loyalty, $giveaways);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerInventory'
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     * @param  bool $profile optional flag to decide if you would like customer profile information in the response (optional)
     * @param  bool $referrals optional flag to decide if you would like referral information in the response (optional)
     * @param  bool $coupons optional flag to decide if you would like coupon information in the response (optional)
     * @param  bool $loyalty optional flag to decide if you would like loyalty information in the response (optional)
     * @param  bool $giveaways optional flag to decide if you would like giveaways information in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerInventoryRequest($integrationId, $profile = null, $referrals = null, $coupons = null, $loyalty = null, $giveaways = null)
    {
        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integrationId when calling getCustomerInventory'
            );
        }

        $resourcePath = '/v1/customer_profiles/{integrationId}/inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile !== null) {
            if('form' === 'form' && is_array($profile)) {
                foreach($profile as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['profile'] = $profile;
            }
        }
        // query params
        if ($referrals !== null) {
            if('form' === 'form' && is_array($referrals)) {
                foreach($referrals as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['referrals'] = $referrals;
            }
        }
        // query params
        if ($coupons !== null) {
            if('form' === 'form' && is_array($coupons)) {
                foreach($coupons as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['coupons'] = $coupons;
            }
        }
        // query params
        if ($loyalty !== null) {
            if('form' === 'form' && is_array($loyalty)) {
                foreach($loyalty as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loyalty'] = $loyalty;
            }
        }
        // query params
        if ($giveaways !== null) {
            if('form' === 'form' && is_array($giveaways)) {
                foreach($giveaways as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['giveaways'] = $giveaways;
            }
        }


        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationId' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReservedCustomers
     *
     * Get the users that have this coupon reserved
     *
     * @param  string $couponValue The value of a coupon (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TalonOne\Client\Model\InlineResponse200
     */
    public function getReservedCustomers($couponValue)
    {
        list($response) = $this->getReservedCustomersWithHttpInfo($couponValue);
        return $response;
    }

    /**
     * Operation getReservedCustomersWithHttpInfo
     *
     * Get the users that have this coupon reserved
     *
     * @param  string $couponValue The value of a coupon (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TalonOne\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReservedCustomersWithHttpInfo($couponValue)
    {
        $request = $this->getReservedCustomersRequest($couponValue);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TalonOne\Client\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TalonOne\Client\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TalonOne\Client\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TalonOne\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReservedCustomersAsync
     *
     * Get the users that have this coupon reserved
     *
     * @param  string $couponValue The value of a coupon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReservedCustomersAsync($couponValue)
    {
        return $this->getReservedCustomersAsyncWithHttpInfo($couponValue)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReservedCustomersAsyncWithHttpInfo
     *
     * Get the users that have this coupon reserved
     *
     * @param  string $couponValue The value of a coupon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReservedCustomersAsyncWithHttpInfo($couponValue)
    {
        $returnType = '\TalonOne\Client\Model\InlineResponse200';
        $request = $this->getReservedCustomersRequest($couponValue);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReservedCustomers'
     *
     * @param  string $couponValue The value of a coupon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getReservedCustomersRequest($couponValue)
    {
        // verify the required parameter 'couponValue' is set
        if ($couponValue === null || (is_array($couponValue) && count($couponValue) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponValue when calling getReservedCustomers'
            );
        }

        $resourcePath = '/v1/coupon_reservations/customerprofiles/{couponValue}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($couponValue !== null) {
            $resourcePath = str_replace(
                '{' . 'couponValue' . '}',
                ObjectSerializer::toPathValue($couponValue),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trackEvent
     *
     * Track an Event
     *
     * @param  \TalonOne\Client\Model\NewEvent $newEvent newEvent (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TalonOne\Client\Model\IntegrationState
     */
    public function trackEvent($newEvent, $dry = null)
    {
        list($response) = $this->trackEventWithHttpInfo($newEvent, $dry);
        return $response;
    }

    /**
     * Operation trackEventWithHttpInfo
     *
     * Track an Event
     *
     * @param  \TalonOne\Client\Model\NewEvent $newEvent (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TalonOne\Client\Model\IntegrationState, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackEventWithHttpInfo($newEvent, $dry = null)
    {
        $request = $this->trackEventRequest($newEvent, $dry);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TalonOne\Client\Model\IntegrationState' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TalonOne\Client\Model\IntegrationState', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TalonOne\Client\Model\IntegrationState';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TalonOne\Client\Model\IntegrationState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trackEventAsync
     *
     * Track an Event
     *
     * @param  \TalonOne\Client\Model\NewEvent $newEvent (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackEventAsync($newEvent, $dry = null)
    {
        return $this->trackEventAsyncWithHttpInfo($newEvent, $dry)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trackEventAsyncWithHttpInfo
     *
     * Track an Event
     *
     * @param  \TalonOne\Client\Model\NewEvent $newEvent (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackEventAsyncWithHttpInfo($newEvent, $dry = null)
    {
        $returnType = '\TalonOne\Client\Model\IntegrationState';
        $request = $this->trackEventRequest($newEvent, $dry);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trackEvent'
     *
     * @param  \TalonOne\Client\Model\NewEvent $newEvent (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function trackEventRequest($newEvent, $dry = null)
    {
        // verify the required parameter 'newEvent' is set
        if ($newEvent === null || (is_array($newEvent) && count($newEvent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newEvent when calling trackEvent'
            );
        }

        $resourcePath = '/v1/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dry !== null) {
            if('form' === 'form' && is_array($dry)) {
                foreach($dry as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dry'] = $dry;
            }
        }



        // body params
        $_tempBody = null;
        if (isset($newEvent)) {
            $_tempBody = $newEvent;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomerProfile
     *
     * Update a Customer Profile V1
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\NewCustomerProfile $newCustomerProfile newCustomerProfile (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TalonOne\Client\Model\IntegrationState
     */
    public function updateCustomerProfile($integrationId, $newCustomerProfile, $dry = null)
    {
        list($response) = $this->updateCustomerProfileWithHttpInfo($integrationId, $newCustomerProfile, $dry);
        return $response;
    }

    /**
     * Operation updateCustomerProfileWithHttpInfo
     *
     * Update a Customer Profile V1
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\NewCustomerProfile $newCustomerProfile (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TalonOne\Client\Model\IntegrationState, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerProfileWithHttpInfo($integrationId, $newCustomerProfile, $dry = null)
    {
        $request = $this->updateCustomerProfileRequest($integrationId, $newCustomerProfile, $dry);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TalonOne\Client\Model\IntegrationState' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TalonOne\Client\Model\IntegrationState', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TalonOne\Client\Model\IntegrationState';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TalonOne\Client\Model\IntegrationState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerProfileAsync
     *
     * Update a Customer Profile V1
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\NewCustomerProfile $newCustomerProfile (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerProfileAsync($integrationId, $newCustomerProfile, $dry = null)
    {
        return $this->updateCustomerProfileAsyncWithHttpInfo($integrationId, $newCustomerProfile, $dry)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerProfileAsyncWithHttpInfo
     *
     * Update a Customer Profile V1
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\NewCustomerProfile $newCustomerProfile (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerProfileAsyncWithHttpInfo($integrationId, $newCustomerProfile, $dry = null)
    {
        $returnType = '\TalonOne\Client\Model\IntegrationState';
        $request = $this->updateCustomerProfileRequest($integrationId, $newCustomerProfile, $dry);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomerProfile'
     *
     * @param  string $integrationId The custom identifier for this profile, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\NewCustomerProfile $newCustomerProfile (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCustomerProfileRequest($integrationId, $newCustomerProfile, $dry = null)
    {
        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integrationId when calling updateCustomerProfile'
            );
        }
        // verify the required parameter 'newCustomerProfile' is set
        if ($newCustomerProfile === null || (is_array($newCustomerProfile) && count($newCustomerProfile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newCustomerProfile when calling updateCustomerProfile'
            );
        }

        $resourcePath = '/v1/customer_profiles/{integrationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dry !== null) {
            if('form' === 'form' && is_array($dry)) {
                foreach($dry as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dry'] = $dry;
            }
        }


        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationId' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($newCustomerProfile)) {
            $_tempBody = $newCustomerProfile;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomerProfileAudiences
     *
     * Update a Customer Profile Audiences
     *
     * @param  \TalonOne\Client\Model\CustomerProfileAudienceRequest $customerProfileAudienceRequest customerProfileAudienceRequest (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateCustomerProfileAudiences($customerProfileAudienceRequest)
    {
        $this->updateCustomerProfileAudiencesWithHttpInfo($customerProfileAudienceRequest);
    }

    /**
     * Operation updateCustomerProfileAudiencesWithHttpInfo
     *
     * Update a Customer Profile Audiences
     *
     * @param  \TalonOne\Client\Model\CustomerProfileAudienceRequest $customerProfileAudienceRequest (required)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerProfileAudiencesWithHttpInfo($customerProfileAudienceRequest)
    {
        $request = $this->updateCustomerProfileAudiencesRequest($customerProfileAudienceRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerProfileAudiencesAsync
     *
     * Update a Customer Profile Audiences
     *
     * @param  \TalonOne\Client\Model\CustomerProfileAudienceRequest $customerProfileAudienceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerProfileAudiencesAsync($customerProfileAudienceRequest)
    {
        return $this->updateCustomerProfileAudiencesAsyncWithHttpInfo($customerProfileAudienceRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerProfileAudiencesAsyncWithHttpInfo
     *
     * Update a Customer Profile Audiences
     *
     * @param  \TalonOne\Client\Model\CustomerProfileAudienceRequest $customerProfileAudienceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerProfileAudiencesAsyncWithHttpInfo($customerProfileAudienceRequest)
    {
        $returnType = '';
        $request = $this->updateCustomerProfileAudiencesRequest($customerProfileAudienceRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomerProfileAudiences'
     *
     * @param  \TalonOne\Client\Model\CustomerProfileAudienceRequest $customerProfileAudienceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCustomerProfileAudiencesRequest($customerProfileAudienceRequest)
    {
        // verify the required parameter 'customerProfileAudienceRequest' is set
        if ($customerProfileAudienceRequest === null || (is_array($customerProfileAudienceRequest) && count($customerProfileAudienceRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerProfileAudienceRequest when calling updateCustomerProfileAudiences'
            );
        }

        $resourcePath = '/v2/customer_audiences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($customerProfileAudienceRequest)) {
            $_tempBody = $customerProfileAudienceRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomerProfileV2
     *
     * Update a Customer Profile
     *
     * @param  string $integrationId The custom identifier for this profile. Must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\CustomerProfileIntegrationRequestV2 $customerProfileIntegrationRequestV2 customerProfileIntegrationRequestV2 (required)
     * @param  bool $runRuleEngine Indicates whether to run the rule engine. (optional, default to false)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;. (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TalonOne\Client\Model\IntegrationStateV2
     */
    public function updateCustomerProfileV2($integrationId, $customerProfileIntegrationRequestV2, $runRuleEngine = false, $dry = null)
    {
        list($response) = $this->updateCustomerProfileV2WithHttpInfo($integrationId, $customerProfileIntegrationRequestV2, $runRuleEngine, $dry);
        return $response;
    }

    /**
     * Operation updateCustomerProfileV2WithHttpInfo
     *
     * Update a Customer Profile
     *
     * @param  string $integrationId The custom identifier for this profile. Must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\CustomerProfileIntegrationRequestV2 $customerProfileIntegrationRequestV2 (required)
     * @param  bool $runRuleEngine Indicates whether to run the rule engine. (optional, default to false)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;. (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TalonOne\Client\Model\IntegrationStateV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerProfileV2WithHttpInfo($integrationId, $customerProfileIntegrationRequestV2, $runRuleEngine = false, $dry = null)
    {
        $request = $this->updateCustomerProfileV2Request($integrationId, $customerProfileIntegrationRequestV2, $runRuleEngine, $dry);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TalonOne\Client\Model\IntegrationStateV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TalonOne\Client\Model\IntegrationStateV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TalonOne\Client\Model\IntegrationStateV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TalonOne\Client\Model\IntegrationStateV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerProfileV2Async
     *
     * Update a Customer Profile
     *
     * @param  string $integrationId The custom identifier for this profile. Must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\CustomerProfileIntegrationRequestV2 $customerProfileIntegrationRequestV2 (required)
     * @param  bool $runRuleEngine Indicates whether to run the rule engine. (optional, default to false)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerProfileV2Async($integrationId, $customerProfileIntegrationRequestV2, $runRuleEngine = false, $dry = null)
    {
        return $this->updateCustomerProfileV2AsyncWithHttpInfo($integrationId, $customerProfileIntegrationRequestV2, $runRuleEngine, $dry)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerProfileV2AsyncWithHttpInfo
     *
     * Update a Customer Profile
     *
     * @param  string $integrationId The custom identifier for this profile. Must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\CustomerProfileIntegrationRequestV2 $customerProfileIntegrationRequestV2 (required)
     * @param  bool $runRuleEngine Indicates whether to run the rule engine. (optional, default to false)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerProfileV2AsyncWithHttpInfo($integrationId, $customerProfileIntegrationRequestV2, $runRuleEngine = false, $dry = null)
    {
        $returnType = '\TalonOne\Client\Model\IntegrationStateV2';
        $request = $this->updateCustomerProfileV2Request($integrationId, $customerProfileIntegrationRequestV2, $runRuleEngine, $dry);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomerProfileV2'
     *
     * @param  string $integrationId The custom identifier for this profile. Must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\CustomerProfileIntegrationRequestV2 $customerProfileIntegrationRequestV2 (required)
     * @param  bool $runRuleEngine Indicates whether to run the rule engine. (optional, default to false)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. Only used when &#x60;runRuleEngine&#x60; is set to &#x60;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCustomerProfileV2Request($integrationId, $customerProfileIntegrationRequestV2, $runRuleEngine = false, $dry = null)
    {
        // verify the required parameter 'integrationId' is set
        if ($integrationId === null || (is_array($integrationId) && count($integrationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integrationId when calling updateCustomerProfileV2'
            );
        }
        // verify the required parameter 'customerProfileIntegrationRequestV2' is set
        if ($customerProfileIntegrationRequestV2 === null || (is_array($customerProfileIntegrationRequestV2) && count($customerProfileIntegrationRequestV2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerProfileIntegrationRequestV2 when calling updateCustomerProfileV2'
            );
        }

        $resourcePath = '/v2/customer_profiles/{integrationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($runRuleEngine !== null) {
            if('form' === 'form' && is_array($runRuleEngine)) {
                foreach($runRuleEngine as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['runRuleEngine'] = $runRuleEngine;
            }
        }
        // query params
        if ($dry !== null) {
            if('form' === 'form' && is_array($dry)) {
                foreach($dry as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dry'] = $dry;
            }
        }


        // path params
        if ($integrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationId' . '}',
                ObjectSerializer::toPathValue($integrationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customerProfileIntegrationRequestV2)) {
            $_tempBody = $customerProfileIntegrationRequestV2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomerProfilesV2
     *
     * Update multiple Customer Profiles
     *
     * @param  \TalonOne\Client\Model\MultipleCustomerProfileIntegrationRequest $multipleCustomerProfileIntegrationRequest multipleCustomerProfileIntegrationRequest (required)
     * @param  string $silent If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TalonOne\Client\Model\MultipleCustomerProfileIntegrationResponseV2
     */
    public function updateCustomerProfilesV2($multipleCustomerProfileIntegrationRequest, $silent = null)
    {
        list($response) = $this->updateCustomerProfilesV2WithHttpInfo($multipleCustomerProfileIntegrationRequest, $silent);
        return $response;
    }

    /**
     * Operation updateCustomerProfilesV2WithHttpInfo
     *
     * Update multiple Customer Profiles
     *
     * @param  \TalonOne\Client\Model\MultipleCustomerProfileIntegrationRequest $multipleCustomerProfileIntegrationRequest (required)
     * @param  string $silent If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TalonOne\Client\Model\MultipleCustomerProfileIntegrationResponseV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerProfilesV2WithHttpInfo($multipleCustomerProfileIntegrationRequest, $silent = null)
    {
        $request = $this->updateCustomerProfilesV2Request($multipleCustomerProfileIntegrationRequest, $silent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TalonOne\Client\Model\MultipleCustomerProfileIntegrationResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TalonOne\Client\Model\MultipleCustomerProfileIntegrationResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TalonOne\Client\Model\MultipleCustomerProfileIntegrationResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TalonOne\Client\Model\MultipleCustomerProfileIntegrationResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerProfilesV2Async
     *
     * Update multiple Customer Profiles
     *
     * @param  \TalonOne\Client\Model\MultipleCustomerProfileIntegrationRequest $multipleCustomerProfileIntegrationRequest (required)
     * @param  string $silent If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerProfilesV2Async($multipleCustomerProfileIntegrationRequest, $silent = null)
    {
        return $this->updateCustomerProfilesV2AsyncWithHttpInfo($multipleCustomerProfileIntegrationRequest, $silent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerProfilesV2AsyncWithHttpInfo
     *
     * Update multiple Customer Profiles
     *
     * @param  \TalonOne\Client\Model\MultipleCustomerProfileIntegrationRequest $multipleCustomerProfileIntegrationRequest (required)
     * @param  string $silent If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerProfilesV2AsyncWithHttpInfo($multipleCustomerProfileIntegrationRequest, $silent = null)
    {
        $returnType = '\TalonOne\Client\Model\MultipleCustomerProfileIntegrationResponseV2';
        $request = $this->updateCustomerProfilesV2Request($multipleCustomerProfileIntegrationRequest, $silent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomerProfilesV2'
     *
     * @param  \TalonOne\Client\Model\MultipleCustomerProfileIntegrationRequest $multipleCustomerProfileIntegrationRequest (required)
     * @param  string $silent If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCustomerProfilesV2Request($multipleCustomerProfileIntegrationRequest, $silent = null)
    {
        // verify the required parameter 'multipleCustomerProfileIntegrationRequest' is set
        if ($multipleCustomerProfileIntegrationRequest === null || (is_array($multipleCustomerProfileIntegrationRequest) && count($multipleCustomerProfileIntegrationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $multipleCustomerProfileIntegrationRequest when calling updateCustomerProfilesV2'
            );
        }

        $resourcePath = '/v2/customer_profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($silent !== null) {
            if('form' === 'form' && is_array($silent)) {
                foreach($silent as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['silent'] = $silent;
            }
        }



        // body params
        $_tempBody = null;
        if (isset($multipleCustomerProfileIntegrationRequest)) {
            $_tempBody = $multipleCustomerProfileIntegrationRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomerSession
     *
     * Update a Customer Session V1
     *
     * @param  string $customerSessionId The custom identifier for this session, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\NewCustomerSession $newCustomerSession newCustomerSession (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TalonOne\Client\Model\IntegrationState
     */
    public function updateCustomerSession($customerSessionId, $newCustomerSession, $dry = null)
    {
        list($response) = $this->updateCustomerSessionWithHttpInfo($customerSessionId, $newCustomerSession, $dry);
        return $response;
    }

    /**
     * Operation updateCustomerSessionWithHttpInfo
     *
     * Update a Customer Session V1
     *
     * @param  string $customerSessionId The custom identifier for this session, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\NewCustomerSession $newCustomerSession (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TalonOne\Client\Model\IntegrationState, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerSessionWithHttpInfo($customerSessionId, $newCustomerSession, $dry = null)
    {
        $request = $this->updateCustomerSessionRequest($customerSessionId, $newCustomerSession, $dry);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TalonOne\Client\Model\IntegrationState' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TalonOne\Client\Model\IntegrationState', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TalonOne\Client\Model\IntegrationState';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TalonOne\Client\Model\IntegrationState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerSessionAsync
     *
     * Update a Customer Session V1
     *
     * @param  string $customerSessionId The custom identifier for this session, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\NewCustomerSession $newCustomerSession (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerSessionAsync($customerSessionId, $newCustomerSession, $dry = null)
    {
        return $this->updateCustomerSessionAsyncWithHttpInfo($customerSessionId, $newCustomerSession, $dry)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerSessionAsyncWithHttpInfo
     *
     * Update a Customer Session V1
     *
     * @param  string $customerSessionId The custom identifier for this session, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\NewCustomerSession $newCustomerSession (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerSessionAsyncWithHttpInfo($customerSessionId, $newCustomerSession, $dry = null)
    {
        $returnType = '\TalonOne\Client\Model\IntegrationState';
        $request = $this->updateCustomerSessionRequest($customerSessionId, $newCustomerSession, $dry);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomerSession'
     *
     * @param  string $customerSessionId The custom identifier for this session, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\NewCustomerSession $newCustomerSession (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCustomerSessionRequest($customerSessionId, $newCustomerSession, $dry = null)
    {
        // verify the required parameter 'customerSessionId' is set
        if ($customerSessionId === null || (is_array($customerSessionId) && count($customerSessionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerSessionId when calling updateCustomerSession'
            );
        }
        // verify the required parameter 'newCustomerSession' is set
        if ($newCustomerSession === null || (is_array($newCustomerSession) && count($newCustomerSession) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newCustomerSession when calling updateCustomerSession'
            );
        }

        $resourcePath = '/v1/customer_sessions/{customerSessionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dry !== null) {
            if('form' === 'form' && is_array($dry)) {
                foreach($dry as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dry'] = $dry;
            }
        }


        // path params
        if ($customerSessionId !== null) {
            $resourcePath = str_replace(
                '{' . 'customerSessionId' . '}',
                ObjectSerializer::toPathValue($customerSessionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($newCustomerSession)) {
            $_tempBody = $newCustomerSession;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomerSessionV2
     *
     * Update a Customer Session
     *
     * @param  string $customerSessionId The custom identifier for this session, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\IntegrationRequest $integrationRequest integrationRequest (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TalonOne\Client\Model\IntegrationStateV2
     */
    public function updateCustomerSessionV2($customerSessionId, $integrationRequest, $dry = null)
    {
        list($response) = $this->updateCustomerSessionV2WithHttpInfo($customerSessionId, $integrationRequest, $dry);
        return $response;
    }

    /**
     * Operation updateCustomerSessionV2WithHttpInfo
     *
     * Update a Customer Session
     *
     * @param  string $customerSessionId The custom identifier for this session, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\IntegrationRequest $integrationRequest (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \TalonOne\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TalonOne\Client\Model\IntegrationStateV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerSessionV2WithHttpInfo($customerSessionId, $integrationRequest, $dry = null)
    {
        $request = $this->updateCustomerSessionV2Request($customerSessionId, $integrationRequest, $dry);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TalonOne\Client\Model\IntegrationStateV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TalonOne\Client\Model\IntegrationStateV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TalonOne\Client\Model\IntegrationStateV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TalonOne\Client\Model\IntegrationStateV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerSessionV2Async
     *
     * Update a Customer Session
     *
     * @param  string $customerSessionId The custom identifier for this session, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\IntegrationRequest $integrationRequest (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerSessionV2Async($customerSessionId, $integrationRequest, $dry = null)
    {
        return $this->updateCustomerSessionV2AsyncWithHttpInfo($customerSessionId, $integrationRequest, $dry)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerSessionV2AsyncWithHttpInfo
     *
     * Update a Customer Session
     *
     * @param  string $customerSessionId The custom identifier for this session, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\IntegrationRequest $integrationRequest (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerSessionV2AsyncWithHttpInfo($customerSessionId, $integrationRequest, $dry = null)
    {
        $returnType = '\TalonOne\Client\Model\IntegrationStateV2';
        $request = $this->updateCustomerSessionV2Request($customerSessionId, $integrationRequest, $dry);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomerSessionV2'
     *
     * @param  string $customerSessionId The custom identifier for this session, must be unique within the account. (required)
     * @param  \TalonOne\Client\Model\IntegrationRequest $integrationRequest (required)
     * @param  bool $dry Indicates whether to persist the changes. Changes are ignored when &#x60;dry&#x3D;true&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCustomerSessionV2Request($customerSessionId, $integrationRequest, $dry = null)
    {
        // verify the required parameter 'customerSessionId' is set
        if ($customerSessionId === null || (is_array($customerSessionId) && count($customerSessionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerSessionId when calling updateCustomerSessionV2'
            );
        }
        // verify the required parameter 'integrationRequest' is set
        if ($integrationRequest === null || (is_array($integrationRequest) && count($integrationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integrationRequest when calling updateCustomerSessionV2'
            );
        }

        $resourcePath = '/v2/customer_sessions/{customerSessionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dry !== null) {
            if('form' === 'form' && is_array($dry)) {
                foreach($dry as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dry'] = $dry;
            }
        }


        // path params
        if ($customerSessionId !== null) {
            $resourcePath = str_replace(
                '{' . 'customerSessionId' . '}',
                ObjectSerializer::toPathValue($customerSessionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($integrationRequest)) {
            $_tempBody = $integrationRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
